Project Path: YAPA-2-modern

Source Tree:

```
YAPA-2-modern
├── Build
│   ├── Build.cmd
│   ├── CreateNuget.ps1
│   ├── curlUpload.bat
│   ├── UploadRelease.ps1
│   └── YAPA2.nuspec
├── CommonAssemblyInfo.cs
├── GitVersion.yml
├── Libraries
│   └── Xceed.Wpf.Toolkit.dll
├── LICENSE.TXT
├── NuGet.Config
├── README.md
├── YAPA
│   ├── App.config
│   ├── App.xaml
│   ├── App.xaml.cs
│   ├── Commands
│   │   ├── CancelSettingsCommand.cs
│   │   └── SaveSettingsCommand.cs
│   ├── IconSet.res
│   ├── Migrations
│   │   ├── 20170204162935_Initial.cs
│   │   ├── 20170204162935_Initial.Designer.cs
│   │   ├── 20171011164113_Duration min.cs
│   │   ├── 20171011164113_Duration min.Designer.cs
│   │   ├── 20171016181624_profile name.cs
│   │   ├── 20171016181624_profile name.Designer.cs
│   │   └── DatabaseContextModelSnapshot.cs
│   ├── NLog.config
│   ├── NLog.xsd
│   ├── packages.config
│   ├── Plugins
│   │   ├── Dashboard
│   │   │   ├── DashboardPluginMeta.cs
│   │   │   ├── GithubDashboard.xaml
│   │   │   ├── GithubDashboard.xaml.cs
│   │   │   ├── ItemRepository.cs
│   │   │   ├── PomodoroMonth.xaml
│   │   │   ├── PomodoroMonth.xaml.cs
│   │   │   ├── PomodorosPerTimeModel.cs
│   │   │   ├── PomodoroWeek.xaml
│   │   │   └── PomodoroWeek.xaml.cs
│   │   ├── MinimizeToTray
│   │   │   ├── MinimizeToTraySettingWindow.xaml
│   │   │   ├── MinimizeToTraySettingWindow.xaml.cs
│   │   │   └── SystemTray.cs
│   │   ├── PomodoroEngine
│   │   │   ├── CreatePomodoroProfile.xaml
│   │   │   ├── CreatePomodoroProfile.xaml.cs
│   │   │   ├── PomodoroEnginePluginMeta.cs
│   │   │   ├── PomodoroEngineSettingWindow.xaml
│   │   │   ├── PomodoroEngineSettingWindow.xaml.cs
│   │   │   ├── PomodoroProfileSettings.xaml
│   │   │   └── PomodoroProfileSettings.xaml.cs
│   │   ├── ReleaseNotes
│   │   │   ├── ReleaseNotesPlugin.cs
│   │   │   ├── ReleaseNotesWindow.xaml
│   │   │   └── ReleaseNotesWindow.xaml.cs
│   │   ├── SaveApplicationPossitionOnScreen
│   │   │   ├── SaveApplicationPositionOnScreen.cs
│   │   │   └── WindowPlacement.cs
│   │   ├── SoundSettings
│   │   │   ├── MusicPlayer
│   │   │   │   ├── MusicPlayer.cs
│   │   │   │   ├── MusicPlayerPluginSettingWindow.xaml
│   │   │   │   └── MusicPlayerPluginSettingWindow.xaml.cs
│   │   │   ├── SoundNotifications
│   │   │   │   ├── SoundNotifications.cs
│   │   │   │   ├── SoundNotificationSettingWindow.xaml
│   │   │   │   └── SoundNotificationSettingWindow.xaml.cs
│   │   │   ├── SoundSettingsPlugin.cs
│   │   │   ├── SoundSettingWindow.xaml
│   │   │   └── SoundSettingWindow.xaml.cs
│   │   └── Unclickable
│   │       ├── UnclickableMeta.cs
│   │       ├── UnclickableSettingWindow.xaml
│   │       └── UnclickableSettingWindow.xaml.cs
│   ├── Properties
│   │   ├── Resources.Designer.cs
│   │   ├── Resources.resx
│   │   ├── Settings.Designer.cs
│   │   └── Settings.settings
│   ├── Resources
│   │   ├── backward.ico
│   │   ├── ding.wav
│   │   ├── Fonts
│   │   │   ├── Segoe UI Light.ttf
│   │   │   ├── Solid-Mono.ttf
│   │   │   ├── XanhMono-Regular.ttf
│   │   │   └── Zoika.ttf
│   │   ├── loader.gif
│   │   ├── pause.ico
│   │   ├── pomo.ico
│   │   ├── pomo.png
│   │   ├── Pomodoro.png
│   │   ├── pomoTray.ico
│   │   ├── preferences.ico
│   │   ├── start.ico
│   │   ├── stop.ico
│   │   └── tick.wav
│   ├── SingleInstance.cs
│   ├── WPF
│   │   ├── AboutPage.xaml
│   │   ├── AboutPage.xaml.cs
│   │   ├── DatabaseContext.cs
│   │   ├── DependencyContainer.cs
│   │   ├── InternalPluginAttribute.cs
│   │   ├── PluginManager
│   │   │   ├── PluginManager.cs
│   │   │   ├── PluginManagerSettingWindow.xaml
│   │   │   └── PluginManagerSettingWindow.xaml.cs
│   │   ├── ReleaseNotesWindow.xaml
│   │   ├── ReleaseNotesWindow.xaml.cs
│   │   ├── RssFeedNormalizer.cs
│   │   ├── SettingsMananger
│   │   │   ├── SettingManager.cs
│   │   │   ├── SettingsWindow.xaml
│   │   │   └── SettingsWindow.xaml.cs
│   │   ├── Specifics
│   │   │   ├── DependencyInjector.cs
│   │   │   ├── NewftonsJson.cs
│   │   │   ├── ShowSettingsCommand.cs
│   │   │   ├── SoundPlayer.cs
│   │   │   ├── Timer.cs
│   │   │   ├── WpfEnviroment.cs
│   │   │   └── WpfThreading.cs
│   │   └── ThemeManager
│   │       ├── ThemeManager.cs
│   │       ├── ThemeManagerSettingWindow.xaml
│   │       └── ThemeManagerSettingWindow.xaml.cs
│   └── YAPA.csproj
├── YAPA.Shared
│   ├── Common
│   │   ├── DashboardPlugin.cs
│   │   ├── DateTimeExtensions.cs
│   │   ├── DateTimeWrapper.cs
│   │   ├── JsonYapaSettings.cs
│   │   ├── MainViewModel.cs
│   │   ├── NewftonsJson.cs
│   │   ├── PauseCommand.cs
│   │   ├── PomodoroEngine.cs
│   │   ├── ResetCommand.cs
│   │   ├── SkipCommand.cs
│   │   ├── StartCommand.cs
│   │   └── StopCommand.cs
│   ├── Contracts
│   │   ├── IApplication.cs
│   │   ├── IDate.cs
│   │   ├── IDependencyInjector.cs
│   │   ├── IEnviroment.cs
│   │   ├── IFontService.cs
│   │   ├── IJson.cs
│   │   ├── IMainViewModel.cs
│   │   ├── IMusicPlayer.cs
│   │   ├── IPlugin.cs
│   │   ├── IPluginManager.cs
│   │   ├── IPluginMeta.cs
│   │   ├── IPluginSettings.cs
│   │   ├── IPomodoroEngine.cs
│   │   ├── IPomodoroRepository.cs
│   │   ├── ISettingManager.cs
│   │   ├── ISettings.cs
│   │   ├── IShowSettingsCommand.cs
│   │   ├── IThemeManager.cs
│   │   ├── IThemeMeta.cs
│   │   ├── IThreading.cs
│   │   └── ITimer.cs
│   └── YAPA.Shared.csproj
├── YAPA.Shared.Tests
│   ├── SimpleWorkFlow.cs
│   ├── TestHelpers.cs
│   └── YAPA.Shared.Tests.csproj
├── YAPA.sln
├── YAPA.WPF.MotivationalTheme
│   ├── App.config
│   ├── App.xaml
│   ├── App.xaml.cs
│   ├── Const.cs
│   ├── Converters
│   │   └── VisibilityConverter.cs
│   ├── Fonts
│   │   ├── fontawesome-webfont.ttf
│   │   ├── RobotoCondensed-Bold.ttf
│   │   ├── RobotoCondensed-Light.ttf
│   │   └── RobotoCondensed-Regular.ttf
│   ├── Localizations
│   │   ├── General.Designer.cs
│   │   └── General.resx
│   ├── LocalizedStrings.cs
│   ├── MainWindow.xaml
│   ├── MainWindow.xaml.cs
│   ├── MotivationalThemeSettingsWindow.xaml
│   ├── MotivationalThemeSettingsWindow.xaml.cs
│   ├── MotivationTheme.cs
│   ├── Properties
│   │   ├── AssemblyInfo.cs
│   │   ├── Resources.Designer.cs
│   │   ├── Resources.resx
│   │   ├── Settings.Designer.cs
│   │   └── Settings.settings
│   ├── Quotes.cs
│   ├── Utils.cs
│   └── YAPA.WPF.Themes.Motivational.csproj
├── YAPA.WPF.Shared
│   ├── App.config
│   ├── packages.config
│   ├── Shared
│   │   ├── AbstractWindow.cs
│   │   ├── FontService.cs
│   │   ├── SecToTimeConverter.cs
│   │   └── YapaHelpers.cs
│   └── YAPA.WPF.Shared.csproj
├── YAPA.WPF.StarterTheme
│   ├── DefaultTheme.cs
│   ├── MainWindow.xaml
│   ├── MainWindow.xaml.cs
│   ├── MainWindowSettinWindow.xaml
│   ├── MainWindowSettinWindow.xaml.cs
│   ├── Properties
│   │   └── AssemblyInfo.cs
│   └── YAPA.WPF.StarterTheme.csproj
└── YAPA.WPF.Themes
    ├── DefaultTheme2
    │   ├── DefaultTheme2.cs
    │   ├── MainWindow2.xaml
    │   └── MainWindow2.xaml.cs
    ├── OutlinedText.cs
    ├── packages.config
    ├── YAPA
    │   ├── YapaTheme.xaml
    │   ├── YapaTheme.xaml.cs
    │   ├── YapaThemeSettings.cs
    │   ├── YapaThemeSettingWindow.xaml
    │   └── YapaThemeSettingWindow.xaml.cs
    └── YAPA.WPF.Themes.csproj

```

`\\?\C:\Dev\Projects\YAPA-2-modern\Build\Build.cmd`:

```cmd
pushd "%~dp0"
call "C:\Program Files\Microsoft Visual Studio\2022\Community\Common7\Tools\VsDevCmd.bat"
popd
msbuild ..\YAPA.sln /p:Configuration="Release"

```

`\\?\C:\Dev\Projects\YAPA-2-modern\Build\CreateNuget.ps1`:

```ps1
 #-------Get Version from YAPA.exe
 $fullVersion = (dir ..\Release\Yapa.exe).VersionInfo.FileVersion
 $baseUri = 'http://app.floatas.net/installers/YAPA-2/'
 #-PRE-RELEASE
 $squirrelVersionRegex = "\d+\.\d+\.\d+"
 $squirrelVersion = [regex]::matches($fullVersion, $squirrelVersionRegex)

 Write-Output "$squirrelVersion"

 #-------Set version in Yapa2.nuspec
 (Get-Content -path Yapa2.nuspec -Raw) -replace '%version%',$squirrelVersion | Set-Content -Path Yapa2.nuspec

 ..\.nuget\nuget pack Yapa2.nuspec -version $squirrelVersion -Properties Configuration=Release

 #--------------Get RELEASES file and latest release for deltas
Invoke-WebRequest -Uri "$($baseUri)RELEASES" -OutFile "Release\RELEASES"
$releases = Get-Content "Release\RELEASES"

$releaseItems = $releases.Split([Environment]::NewLine)

$index = $releaseItems.Count - 1
$lastRelease = ""
while ($true) {
    $lastRelease = $releaseItems[$index]
    $releaseParts = $lastRelease.Split(" ")

    if ($releaseParts[1] -match "full\.nupkg") {
        $lastRelease = $releaseParts[1]
        break;
    }
    else {
        $index--;
    }
}

Write-Output $lastRelease
$lastReleasePath = $baseUri+ $lastRelease
Invoke-WebRequest -Uri  $lastReleasePath -OutFile "Release\$lastRelease"


..\packages\squirrel.windows.1.5.28\tools\Squirrel --releasify YAPA2.$squirrelVersion.nupkg --releaseDir=Release  --no-msi

Move-Item -Path Release\Setup.exe -Destination Release\YAPA2.$squirrelVersion.exe -Force









```

`\\?\C:\Dev\Projects\YAPA-2-modern\Build\curlUpload.bat`:

```bat
curl -F "files=@%1" http://app.floatas.net/installers/upload?key=%2^&application=YAPA-2
```

`\\?\C:\Dev\Projects\YAPA-2-modern\Build\UploadRelease.ps1`:

```ps1
$publish_key = $env:INSTALLER_PUBLISH_KEY
Get-ChildItem "Release" | Foreach-Object {
    $path =  $_.FullName

    .\curlUpload.bat $path $publish_key

} 
```

`\\?\C:\Dev\Projects\YAPA-2-modern\Build\YAPA2.nuspec`:

```nuspec
<?xml version="1.0" encoding="utf-8"?>
<package xmlns="http://schemas.microsoft.com/packaging/2010/07/nuspec.xsd">
  <metadata>
    <id>YAPA2</id>
    <!-- version will be replaced by MSBuild -->
    <version>2.0.141</version>
    <title>YAPA2</title>
    <authors>Šarūnas Intas</authors>
    <description>Pomodoro application</description>
    <requireLicenseAcceptance>false</requireLicenseAcceptance>
    <copyright>Copyright 2022</copyright>
    <dependencies />
  </metadata>
  <files>
    <file src="..\Release\*.*" target="lib\net45\" exclude="**\*.pdb;**\*.nupkg;**\*.vshost.*"/>
	<file src="..\Release\Themes\*.*" target="lib\net45\Themes\" exclude="**\*.pdb;*.nupkg;**\*.vshost.*"/>
	<file src="..\Release\x64\*.*" target="lib\net45\x64\" exclude="**\*.pdb;**\*.nupkg;**\*.vshost.*"/>
	<file src="..\Release\x86\*.*" target="lib\net45\x86\" exclude="**\*.pdb;**\*.nupkg;**\*.vshost.*"/>
	<file src="..\Release\Resources\*.*" target="lib\net45\Resources\" exclude="**\*.pdb;**\*.nupkg;**\*.vshost.*"/>
	<file src="..\Release\Resources\Fonts\*.*" target="lib\net45\Resources\Fonts\" exclude="**\*.pdb;**\*.nupkg;**\*.vshost.*"/>
  </files>
</package>









```

`\\?\C:\Dev\Projects\YAPA-2-modern\CommonAssemblyInfo.cs`:

```cs
using System.Reflection;
using System.Resources;
using System.Runtime.InteropServices;

// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
[assembly: AssemblyTitle("YAPA 2")]
[assembly: AssemblyDescription("Yet Another Pomodoro Application 2")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("YAPA 2")]
[assembly: AssemblyProduct("YAPA 2")]
[assembly: AssemblyCopyright("Copyright ©  2017")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]

// Setting ComVisible to false makes the types in this assembly not visible 
// to COM components.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type.
[assembly: ComVisible(false)]


// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Build and Revision Numbers 
// by using the '*' as shown below:
// [assembly: AssemblyVersion("1.0.*")]
[assembly: NeutralResourcesLanguageAttribute("en")]
```

`\\?\C:\Dev\Projects\YAPA-2-modern\GitVersion.yml`:

```yml
mode: Mainline
increment: Patch

```

`\\?\C:\Dev\Projects\YAPA-2-modern\NuGet.Config`:

```Config
﻿<?xml version="1.0" encoding="utf-8"?>
<configuration>
  <packageSources>
    <clear/>
	<add key="myget" value="https://www.myget.org/f/floatas" />
    <add key="nuget.org" value="https://api.nuget.org/v3/index.json" protocolVersion="3" />
  </packageSources>
  <disabledPackageSources>
    <add key="Microsoft and .NET" value="true" />
  </disabledPackageSources>
  <packageRestore>
    <add key="enabled" value="True" />
    <add key="automatic" value="True" />
  </packageRestore>
  <bindingRedirects>
    <add key="skip" value="False" />
  </bindingRedirects>
  <packageManagement>
    <add key="format" value="0" />
    <add key="disabled" value="False" />
  </packageManagement>
</configuration>
```

`\\?\C:\Dev\Projects\YAPA-2-modern\README.md`:

```md
![Yapa2](https://user-images.githubusercontent.com/7883111/155704469-7854e3d0-9f1e-4d46-b42a-acaf09856f57.jpg)

YAPA-2 is minimalistic desktop timer app for Pomodoro Technique users.

[![Build status](https://ci.appveyor.com/api/projects/status/p7k6ort2xvl35vbq?svg=true)](https://ci.appveyor.com/project/floatas/yapa-2-lffj9) [![Total downloads](https://img.shields.io/github/downloads/YetAnotherPomodoroApp/YAPA-2/total)](https://somsubhra.github.io/github-release-stats/?username=YetAnotherPomodoroApp&repository=YAPA-2&page=1&per_page=5) [Download latest version](https://github.com/YetAnotherPomodoroApp/YAPA-2/releases/latest) | [Website](https://yapa2.app)

Features
---------

- Pomodoro™ counter :)
- Control app using taskbar jumplist
- Configurable periods
- Count time backwards
- Automatically start break
- Show\hide in taskbar
- Minimize to tray
- Supports custom themes

- Command line arguments
  - /start
  - /stop
  - /pause
  - /reset
  - /settings
  - /homepage

- Sound
  - Disable all sound notifications
  - Volume controls
  - Play custom music during work\break periods

- Dashboard
  - Pomodoro counter history similar to github contributions

- Themes
  - YAPA 1.0 theme
    - Shows period progress on taskbar
    - Select opacity for timer
    - Select light or dark theme for timer
    - Change application size
    - Enable\Disable flashing animation
![Theme Settings Preview](http://imgur.com/ulwYfix.gif)

  - Motivational theme
    - More about theme [here](https://github.com/YetAnotherPomodoroApp/MotivationalTheme).

Contribution guidelines
===
1. Before doing code refactoring, create issue to discuss it.
2. Create new branch for each bug/feature.

How to build installer
===
Installers are created with slightly modified [Squirrel.Windows](https://github.com/floatas/Squirrel.Windows)
1. Restore nuget packages.
``NuGet restore ..\Yapa.sln``
2. Run ``Build\BuildAndRelease.cmd`` 
Without arguments 2.0.0 version will be used.
To create specific version: ``Build\BuildAndRelease.cmd 2.4.9`` 

Nightly builds
===
To enable nightly builds:
1. Go to folder: C:\Users\<username>\Documents\YAPA2
2. Create empty file: PreRelease.txt
3. Restart application.
4. Open application settings, next to version you should see *pre-release*.

To disable nightly builds:
1. Go to folder: C:\Users\<username>\Documents\YAPA2
2. Remove file: PreRelease.txt
3. Uninstall application (application settings and completed pomodoro history will not be removed).
4. Install latest stable version

```

`\\?\C:\Dev\Projects\YAPA-2-modern\YAPA\App.config`:

```config
<?xml version="1.0" encoding="utf-8"?>
<configuration>
    <configSections>
    
    <section name="entityFramework" type="System.Data.Entity.Internal.ConfigFile.EntityFrameworkSection, EntityFramework, Version=6.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" requirePermission="false"/>
 
    </configSections>
    <startup> 
        <supportedRuntime version="v4.0" sku=".NETFramework,Version=v4.8"/>
    </startup>

  <connectionStrings>
    <add name="CFSqlCe.Dal.DvdContext" providerName="System.Data.SqlServerCe.4.0" connectionString="Data Source=DvdDatabase.sdf"/>
  </connectionStrings>
  <runtime>
    <assemblyBinding xmlns="urn:schemas-microsoft-com:asm.v1">
      <dependentAssembly>
        <assemblyIdentity name="Xceed.Wpf.Toolkit" publicKeyToken="3e4669d2f30244f4" culture="neutral"/>
        <bindingRedirect oldVersion="0.0.0.0-3.1.0.0" newVersion="3.1.0.0"/>
      </dependentAssembly>
      <dependentAssembly>
        <assemblyIdentity name="System.Diagnostics.DiagnosticSource" publicKeyToken="cc7b13ffcd2ddd51" culture="neutral"/>
        <bindingRedirect oldVersion="0.0.0.0-4.0.1.0" newVersion="4.0.1.0"/>
      </dependentAssembly>
      <dependentAssembly>
        <assemblyIdentity name="System.IO.FileSystem" publicKeyToken="b03f5f7f11d50a3a" culture="neutral"/>
        <bindingRedirect oldVersion="0.0.0.0-4.0.2.0" newVersion="4.0.2.0"/>
      </dependentAssembly>
      <dependentAssembly>
        <assemblyIdentity name="System.Net.Http" publicKeyToken="b03f5f7f11d50a3a" culture="neutral"/>
        <bindingRedirect oldVersion="0.0.0.0-4.2.0.0" newVersion="4.2.0.0"/>
      </dependentAssembly>
      <dependentAssembly>
        <assemblyIdentity name="System.IO.Compression" publicKeyToken="b77a5c561934e089" culture="neutral"/>
        <bindingRedirect oldVersion="0.0.0.0-4.2.0.0" newVersion="4.2.0.0"/>
      </dependentAssembly>
      <dependentAssembly>
        <assemblyIdentity name="System.Xml.ReaderWriter" publicKeyToken="b03f5f7f11d50a3a" culture="neutral"/>
        <bindingRedirect oldVersion="0.0.0.0-4.1.0.0" newVersion="4.1.0.0"/>
      </dependentAssembly>
      <dependentAssembly>
        <assemblyIdentity name="System.Text.Encodings.Web" publicKeyToken="cc7b13ffcd2ddd51" culture="neutral"/>
        <bindingRedirect oldVersion="0.0.0.0-4.0.3.1" newVersion="4.0.3.1"/>
      </dependentAssembly>
      <dependentAssembly>
        <assemblyIdentity name="System.Runtime.CompilerServices.Unsafe" publicKeyToken="b03f5f7f11d50a3a" culture="neutral"/>
        <bindingRedirect oldVersion="0.0.0.0-4.0.4.1" newVersion="4.0.4.1"/>
      </dependentAssembly>
    </assemblyBinding>
  </runtime>
</configuration>

```

`\\?\C:\Dev\Projects\YAPA-2-modern\YAPA\App.xaml`:

```xaml
﻿<Application x:Class="YAPA.App"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    <Application.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.Light.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.Defaults.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MaterialDesignColors;component/Themes/Recommended/Primary/MaterialDesignColor.DeepPurple.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MaterialDesignColors;component/Themes/Recommended/Accent/MaterialDesignColor.Lime.xaml" />
            </ResourceDictionary.MergedDictionaries>
        </ResourceDictionary>
    </Application.Resources>
</Application>
```

`\\?\C:\Dev\Projects\YAPA-2-modern\YAPA\App.xaml.cs`:

```cs
﻿using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System.Windows;
using Autofac;
using NLog;
using SimpleFeedReader;
using Squirrel;
using YAPA.Shared;
using YAPA.Shared.Common;
using YAPA.Shared.Contracts;
using YAPA.WPF;
using YAPA.WPF.SettingsMananger;
using IContainer = Autofac.IContainer;

namespace YAPA
{
    public partial class App : ISingleInstanceApp
    {
        private static IContainer Container { get; set; }
        private static IPluginManager PluginManager { get; set; }
        private static IThemeManager ThemeManager { get; set; }
        private static Dashboard Dashboard { get; set; }

        [STAThread]
        public static void Main()
        {
            if (SingleInstance<App>.InitializeAsFirstInstance("YAPA2"))
            {
                var application = new App();

                AppDomain.CurrentDomain.UnhandledException += CurrentDomain_UnhandledException; ;

                var dCont = new DependencyContainer();
                Container = dCont.Container;
                PluginManager = dCont.PluginManager;
                ThemeManager = dCont.ThemeManager;
                Dashboard = dCont.Dashboard;

                //Load theme
                Current.MainWindow = (Window)dCont.MainWindow;
#if !DEBUG
                Task.Run(async () =>
                {
                    await Update(Container.Resolve<ISettingManager>(), Container.Resolve<IEnvironment>(), Container.Resolve<PomodoroEngineSettings>());
                });
#endif

                Current.MainWindow.Loaded += MainWindow_Loaded;
                Current.MainWindow.Closing += MainWindowOnClosing;
                Current.MainWindow.Show();
                Current.MainWindow.Closed += MainWindow_Closed;

                var logger = LogManager.GetLogger("YAPA2");
                logger.Info("Application starting");


                application.Init();
                application.Run();

                SingleInstance<App>.Cleanup();
            }
        }

        private static void MainWindowOnClosing(object sender, CancelEventArgs cancelEventArgs)
        {
            try
            {
                var settingsWindow = Container.Resolve<SettingsWindow>();
                settingsWindow.Close();
            }
            catch
            {
            }

            SaveSnapshot();
        }

        private static void SaveSnapshot()
        {
            string baseDir = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments), @"YAPA2");
            var json = Container.Resolve<IJson>();
            var engine = Container.Resolve<IPomodoroEngine>();

            var file = Path.Combine(baseDir, "snapshot.json");
            File.WriteAllText(file, json.Serialize(engine.GetSnapshot()));
        }

        private static void MainWindow_Loaded(object sender, RoutedEventArgs e)
        {
            LoadSnapshot();

            var settings = Container.Resolve<PomodoroEngineSettings>();
            if (!string.IsNullOrEmpty(settings.ReleaseNotes))
            {
                var parent = (Window)sender;
                var releaseNoteWindow = new ReleaseNotesWindow(settings.ReleaseNotes) { Owner = parent };
                releaseNoteWindow.ShowDialog();
                settings.ReleaseNotes = null;
            }
        }

        private static void LoadSnapshot()
        {
            var engine = Container.Resolve<IPomodoroEngine>();
            var date = Container.Resolve<IDate>();
            var json = Container.Resolve<IJson>();

            try
            {
                var file = SnapshotFile();

                if (!File.Exists(file))
                {
                    return;
                }

                var snapshotJson = File.ReadAllText(file);
                if (string.IsNullOrEmpty(snapshotJson))
                {
                    return;
                }
                var snapshot = json.Deserialize<PomodoroEngineSnapshot>(snapshotJson);
                if (snapshot == null)
                {
                    return;
                }
                var args = Environment.GetCommandLineArgs();
                var startImmediately = args.Select(x => x.ToLowerInvariant()).Contains(CommandLineArguments.Start);

                var remainingTime = TimeSpan.FromSeconds(snapshot.PomodoroProfile.WorkTime - snapshot.PausedTime);
                if ((snapshot.Phase == PomodoroPhase.Work || snapshot.Phase == PomodoroPhase.Pause)
                    && (startImmediately ||
                        MessageBox.Show(
                            $"Remaining time: {remainingTime.Minutes:00}:{remainingTime.Seconds:00}. Resume pomodoro ?",
                            "Unfinished pomodoro", MessageBoxButton.YesNo) == MessageBoxResult.Yes))
                {
                    snapshot.StartDate = date.DateTimeUtc();
                    engine.LoadSnapshot(snapshot);
                }
            }
            catch
            {
                //Ignore corrupted snapshots
            }
            finally
            {
                RemoveSnapshotFile();
            }
        }

        private static string SnapshotFile()
        {
            string baseDir = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments), @"YAPA2");

            var file = Path.Combine(baseDir, "snapshot.json");
            return file;
        }

        private static void RemoveSnapshotFile()
        {
            try
            {
                var file = SnapshotFile();
                if (!File.Exists(file))
                {
                    return;
                }
                File.Delete(file);
            }
            catch (Exception)
            {
                //Ignore
            }
        }

        private static void CurrentDomain_UnhandledException(object sender, UnhandledExceptionEventArgs e)
        {
            var logger = LogManager.GetLogger("YAPA2");
            logger.Fatal($"Unhandled exception: {e.ExceptionObject}");
        }

        private static void MainWindow_Closed(object sender, EventArgs e)
        {
            Current.Shutdown();
        }

        private static async Task Update(ISettingManager settings, IEnvironment environment, PomodoroEngineSettings engineSettings)
        {
            var logger = LogManager.GetLogger("YAPA2");

            try
            {
                var releaseUrl = "yapa-2/";
                var preReleaseUrl = "yapa-2-pre-release/";

                var httpUrl = "http://app.floatas.net/installers";

                var updateType = environment.PreRelease() ? preReleaseUrl : releaseUrl;

                var httpUpdateUrl = CombineUri(httpUrl, updateType);
                logger.Info($"Updating from: {httpUpdateUrl}");

                var newVersion = await UpdateFromUrl(httpUpdateUrl);
                UpdateSettingsWithReleaseInfo(newVersion, settings, engineSettings);
            }
            catch (Exception e)
            {
                logger.Fatal(e, $"Unhandled exception while updating");
            }
        }

        private static string CombineUri(params string[] parts)
        {
            return string.Join("/", parts);
        }

        private static void UpdateSettingsWithReleaseInfo(string newVersion, ISettingManager settings, PomodoroEngineSettings engineSettings)
        {
            if (string.IsNullOrEmpty(newVersion))
            {
                return;
            }
            settings.RestartNeeded = true;
            settings.NewVersion = newVersion;
            engineSettings.ReleaseNotes = GetReleaseNotesFor(newVersion);
        }

        private static async Task<string> UpdateFromUrl(string updateUrl)
        {
            var version = string.Empty;
            using (var mgr = new UpdateManager(updateUrl))
            {
                var update = await mgr.UpdateApp();
                if (!string.IsNullOrEmpty(update?.Filename))
                {
                    version = update.Version.ToString();
                }
            }

            return version;
        }

        private static string GetReleaseNotesFor(string newVersion)
        {
            var reader = new FeedReader(new RssFeedNormalizer());
            var releases = reader.RetrieveFeed("https://github.com/YetAnotherPomodoroApp/YAPA-2/releases.atom");
            var release = releases.First(x => x.Title.Contains(newVersion));
            return release?.Content;
        }

        public void Init()
        {
            InitializeComponent();
        }

        #region ISingleInstanceApp Members

        public bool SignalExternalCommandLineArgs(IList<string> args)
        {
            //the first index always contains the location of the exe
            if (args == null || args.Count < 2 || Current.MainWindow == null)
            {
                return true;
            }
            var arg = args[1];
            return ((IApplication)Current.MainWindow).ProcessCommandLineArg(arg);
        }

        #endregion
    }
}

```

`\\?\C:\Dev\Projects\YAPA-2-modern\YAPA\Commands\CancelSettingsCommand.cs`:

```cs
﻿using System;
using System.Windows;
using System.Windows.Input;
using YAPA.Shared.Contracts;

namespace YAPA.Commands
{
    public class CancelSettingsCommand : ICommand
    {
        private readonly Window _settingsWindow;
        private readonly ISettings _settings;

        public CancelSettingsCommand(Window settingWindow, ISettings settings)
        {
            _settingsWindow = settingWindow;
            _settings = settings;
        }

        public bool CanExecute(object parameter)
        {
            return true;
        }

        public void Execute(object parameter)
        {
            if (_settings.HasUnsavedChanges && MessageBox.Show("Do you want to cancel unsaved changes ?", "Cancel unsaved changes", MessageBoxButton.YesNo) == MessageBoxResult.No)
            {
                return;
            }
            if (_settings.HasUnsavedChanges)
            {
                _settings.Load();
            }
            _settingsWindow.Hide();
        }

        public event EventHandler CanExecuteChanged;
    }
}

```

`\\?\C:\Dev\Projects\YAPA-2-modern\YAPA\Commands\SaveSettingsCommand.cs`:

```cs
﻿using System;
using System.Windows.Input;
using YAPA.Shared.Contracts;

namespace YAPA.Commands
{
    public class SaveSettingsCommand : ICommand
    {
        private readonly ISettings _settings;

        public SaveSettingsCommand(ISettings settings)
        {
            _settings = settings;
            _settings.PropertyChanged += _settings_PropertyChanged;
        }

        private void _settings_PropertyChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e)
        {
            if (e.PropertyName == nameof(_settings.HasUnsavedChanges))
            {
                CanExecuteChanged?.Invoke(this, EventArgs.Empty);
            }
        }

        public bool CanExecute(object parameter)
        {
            return _settings.HasUnsavedChanges;
        }

        public void Execute(object parameter)
        {
            _settings.Save();

        }

        public event EventHandler CanExecuteChanged;
    }
}

```

`\\?\C:\Dev\Projects\YAPA-2-modern\YAPA\Migrations\20170204162935_Initial.cs`:

```cs
﻿using System;
using Microsoft.EntityFrameworkCore.Migrations;

namespace YAPA.Migrations
{
    public partial class Initial : Migration
    {
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.CreateTable(
                name: "Pomodoros",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("Sqlite:Autoincrement", true),
                    Count = table.Column<int>(nullable: false),
                    DateTime = table.Column<DateTime>(nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Pomodoros", x => x.Id);
                });
        }

        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropTable(
                name: "Pomodoros");
        }
    }
}

```

`\\?\C:\Dev\Projects\YAPA-2-modern\YAPA\Migrations\20170204162935_Initial.Designer.cs`:

```cs
﻿using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using YAPA;
using YAPA.WPF;

namespace YAPA.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20170204162935_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
            modelBuilder
                .HasAnnotation("ProductVersion", "1.1.0-rtm-22752");

            modelBuilder.Entity("YAPA.Contracts.PomodoroEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Count");

                    b.Property<DateTime>("DateTime");

                    b.HasKey("Id");

                    b.ToTable("Pomodoros");
                });
        }
    }
}

```

`\\?\C:\Dev\Projects\YAPA-2-modern\YAPA\Migrations\20171011164113_Duration min.cs`:

```cs
﻿using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore.Migrations;

namespace YAPA.Migrations
{
    public partial class Durationmin : Migration
    {
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.AddColumn<int>(
                name: "DurationMin",
                table: "Pomodoros",
                nullable: false,
                defaultValue: 0);
        }

        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropColumn(
                name: "DurationMin",
                table: "Pomodoros");
        }
    }
}

```

`\\?\C:\Dev\Projects\YAPA-2-modern\YAPA\Migrations\20171011164113_Duration min.Designer.cs`:

```cs
﻿using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using YAPA.WPF;

namespace YAPA.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20171011164113_Duration min")]
    partial class Durationmin
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
            modelBuilder
                .HasAnnotation("ProductVersion", "1.1.0-rtm-22752");

            modelBuilder.Entity("YAPA.Shared.Contracts.PomodoroEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Count");

                    b.Property<DateTime>("DateTime");

                    b.Property<int>("DurationMin");

                    b.HasKey("Id");

                    b.ToTable("Pomodoros");
                });
        }
    }
}

```

`\\?\C:\Dev\Projects\YAPA-2-modern\YAPA\Migrations\20171016181624_profile name.cs`:

```cs
﻿using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore.Migrations;

namespace YAPA.Migrations
{
    public partial class profilename : Migration
    {
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.AddColumn<string>(
                name: "ProfileName",
                table: "Pomodoros",
                nullable: true);
        }

        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropColumn(
                name: "ProfileName",
                table: "Pomodoros");
        }
    }
}

```

`\\?\C:\Dev\Projects\YAPA-2-modern\YAPA\Migrations\20171016181624_profile name.Designer.cs`:

```cs
﻿using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using YAPA.WPF;

namespace YAPA.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20171016181624_profile name")]
    partial class profilename
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
            modelBuilder
                .HasAnnotation("ProductVersion", "1.1.0-rtm-22752");

            modelBuilder.Entity("YAPA.Shared.Contracts.PomodoroEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Count");

                    b.Property<DateTime>("DateTime");

                    b.Property<int>("DurationMin");

                    b.Property<string>("ProfileName");

                    b.HasKey("Id");

                    b.ToTable("Pomodoros");
                });
        }
    }
}

```

`\\?\C:\Dev\Projects\YAPA-2-modern\YAPA\Migrations\DatabaseContextModelSnapshot.cs`:

```cs
﻿using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using YAPA.WPF;

namespace YAPA.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    partial class DatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
            modelBuilder
                .HasAnnotation("ProductVersion", "1.1.0-rtm-22752");

            modelBuilder.Entity("YAPA.Shared.Contracts.PomodoroEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Count");

                    b.Property<DateTime>("DateTime");

                    b.Property<int>("DurationMin");

                    b.Property<string>("ProfileName");

                    b.HasKey("Id");

                    b.ToTable("Pomodoros");
                });
        }
    }
}

```

`\\?\C:\Dev\Projects\YAPA-2-modern\YAPA\NLog.config`:

```config
<?xml version="1.0" encoding="utf-8" ?>
<nlog xmlns="http://www.nlog-project.org/schemas/NLog.xsd"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xsi:schemaLocation="http://www.nlog-project.org/schemas/NLog.xsd NLog.xsd"
      autoReload="true"
      throwExceptions="false"
      internalLogLevel="Off" internalLogFile="c:\temp\nlog-internal.log">

  <!-- optional, add some variables
  https://github.com/nlog/NLog/wiki/Configuration-file#variables
  -->
  <variable name="myvar" value="myvalue"/>

  <!--
  See https://github.com/nlog/nlog/wiki/Configuration-file
  for information on customizing logging rules and outputs.
   -->
  <targets>

    <!--
    add your targets here
    See https://github.com/nlog/NLog/wiki/Targets for possible targets.
    See https://github.com/nlog/NLog/wiki/Layout-Renderers for the possible layout renderers.
    -->

    <!--
    Write events to a file with the date in the filename.
    <target xsi:type="File" name="f" fileName="${basedir}/logs/${shortdate}.log"
            layout="${longdate} ${uppercase:${level}} ${message}" />
    -->

    <target xsi:type="File" name="f" fileName="${specialfolder:folder=LocalApplicationData}\YAPA2\Logs\log.log"
         layout="${longdate} ${uppercase:${level}} ${message}  ${exception:format=tostring}"
         archiveFileName="${specialfolder:folder=LocalApplicationData}\YAPA2\Logs\log.{#}.txt"
         archiveEvery="Day"
         archiveDateFormat="yyyy-MM-dd"
         archiveNumbering="Rolling"
         maxArchiveFiles="7" />
  </targets>

  <rules>
    <!-- add your logging rules here -->
 
    <!--
    Write all events with minimal level of Debug (So Debug, Info, Warn, Error and Fatal, but not Trace)  to "f"
    <logger name="*" minlevel="Debug" writeTo="f" />
    -->
    <logger name="*" minlevel="Debug" writeTo="f" />
  </rules>
</nlog>

```

`\\?\C:\Dev\Projects\YAPA-2-modern\YAPA\NLog.xsd`:

```xsd
﻿<?xml version="1.0" encoding="utf-8"?>
<xs:schema id="NLog" targetNamespace="http://www.nlog-project.org/schemas/NLog.xsd" elementFormDefault="qualified" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns="http://www.nlog-project.org/schemas/NLog.xsd">
  <xs:element name="nlog" type="NLogConfiguration" />
  <xs:complexType name="NLogConfiguration">
    <xs:choice minOccurs="0" maxOccurs="unbounded">
      <xs:element name="extensions" type="NLogExtensions" />
      <xs:element name="include" type="NLogInclude" />
      <xs:element name="variable" type="NLogVariable" />
      <xs:element name="targets" type="NLogTargets" />
      <xs:element name="rules" type="NLogRules" />
      <xs:element name="time" type="TimeSource" />
    </xs:choice>
    <xs:attribute name="autoReload" type="xs:boolean">
      <xs:annotation>
        <xs:documentation>Watch config file for changes and reload automatically.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="internalLogToConsole" type="xs:boolean">
      <xs:annotation>
        <xs:documentation>Print internal NLog messages to the console. Default value is: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="internalLogToConsoleError" type="xs:boolean">
      <xs:annotation>
        <xs:documentation>Print internal NLog messages to the console error output. Default value is: false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="internalLogFile" type="xs:string">
      <xs:annotation>
        <xs:documentation>Write internal NLog messages to the specified file.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="internalLogLevel" type="NLogLevel">
      <xs:annotation>
        <xs:documentation>Log level threshold for internal log messages. Default value is: Info.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="globalThreshold" type="NLogLevel">
      <xs:annotation>
        <xs:documentation>Global log level threshold for application log messages. Messages below this level won't be logged..</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="throwExceptions" type="xs:boolean">
      <xs:annotation>
        <xs:documentation>Throw an exception when there is an internal error. Default value is: false.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="throwConfigExceptions" type="xs:boolean">
      <xs:annotation>
        <xs:documentation>Throw an exception when there is a configuration error. If not set, determined by throwExceptions.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="keepVariablesOnReload" type="xs:boolean">
      <xs:annotation>
        <xs:documentation>Gets or sets a value indicating whether Variables should be kept on configuration reload. Default value is: false.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="internalLogToTrace" type="xs:boolean">
      <xs:annotation>
        <xs:documentation>Write internal NLog messages to the System.Diagnostics.Trace. Default value is: false.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="internalLogIncludeTimestamp" type="xs:boolean">
      <xs:annotation>
        <xs:documentation>Write timestamps for internal NLog messages. Default value is: true.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="useInvariantCulture" type="xs:boolean">
      <xs:annotation>
        <xs:documentation>Use InvariantCulture as default culture instead of CurrentCulture.  Default value is: false.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="NLogTargets">
    <xs:choice minOccurs="0" maxOccurs="unbounded">
      <xs:element name="default-wrapper" type="WrapperTargetBase" />
      <xs:element name="default-target-parameters" type="Target" />
      <xs:element name="target" type="Target" />
      <xs:element name="wrapper-target" type="WrapperTargetBase" />
      <xs:element name="compound-target" type="CompoundTargetBase" />
    </xs:choice>
    <xs:attribute name="async" type="xs:boolean">
      <xs:annotation>
        <xs:documentation>Make all targets within this section asynchronous (creates additional threads but the calling thread isn't blocked by any target writes).</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="NLogRules">
    <xs:sequence minOccurs="0" maxOccurs="unbounded">
      <xs:element name="logger" type="NLogLoggerRule" />
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="NLogExtensions">
    <xs:choice minOccurs="0" maxOccurs="unbounded">
      <xs:element name="add" type="NLogExtensionsAdd" />
    </xs:choice>
  </xs:complexType>
  <xs:complexType name="NLogExtensionsAdd">
    <xs:attribute name="prefix" type="xs:string">
      <xs:annotation>
        <xs:documentation>Prefix for targets/layout renderers/filters/conditions loaded from this assembly.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="assemblyFile" type="xs:string">
      <xs:annotation>
        <xs:documentation>Load NLog extensions from the specified file (*.dll)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="assembly" type="xs:string">
      <xs:annotation>
        <xs:documentation>Load NLog extensions from the specified assembly. Assembly name should be fully qualified.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="NLogLoggerRule">
    <xs:choice minOccurs="0" maxOccurs="unbounded">
      <xs:element name="filters" type="NLogFilters" />
    </xs:choice>
    <xs:attribute name="name" use="optional">
      <xs:annotation>
        <xs:documentation>Name of the logger. May include '*' character which acts like a wildcard. Allowed forms are: *, Name, *Name, Name* and *Name*</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="levels" type="NLogLevelList">
      <xs:annotation>
        <xs:documentation>Comma separated list of levels that this rule matches.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="minlevel" type="NLogLevel">
      <xs:annotation>
        <xs:documentation>Minimum level that this rule matches.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="maxlevel" type="NLogLevel">
      <xs:annotation>
        <xs:documentation>Maximum level that this rule matches.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="level" type="NLogLevel">
      <xs:annotation>
        <xs:documentation>Level that this rule matches.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="writeTo" type="NLogTargetIDList">
      <xs:annotation>
        <xs:documentation>Comma separated list of target names.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="final" type="xs:boolean" default="false">
      <xs:annotation>
        <xs:documentation>Ignore further rules if this one matches.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="enabled" type="xs:boolean" default="true">
      <xs:annotation>
        <xs:documentation>Enable or disable logging rule. Disabled rules are ignored.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="NLogFilters">
    <xs:choice minOccurs="0" maxOccurs="unbounded">
      <xs:element name="when" type="when" />
      <xs:element name="whenContains" type="whenContains" />
      <xs:element name="whenEqual" type="whenEqual" />
      <xs:element name="whenNotContains" type="whenNotContains" />
      <xs:element name="whenNotEqual" type="whenNotEqual" />
    </xs:choice>
  </xs:complexType>
  <xs:simpleType name="NLogLevel">
    <xs:restriction base="xs:string">
      <xs:enumeration value="Off" />
      <xs:enumeration value="Trace" />
      <xs:enumeration value="Debug" />
      <xs:enumeration value="Info" />
      <xs:enumeration value="Warn" />
      <xs:enumeration value="Error" />
      <xs:enumeration value="Fatal" />
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="LineEndingMode">
    <xs:restriction base="xs:string">
      <xs:enumeration value="Default" />
      <xs:enumeration value="CRLF" />
      <xs:enumeration value="CR" />
      <xs:enumeration value="LF" />
      <xs:enumeration value="None" />
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="NLogLevelList">
    <xs:restriction base="xs:string">
      <xs:pattern value="(|Trace|Debug|Info|Warn|Error|Fatal)(,(Trace|Debug|Info|Warn|Error|Fatal))*" />
    </xs:restriction>
  </xs:simpleType>
  <xs:complexType name="NLogInclude">
    <xs:attribute name="file" type="SimpleLayoutAttribute" use="required">
      <xs:annotation>
        <xs:documentation>Name of the file to be included. You could use * wildcard. The name is relative to the name of the current config file.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ignoreErrors" type="xs:boolean" use="optional" default="false">
      <xs:annotation>
        <xs:documentation>Ignore any errors in the include file.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="NLogVariable">
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>Variable name.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="value" type="SimpleLayoutAttribute" use="required">
      <xs:annotation>
        <xs:documentation>Variable value.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:simpleType name="NLogTargetIDList">
    <xs:restriction base="xs:string">
      <xs:pattern value="(|([a-zA-Z][a-zA-Z0-9_\-]*))(,([a-zA-Z][a-zA-Z0-9_\-]*))*" />
    </xs:restriction>
  </xs:simpleType>
  <xs:complexType name="Target" abstract="true"></xs:complexType>
  <xs:complexType name="TargetRef">
    <xs:attribute name="name" type="xs:string" use="required" />
  </xs:complexType>
  <xs:complexType name="WrapperTargetBase" abstract="true">
    <xs:complexContent>
      <xs:extension base="Target">
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:element name="target" type="Target" minOccurs="1" maxOccurs="1" />
          <xs:element name="wrapper-target" type="WrapperTargetBase" minOccurs="1" maxOccurs="1" />
          <xs:element name="compound-target" type="CompoundTargetBase" minOccurs="1" maxOccurs="1" />
          <xs:element name="target-ref" type="TargetRef" minOccurs="1" maxOccurs="1" />
          <xs:element name="wrapper-target-ref" type="TargetRef" minOccurs="1" maxOccurs="1" />
          <xs:element name="compound-target-ref" type="TargetRef" minOccurs="1" maxOccurs="1" />
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="CompoundTargetBase" abstract="true">
    <xs:complexContent>
      <xs:extension base="Target">
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:element name="target" type="Target" minOccurs="1" maxOccurs="unbounded" />
          <xs:element name="wrapper-target" type="WrapperTargetBase" minOccurs="1" maxOccurs="1" />
          <xs:element name="compound-target" type="CompoundTargetBase" minOccurs="1" maxOccurs="1" />
          <xs:element name="target-ref" type="TargetRef" minOccurs="1" maxOccurs="1" />
          <xs:element name="wrapper-target-ref" type="TargetRef" minOccurs="1" maxOccurs="1" />
          <xs:element name="compound-target-ref" type="TargetRef" minOccurs="1" maxOccurs="1" />
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="Filter" abstract="true"></xs:complexType>
  <xs:complexType name="TimeSource" abstract="true"></xs:complexType>
  <xs:simpleType name="SimpleLayoutAttribute">
    <xs:restriction base="xs:string">
      <xs:pattern value=".*" />
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="Condition">
    <xs:restriction base="xs:string">
      <xs:minLength value="1" />
    </xs:restriction>
  </xs:simpleType>
  <xs:complexType name="AsyncWrapper">
    <xs:complexContent>
      <xs:extension base="WrapperTargetBase">
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:element name="name" minOccurs="0" maxOccurs="1" type="xs:string" />
          <xs:element name="batchSize" minOccurs="0" maxOccurs="1" type="xs:integer" />
          <xs:element name="fullBatchSizeWriteLimit" minOccurs="0" maxOccurs="1" type="xs:integer" />
          <xs:element name="overflowAction" minOccurs="0" maxOccurs="1" type="NLog.Targets.Wrappers.AsyncTargetWrapperOverflowAction" />
          <xs:element name="queueLimit" minOccurs="0" maxOccurs="1" type="xs:integer" />
          <xs:element name="timeToSleepBetweenBatches" minOccurs="0" maxOccurs="1" type="xs:integer" />
          <xs:element name="optimizeBufferReuse" minOccurs="0" maxOccurs="1" type="xs:boolean" />
        </xs:choice>
        <xs:attribute name="name" type="xs:string">
          <xs:annotation>
            <xs:documentation>Name of the target.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="batchSize" type="xs:integer">
          <xs:annotation>
            <xs:documentation>Number of log events that should be processed in a batch by the lazy writer thread.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="fullBatchSizeWriteLimit" type="xs:integer">
          <xs:annotation>
            <xs:documentation>Limit of full s to write before yielding into  Performance is better when writing many small batches, than writing a single large batch</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="overflowAction" type="NLog.Targets.Wrappers.AsyncTargetWrapperOverflowAction">
          <xs:annotation>
            <xs:documentation>Action to be taken when the lazy writer thread request queue count exceeds the set limit.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="queueLimit" type="xs:integer">
          <xs:annotation>
            <xs:documentation>Limit on the number of requests in the lazy writer thread request queue.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="timeToSleepBetweenBatches" type="xs:integer">
          <xs:annotation>
            <xs:documentation>Time in milliseconds to sleep between batches.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="optimizeBufferReuse" type="xs:boolean">
          <xs:annotation>
            <xs:documentation>Target supports reuse of internal buffers, and doesn't have to constantly allocate new buffers Required for legacy NLog-targets, that expects buffers to remain stable after Write-method exit</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:simpleType name="NLog.Targets.Wrappers.AsyncTargetWrapperOverflowAction">
    <xs:restriction base="xs:string">
      <xs:enumeration value="Grow" />
      <xs:enumeration value="Discard" />
      <xs:enumeration value="Block" />
    </xs:restriction>
  </xs:simpleType>
  <xs:complexType name="AutoFlushWrapper">
    <xs:complexContent>
      <xs:extension base="WrapperTargetBase">
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:element name="name" minOccurs="0" maxOccurs="1" type="xs:string" />
          <xs:element name="asyncFlush" minOccurs="0" maxOccurs="1" type="xs:boolean" />
          <xs:element name="condition" minOccurs="0" maxOccurs="1" type="Condition" />
          <xs:element name="optimizeBufferReuse" minOccurs="0" maxOccurs="1" type="xs:boolean" />
        </xs:choice>
        <xs:attribute name="name" type="xs:string">
          <xs:annotation>
            <xs:documentation>Name of the target.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="asyncFlush" type="xs:boolean">
          <xs:annotation>
            <xs:documentation>Delay the flush until the LogEvent has been confirmed as written</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="condition" type="Condition">
          <xs:annotation>
            <xs:documentation>Condition expression. Log events who meet this condition will cause a flush on the wrapped target.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="optimizeBufferReuse" type="xs:boolean">
          <xs:annotation>
            <xs:documentation>Target supports reuse of internal buffers, and doesn't have to constantly allocate new buffers Required for legacy NLog-targets, that expects buffers to remain stable after Write-method exit</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="BufferingWrapper">
    <xs:complexContent>
      <xs:extension base="WrapperTargetBase">
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:element name="name" minOccurs="0" maxOccurs="1" type="xs:string" />
          <xs:element name="bufferSize" minOccurs="0" maxOccurs="1" type="xs:integer" />
          <xs:element name="flushTimeout" minOccurs="0" maxOccurs="1" type="xs:integer" />
          <xs:element name="slidingTimeout" minOccurs="0" maxOccurs="1" type="xs:boolean" />
          <xs:element name="optimizeBufferReuse" minOccurs="0" maxOccurs="1" type="xs:boolean" />
        </xs:choice>
        <xs:attribute name="name" type="xs:string">
          <xs:annotation>
            <xs:documentation>Name of the target.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="bufferSize" type="xs:integer">
          <xs:annotation>
            <xs:documentation>Number of log events to be buffered.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="flushTimeout" type="xs:integer">
          <xs:annotation>
            <xs:documentation>Timeout (in milliseconds) after which the contents of buffer will be flushed if there's no write in the specified period of time. Use -1 to disable timed flushes.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="slidingTimeout" type="xs:boolean">
          <xs:annotation>
            <xs:documentation>Indicates whether to use sliding timeout.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="optimizeBufferReuse" type="xs:boolean">
          <xs:annotation>
            <xs:documentation>Target supports reuse of internal buffers, and doesn't have to constantly allocate new buffers Required for legacy NLog-targets, that expects buffers to remain stable after Write-method exit</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="Chainsaw">
    <xs:complexContent>
      <xs:extension base="Target">
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:element name="name" minOccurs="0" maxOccurs="1" type="xs:string" />
          <xs:element name="encoding" minOccurs="0" maxOccurs="1" type="xs:string" />
          <xs:element name="layout" minOccurs="0" maxOccurs="1" type="Layout" />
          <xs:element name="lineEnding" minOccurs="0" maxOccurs="1" type="LineEndingMode" />
          <xs:element name="maxMessageSize" minOccurs="0" maxOccurs="1" type="xs:integer" />
          <xs:element name="newLine" minOccurs="0" maxOccurs="1" type="xs:boolean" />
          <xs:element name="onConnectionOverflow" minOccurs="0" maxOccurs="1" type="NLog.Targets.NetworkTargetConnectionsOverflowAction" />
          <xs:element name="onOverflow" minOccurs="0" maxOccurs="1" type="NLog.Targets.NetworkTargetOverflowAction" />
          <xs:element name="maxConnections" minOccurs="0" maxOccurs="1" type="xs:integer" />
          <xs:element name="keepConnection" minOccurs="0" maxOccurs="1" type="xs:boolean" />
          <xs:element name="connectionCacheSize" minOccurs="0" maxOccurs="1" type="xs:integer" />
          <xs:element name="address" minOccurs="0" maxOccurs="1" type="Layout" />
          <xs:element name="maxQueueSize" minOccurs="0" maxOccurs="1" type="xs:integer" />
          <xs:element name="parameter" minOccurs="0" maxOccurs="unbounded" type="NLog.Targets.NLogViewerParameterInfo" />
          <xs:element name="includeNdc" minOccurs="0" maxOccurs="1" type="xs:boolean" />
          <xs:element name="includeSourceInfo" minOccurs="0" maxOccurs="1" type="xs:boolean" />
          <xs:element name="includeNLogData" minOccurs="0" maxOccurs="1" type="xs:boolean" />
          <xs:element name="includeMdc" minOccurs="0" maxOccurs="1" type="xs:boolean" />
          <xs:element name="includeCallSite" minOccurs="0" maxOccurs="1" type="xs:boolean" />
          <xs:element name="appInfo" minOccurs="0" maxOccurs="1" type="xs:string" />
          <xs:element name="ndcItemSeparator" minOccurs="0" maxOccurs="1" type="xs:string" />
          <xs:element name="includeMdlc" minOccurs="0" maxOccurs="1" type="xs:boolean" />
          <xs:element name="optimizeBufferReuse" minOccurs="0" maxOccurs="1" type="xs:boolean" />
        </xs:choice>
        <xs:attribute name="name" type="xs:string">
          <xs:annotation>
            <xs:documentation>Name of the target.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="encoding" type="xs:string">
          <xs:annotation>
            <xs:documentation>Encoding to be used.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="layout" type="SimpleLayoutAttribute">
          <xs:annotation>
            <xs:documentation>Instance of  that is used to format log messages.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="lineEnding" type="LineEndingMode">
          <xs:annotation>
            <xs:documentation>End of line value if a newline is appended at the end of log message .</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="maxMessageSize" type="xs:integer">
          <xs:annotation>
            <xs:documentation>Maximum message size in bytes.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="newLine" type="xs:boolean">
          <xs:annotation>
            <xs:documentation>Indicates whether to append newline at the end of log message.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="onConnectionOverflow" type="NLog.Targets.NetworkTargetConnectionsOverflowAction">
          <xs:annotation>
            <xs:documentation>Action that should be taken if the will be more connections than .</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="onOverflow" type="NLog.Targets.NetworkTargetOverflowAction">
          <xs:annotation>
            <xs:documentation>Action that should be taken if the message is larger than maxMessageSize.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="maxConnections" type="xs:integer">
          <xs:annotation>
            <xs:documentation>Maximum current connections. 0 = no maximum.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="keepConnection" type="xs:boolean">
          <xs:annotation>
            <xs:documentation>Indicates whether to keep connection open whenever possible.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="connectionCacheSize" type="xs:integer">
          <xs:annotation>
            <xs:documentation>Size of the connection cache (number of connections which are kept alive).</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="address" type="SimpleLayoutAttribute">
          <xs:annotation>
            <xs:documentation>Network address.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="maxQueueSize" type="xs:integer">
          <xs:annotation>
            <xs:documentation>Maximum queue size.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="includeNdc" type="xs:boolean">
          <xs:annotation>
            <xs:documentation>Indicates whether to include  stack contents.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="includeSourceInfo" type="xs:boolean">
          <xs:annotation>
            <xs:documentation>Indicates whether to include source info (file name and line number) in the information sent over the network.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="includeNLogData" type="xs:boolean">
          <xs:annotation>
            <xs:documentation>Indicates whether to include NLog-specific extensions to log4j schema.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="includeMdc" type="xs:boolean">
          <xs:annotation>
            <xs:documentation>Indicates whether to include  dictionary contents.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="includeCallSite" type="xs:boolean">
          <xs:annotation>
            <xs:documentation>Indicates whether to include call site (class and method name) in the information sent over the network.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="appInfo" type="xs:string">
          <xs:annotation>
            <xs:documentation>AppInfo field. By default it's the friendly name of the current AppDomain.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="ndcItemSeparator" type="xs:string">
          <xs:annotation>
            <xs:documentation>NDC item separator.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="includeMdlc" type="xs:boolean">
          <xs:annotation>
            <xs:documentation>Indicates whether to include  dictionary contents.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="optimizeBufferReuse" type="xs:boolean">
          <xs:annotation>
            <xs:documentation>Target supports reuse of internal buffers, and doesn't have to constantly allocate new buffers Required for legacy NLog-targets, that expects buffers to remain stable after Write-method exit</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:simpleType name="NLog.Targets.NetworkTargetConnectionsOverflowAction">
    <xs:restriction base="xs:string">
      <xs:enumeration value="AllowNewConnnection" />
      <xs:enumeration value="DiscardMessage" />
      <xs:enumeration value="Block" />
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="NLog.Targets.NetworkTargetOverflowAction">
    <xs:restriction base="xs:string">
      <xs:enumeration value="Error" />
      <xs:enumeration value="Split" />
      <xs:enumeration value="Discard" />
    </xs:restriction>
  </xs:simpleType>
  <xs:complexType name="NLog.Targets.NLogViewerParameterInfo">
    <xs:choice minOccurs="0" maxOccurs="unbounded">
      <xs:element name="layout" minOccurs="0" maxOccurs="1" type="Layout" />
      <xs:element name="name" minOccurs="0" maxOccurs="1" type="xs:string" />
    </xs:choice>
    <xs:attribute name="layout" type="SimpleLayoutAttribute">
      <xs:annotation>
        <xs:documentation>Layout that should be use to calcuate the value for the parameter.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string">
      <xs:annotation>
        <xs:documentation>Viewer parameter name.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="ColoredConsole">
    <xs:complexContent>
      <xs:extension base="Target">
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:element name="name" minOccurs="0" maxOccurs="1" type="xs:string" />
          <xs:element name="layout" minOccurs="0" maxOccurs="1" type="Layout" />
          <xs:element name="header" minOccurs="0" maxOccurs="1" type="Layout" />
          <xs:element name="footer" minOccurs="0" maxOccurs="1" type="Layout" />
          <xs:element name="useDefaultRowHighlightingRules" minOccurs="0" maxOccurs="1" type="xs:boolean" />
          <xs:element name="highlight-row" minOccurs="0" maxOccurs="unbounded" type="NLog.Targets.ConsoleRowHighlightingRule" />
          <xs:element name="highlight-word" minOccurs="0" maxOccurs="unbounded" type="NLog.Targets.ConsoleWordHighlightingRule" />
          <xs:element name="detectConsoleAvailable" minOccurs="0" maxOccurs="1" type="xs:boolean" />
          <xs:element name="encoding" minOccurs="0" maxOccurs="1" type="xs:string" />
          <xs:element name="errorStream" minOccurs="0" maxOccurs="1" type="xs:boolean" />
          <xs:element name="optimizeBufferReuse" minOccurs="0" maxOccurs="1" type="xs:boolean" />
        </xs:choice>
        <xs:attribute name="name" type="xs:string">
          <xs:annotation>
            <xs:documentation>Name of the target.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="layout" type="SimpleLayoutAttribute">
          <xs:annotation>
            <xs:documentation>Text to be rendered.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="header" type="SimpleLayoutAttribute">
          <xs:annotation>
            <xs:documentation>Header.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="footer" type="SimpleLayoutAttribute">
          <xs:annotation>
            <xs:documentation>Footer.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="useDefaultRowHighlightingRules" type="xs:boolean">
          <xs:annotation>
            <xs:documentation>Indicates whether to use default row highlighting rules.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="detectConsoleAvailable" type="xs:boolean">
          <xs:annotation>
            <xs:documentation>Indicates whether to auto-check if the console is available. - Disables console writing if Environment.UserInteractive = False (Windows Service) - Disables console writing if Console Standard Input is not available (Non-Console-App)</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="encoding" type="xs:string">
          <xs:annotation>
            <xs:documentation>The encoding for writing messages to the .</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="errorStream" type="xs:boolean">
          <xs:annotation>
            <xs:documentation>Indicates whether the error stream (stderr) should be used instead of the output stream (stdout).</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="optimizeBufferReuse" type="xs:boolean">
          <xs:annotation>
            <xs:documentation>Target supports reuse of internal buffers, and doesn't have to constantly allocate new buffers Required for legacy NLog-targets, that expects buffers to remain stable after Write-method exit</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:simpleType name="NLog.Targets.ConsoleOutputColor">
    <xs:restriction base="xs:string">
      <xs:enumeration value="Black" />
      <xs:enumeration value="DarkBlue" />
      <xs:enumeration value="DarkGreen" />
      <xs:enumeration value="DarkCyan" />
      <xs:enumeration value="DarkRed" />
      <xs:enumeration value="DarkMagenta" />
      <xs:enumeration value="DarkYellow" />
      <xs:enumeration value="Gray" />
      <xs:enumeration value="DarkGray" />
      <xs:enumeration value="Blue" />
      <xs:enumeration value="Green" />
      <xs:enumeration value="Cyan" />
      <xs:enumeration value="Red" />
      <xs:enumeration value="Magenta" />
      <xs:enumeration value="Yellow" />
      <xs:enumeration value="White" />
      <xs:enumeration value="NoChange" />
    </xs:restriction>
  </xs:simpleType>
  <xs:complexType name="NLog.Targets.ConsoleRowHighlightingRule">
    <xs:choice minOccurs="0" maxOccurs="unbounded">
      <xs:element name="condition" minOccurs="0" maxOccurs="1" type="Condition" />
      <xs:element name="backgroundColor" minOccurs="0" maxOccurs="1" type="NLog.Targets.ConsoleOutputColor" />
      <xs:element name="foregroundColor" minOccurs="0" maxOccurs="1" type="NLog.Targets.ConsoleOutputColor" />
    </xs:choice>
    <xs:attribute name="condition" type="Condition">
      <xs:annotation>
        <xs:documentation>Condition that must be met in order to set the specified foreground and background color.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="backgroundColor" type="NLog.Targets.ConsoleOutputColor">
      <xs:annotation>
        <xs:documentation>Background color.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="foregroundColor" type="NLog.Targets.ConsoleOutputColor">
      <xs:annotation>
        <xs:documentation>Foreground color.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="NLog.Targets.ConsoleWordHighlightingRule">
    <xs:choice minOccurs="0" maxOccurs="unbounded">
      <xs:element name="ignoreCase" minOccurs="0" maxOccurs="1" type="xs:boolean" />
      <xs:element name="regex" minOccurs="0" maxOccurs="1" type="xs:string" />
      <xs:element name="text" minOccurs="0" maxOccurs="1" type="xs:string" />
      <xs:element name="wholeWords" minOccurs="0" maxOccurs="1" type="xs:boolean" />
      <xs:element name="compileRegex" minOccurs="0" maxOccurs="1" type="xs:boolean" />
      <xs:element name="backgroundColor" minOccurs="0" maxOccurs="1" type="NLog.Targets.ConsoleOutputColor" />
      <xs:element name="foregroundColor" minOccurs="0" maxOccurs="1" type="NLog.Targets.ConsoleOutputColor" />
    </xs:choice>
    <xs:attribute name="ignoreCase" type="xs:boolean">
      <xs:annotation>
        <xs:documentation>Indicates whether to ignore case when comparing texts.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="regex" type="xs:string">
      <xs:annotation>
        <xs:documentation>Regular expression to be matched. You must specify either text or regex.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="text" type="xs:string">
      <xs:annotation>
        <xs:documentation>Text to be matched. You must specify either text or regex.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="wholeWords" type="xs:boolean">
      <xs:annotation>
        <xs:documentation>Indicates whether to match whole words only.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="compileRegex" type="xs:boolean">
      <xs:annotation>
        <xs:documentation>Compile the ? This can improve the performance, but at the costs of more memory usage. If false, the Regex Cache is used.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="backgroundColor" type="NLog.Targets.ConsoleOutputColor">
      <xs:annotation>
        <xs:documentation>Background color.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="foregroundColor" type="NLog.Targets.ConsoleOutputColor">
      <xs:annotation>
        <xs:documentation>Foreground color.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="Console">
    <xs:complexContent>
      <xs:extension base="Target">
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:element name="name" minOccurs="0" maxOccurs="1" type="xs:string" />
          <xs:element name="layout" minOccurs="0" maxOccurs="1" type="Layout" />
          <xs:element name="header" minOccurs="0" maxOccurs="1" type="Layout" />
          <xs:element name="footer" minOccurs="0" maxOccurs="1" type="Layout" />
          <xs:element name="error" minOccurs="0" maxOccurs="1" type="xs:boolean" />
          <xs:element name="detectConsoleAvailable" minOccurs="0" maxOccurs="1" type="xs:boolean" />
          <xs:element name="encoding" minOccurs="0" maxOccurs="1" type="xs:string" />
          <xs:element name="optimizeBufferReuse" minOccurs="0" maxOccurs="1" type="xs:boolean" />
        </xs:choice>
        <xs:attribute name="name" type="xs:string">
          <xs:annotation>
            <xs:documentation>Name of the target.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="layout" type="SimpleLayoutAttribute">
          <xs:annotation>
            <xs:documentation>Text to be rendered.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="header" type="SimpleLayoutAttribute">
          <xs:annotation>
            <xs:documentation>Header.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="footer" type="SimpleLayoutAttribute">
          <xs:annotation>
            <xs:documentation>Footer.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="error" type="xs:boolean">
          <xs:annotation>
            <xs:documentation>Indicates whether to send the log messages to the standard error instead of the standard output.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="detectConsoleAvailable" type="xs:boolean">
          <xs:annotation>
            <xs:documentation>Indicates whether to auto-check if the console is available - Disables console writing if Environment.UserInteractive = False (Windows Service) - Disables console writing if Console Standard Input is not available (Non-Console-App)</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="encoding" type="xs:string">
          <xs:annotation>
            <xs:documentation>The encoding for writing messages to the .</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="optimizeBufferReuse" type="xs:boolean">
          <xs:annotation>
            <xs:documentation>Target supports reuse of internal buffers, and doesn't have to constantly allocate new buffers Required for legacy NLog-targets, that expects buffers to remain stable after Write-method exit</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="Database">
    <xs:complexContent>
      <xs:extension base="Target">
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:element name="name" minOccurs="0" maxOccurs="1" type="xs:string" />
          <xs:element name="useTransactions" minOccurs="0" maxOccurs="1" type="xs:boolean" />
          <xs:element name="dbUserName" minOccurs="0" maxOccurs="1" type="Layout" />
          <xs:element name="dbProvider" minOccurs="0" maxOccurs="1" type="xs:string" />
          <xs:element name="dbPassword" minOccurs="0" maxOccurs="1" type="Layout" />
          <xs:element name="keepConnection" minOccurs="0" maxOccurs="1" type="xs:boolean" />
          <xs:element name="dbDatabase" minOccurs="0" maxOccurs="1" type="Layout" />
          <xs:element name="connectionStringName" minOccurs="0" maxOccurs="1" type="xs:string" />
          <xs:element name="connectionString" minOccurs="0" maxOccurs="1" type="Layout" />
          <xs:element name="dbHost" minOccurs="0" maxOccurs="1" type="Layout" />
          <xs:element name="installConnectionString" minOccurs="0" maxOccurs="1" type="Layout" />
          <xs:element name="install-command" minOccurs="0" maxOccurs="unbounded" type="NLog.Targets.DatabaseCommandInfo" />
          <xs:element name="uninstall-command" minOccurs="0" maxOccurs="unbounded" type="NLog.Targets.DatabaseCommandInfo" />
          <xs:element name="optimizeBufferReuse" minOccurs="0" maxOccurs="1" type="xs:boolean" />
          <xs:element name="parameter" minOccurs="0" maxOccurs="unbounded" type="NLog.Targets.DatabaseParameterInfo" />
          <xs:element name="commandText" minOccurs="0" maxOccurs="1" type="Layout" />
          <xs:element name="commandType" minOccurs="0" maxOccurs="1" type="System.Data.CommandType" />
        </xs:choice>
        <xs:attribute name="name" type="xs:string">
          <xs:annotation>
            <xs:documentation>Name of the target.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="useTransactions" type="xs:boolean">
          <xs:annotation>
            <xs:documentation>Obsolete - value will be ignored! The logging code always runs outside of transaction. Gets or sets a value indicating whether to use database transactions. Some data providers require this.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="dbUserName" type="SimpleLayoutAttribute">
          <xs:annotation>
            <xs:documentation>Database user name. If the ConnectionString is not provided this value will be used to construct the "User ID=" part of the connection string.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="dbProvider" type="xs:string">
          <xs:annotation>
            <xs:documentation>Name of the database provider.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="dbPassword" type="SimpleLayoutAttribute">
          <xs:annotation>
            <xs:documentation>Database password. If the ConnectionString is not provided this value will be used to construct the "Password=" part of the connection string.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="keepConnection" type="xs:boolean">
          <xs:annotation>
            <xs:documentation>Indicates whether to keep the database connection open between the log events.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="dbDatabase" type="SimpleLayoutAttribute">
          <xs:annotation>
            <xs:documentation>Database name. If the ConnectionString is not provided this value will be used to construct the "Database=" part of the connection string.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="connectionStringName" type="xs:string">
          <xs:annotation>
            <xs:documentation>Name of the connection string (as specified in &lt;connectionStrings&gt; configuration section.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="connectionString" type="SimpleLayoutAttribute">
          <xs:annotation>
            <xs:documentation>Connection string. When provided, it overrides the values specified in DBHost, DBUserName, DBPassword, DBDatabase.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="dbHost" type="SimpleLayoutAttribute">
          <xs:annotation>
            <xs:documentation>Database host name. If the ConnectionString is not provided this value will be used to construct the "Server=" part of the connection string.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="installConnectionString" type="SimpleLayoutAttribute">
          <xs:annotation>
            <xs:documentation>Connection string using for installation and uninstallation. If not provided, regular ConnectionString is being used.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="optimizeBufferReuse" type="xs:boolean">
          <xs:annotation>
            <xs:documentation>Target supports reuse of internal buffers, and doesn't have to constantly allocate new buffers Required for legacy NLog-targets, that expects buffers to remain stable after Write-method exit</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="commandText" type="SimpleLayoutAttribute">
          <xs:annotation>
            <xs:documentation>Text of the SQL command to be run on each log level.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="commandType" type="System.Data.CommandType">
          <xs:annotation>
            <xs:documentation>Type of the SQL command to be run on each log level.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:simpleType name="System.Data.CommandType">
    <xs:restriction base="xs:string">
      <xs:enumeration value="Text" />
      <xs:enumeration value="StoredProcedure" />
      <xs:enumeration value="TableDirect" />
    </xs:restriction>
  </xs:simpleType>
  <xs:complexType name="NLog.Targets.DatabaseCommandInfo">
    <xs:choice minOccurs="0" maxOccurs="unbounded">
      <xs:element name="commandType" minOccurs="0" maxOccurs="1" type="System.Data.CommandType" />
      <xs:element name="connectionString" minOccurs="0" maxOccurs="1" type="Layout" />
      <xs:element name="ignoreFailures" minOccurs="0" maxOccurs="1" type="xs:boolean" />
      <xs:element name="parameter" minOccurs="0" maxOccurs="unbounded" type="NLog.Targets.DatabaseParameterInfo" />
      <xs:element name="text" minOccurs="0" maxOccurs="1" type="Layout" />
    </xs:choice>
    <xs:attribute name="commandType" type="System.Data.CommandType">
      <xs:annotation>
        <xs:documentation>Type of the command.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="connectionString" type="SimpleLayoutAttribute">
      <xs:annotation>
        <xs:documentation>Connection string to run the command against. If not provided, connection string from the target is used.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ignoreFailures" type="xs:boolean">
      <xs:annotation>
        <xs:documentation>Indicates whether to ignore failures.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="text" type="SimpleLayoutAttribute">
      <xs:annotation>
        <xs:documentation>Command text.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="NLog.Targets.DatabaseParameterInfo">
    <xs:choice minOccurs="0" maxOccurs="unbounded">
      <xs:element name="layout" minOccurs="0" maxOccurs="1" type="Layout" />
      <xs:element name="name" minOccurs="0" maxOccurs="1" type="xs:string" />
      <xs:element name="precision" minOccurs="0" maxOccurs="1" type="xs:byte" />
      <xs:element name="scale" minOccurs="0" maxOccurs="1" type="xs:byte" />
      <xs:element name="size" minOccurs="0" maxOccurs="1" type="xs:integer" />
    </xs:choice>
    <xs:attribute name="layout" type="SimpleLayoutAttribute">
      <xs:annotation>
        <xs:documentation>Layout that should be use to calcuate the value for the parameter.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string">
      <xs:annotation>
        <xs:documentation>Database parameter name.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="precision" type="xs:byte">
      <xs:annotation>
        <xs:documentation>Database parameter precision.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="scale" type="xs:byte">
      <xs:annotation>
        <xs:documentation>Database parameter scale.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="size" type="xs:integer">
      <xs:annotation>
        <xs:documentation>Database parameter size.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="Debugger">
    <xs:complexContent>
      <xs:extension base="Target">
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:element name="name" minOccurs="0" maxOccurs="1" type="xs:string" />
          <xs:element name="layout" minOccurs="0" maxOccurs="1" type="Layout" />
          <xs:element name="header" minOccurs="0" maxOccurs="1" type="Layout" />
          <xs:element name="footer" minOccurs="0" maxOccurs="1" type="Layout" />
          <xs:element name="optimizeBufferReuse" minOccurs="0" maxOccurs="1" type="xs:boolean" />
        </xs:choice>
        <xs:attribute name="name" type="xs:string">
          <xs:annotation>
            <xs:documentation>Name of the target.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="layout" type="SimpleLayoutAttribute">
          <xs:annotation>
            <xs:documentation>Text to be rendered.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="header" type="SimpleLayoutAttribute">
          <xs:annotation>
            <xs:documentation>Header.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="footer" type="SimpleLayoutAttribute">
          <xs:annotation>
            <xs:documentation>Footer.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="optimizeBufferReuse" type="xs:boolean">
          <xs:annotation>
            <xs:documentation>Target supports reuse of internal buffers, and doesn't have to constantly allocate new buffers Required for legacy NLog-targets, that expects buffers to remain stable after Write-method exit</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="Debug">
    <xs:complexContent>
      <xs:extension base="Target">
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:element name="name" minOccurs="0" maxOccurs="1" type="xs:string" />
          <xs:element name="layout" minOccurs="0" maxOccurs="1" type="Layout" />
          <xs:element name="optimizeBufferReuse" minOccurs="0" maxOccurs="1" type="xs:boolean" />
        </xs:choice>
        <xs:attribute name="name" type="xs:string">
          <xs:annotation>
            <xs:documentation>Name of the target.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="layout" type="SimpleLayoutAttribute">
          <xs:annotation>
            <xs:documentation>Layout used to format log messages.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="optimizeBufferReuse" type="xs:boolean">
          <xs:annotation>
            <xs:documentation>Target supports reuse of internal buffers, and doesn't have to constantly allocate new buffers Required for legacy NLog-targets, that expects buffers to remain stable after Write-method exit</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="EventLog">
    <xs:complexContent>
      <xs:extension base="Target">
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:element name="name" minOccurs="0" maxOccurs="1" type="xs:string" />
          <xs:element name="layout" minOccurs="0" maxOccurs="1" type="Layout" />
          <xs:element name="category" minOccurs="0" maxOccurs="1" type="Layout" />
          <xs:element name="eventId" minOccurs="0" maxOccurs="1" type="Layout" />
          <xs:element name="log" minOccurs="0" maxOccurs="1" type="xs:string" />
          <xs:element name="machineName" minOccurs="0" maxOccurs="1" type="xs:string" />
          <xs:element name="source" minOccurs="0" maxOccurs="1" type="Layout" />
          <xs:element name="onOverflow" minOccurs="0" maxOccurs="1" type="NLog.Targets.EventLogTargetOverflowAction" />
          <xs:element name="entryType" minOccurs="0" maxOccurs="1" type="Layout" />
          <xs:element name="maxKilobytes" minOccurs="0" maxOccurs="1" type="xs:long" />
          <xs:element name="maxMessageLength" minOccurs="0" maxOccurs="1" type="xs:integer" />
          <xs:element name="optimizeBufferReuse" minOccurs="0" maxOccurs="1" type="xs:boolean" />
        </xs:choice>
        <xs:attribute name="name" type="xs:string">
          <xs:annotation>
            <xs:documentation>Name of the target.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="layout" type="SimpleLayoutAttribute">
          <xs:annotation>
            <xs:documentation>Layout used to format log messages.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="category" type="SimpleLayoutAttribute">
          <xs:annotation>
            <xs:documentation>Layout that renders event Category.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="eventId" type="SimpleLayoutAttribute">
          <xs:annotation>
            <xs:documentation>Layout that renders event ID.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="log" type="xs:string">
          <xs:annotation>
            <xs:documentation>Name of the Event Log to write to. This can be System, Application or any user-defined name.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="machineName" type="xs:string">
          <xs:annotation>
            <xs:documentation>Name of the machine on which Event Log service is running.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="source" type="SimpleLayoutAttribute">
          <xs:annotation>
            <xs:documentation>Value to be used as the event Source.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="onOverflow" type="NLog.Targets.EventLogTargetOverflowAction">
          <xs:annotation>
            <xs:documentation>Action to take if the message is larger than the  option.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="entryType" type="SimpleLayoutAttribute">
          <xs:annotation>
            <xs:documentation>Optional entrytype. When not set, or when not convertable to  then determined by </xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="maxKilobytes" type="xs:long">
          <xs:annotation>
            <xs:documentation>Maximum Event log size in kilobytes. If null, the value won't be set. Default is 512 Kilobytes as specified by Eventlog API</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="maxMessageLength" type="xs:integer">
          <xs:annotation>
            <xs:documentation>Message length limit to write to the Event Log.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="optimizeBufferReuse" type="xs:boolean">
          <xs:annotation>
            <xs:documentation>Target supports reuse of internal buffers, and doesn't have to constantly allocate new buffers Required for legacy NLog-targets, that expects buffers to remain stable after Write-method exit</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:simpleType name="NLog.Targets.EventLogTargetOverflowAction">
    <xs:restriction base="xs:string">
      <xs:enumeration value="Truncate" />
      <xs:enumeration value="Split" />
      <xs:enumeration value="Discard" />
    </xs:restriction>
  </xs:simpleType>
  <xs:complexType name="FallbackGroup">
    <xs:complexContent>
      <xs:extension base="CompoundTargetBase">
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:element name="name" minOccurs="0" maxOccurs="1" type="xs:string" />
          <xs:element name="returnToFirstOnSuccess" minOccurs="0" maxOccurs="1" type="xs:boolean" />
          <xs:element name="optimizeBufferReuse" minOccurs="0" maxOccurs="1" type="xs:boolean" />
        </xs:choice>
        <xs:attribute name="name" type="xs:string">
          <xs:annotation>
            <xs:documentation>Name of the target.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="returnToFirstOnSuccess" type="xs:boolean">
          <xs:annotation>
            <xs:documentation>Indicates whether to return to the first target after any successful write.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="optimizeBufferReuse" type="xs:boolean">
          <xs:annotation>
            <xs:documentation>Target supports reuse of internal buffers, and doesn't have to constantly allocate new buffers Required for legacy NLog-targets, that expects buffers to remain stable after Write-method exit</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="File">
    <xs:complexContent>
      <xs:extension base="Target">
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:element name="name" minOccurs="0" maxOccurs="1" type="xs:string" />
          <xs:element name="layout" minOccurs="0" maxOccurs="1" type="Layout" />
          <xs:element name="header" minOccurs="0" maxOccurs="1" type="Layout" />
          <xs:element name="footer" minOccurs="0" maxOccurs="1" type="Layout" />
          <xs:element name="encoding" minOccurs="0" maxOccurs="1" type="xs:string" />
          <xs:element name="lineEnding" minOccurs="0" maxOccurs="1" type="LineEndingMode" />
          <xs:element name="archiveNumbering" minOccurs="0" maxOccurs="1" type="NLog.Targets.ArchiveNumberingMode" />
          <xs:element name="archiveFileName" minOccurs="0" maxOccurs="1" type="Layout" />
          <xs:element name="archiveEvery" minOccurs="0" maxOccurs="1" type="NLog.Targets.FileArchivePeriod" />
          <xs:element name="archiveAboveSize" minOccurs="0" maxOccurs="1" type="xs:long" />
          <xs:element name="enableArchiveFileCompression" minOccurs="0" maxOccurs="1" type="xs:boolean" />
          <xs:element name="maxArchiveFiles" minOccurs="0" maxOccurs="1" type="xs:integer" />
          <xs:element name="forceManaged" minOccurs="0" maxOccurs="1" type="xs:boolean" />
          <xs:element name="archiveFileKind" minOccurs="0" maxOccurs="1" type="NLog.Targets.FilePathKind" />
          <xs:element name="cleanupFileName" minOccurs="0" maxOccurs="1" type="xs:boolean" />
          <xs:element name="discardAll" minOccurs="0" maxOccurs="1" type="xs:boolean" />
          <xs:element name="fileNameKind" minOccurs="0" maxOccurs="1" type="NLog.Targets.FilePathKind" />
          <xs:element name="forceMutexConcurrentWrites" minOccurs="0" maxOccurs="1" type="xs:boolean" />
          <xs:element name="writeFooterOnArchivingOnly" minOccurs="0" maxOccurs="1" type="xs:boolean" />
          <xs:element name="fileName" minOccurs="0" maxOccurs="1" type="Layout" />
          <xs:element name="archiveDateFormat" minOccurs="0" maxOccurs="1" type="xs:string" />
          <xs:element name="archiveOldFileOnStartup" minOccurs="0" maxOccurs="1" type="xs:boolean" />
          <xs:element name="createDirs" minOccurs="0" maxOccurs="1" type="xs:boolean" />
          <xs:element name="enableFileDelete" minOccurs="0" maxOccurs="1" type="xs:boolean" />
          <xs:element name="fileAttributes" minOccurs="0" maxOccurs="1" type="NLog.Targets.Win32FileAttributes" />
          <xs:element name="deleteOldFileOnStartup" minOccurs="0" maxOccurs="1" type="xs:boolean" />
          <xs:element name="replaceFileContentsOnEachWrite" minOccurs="0" maxOccurs="1" type="xs:boolean" />
          <xs:element name="concurrentWrites" minOccurs="0" maxOccurs="1" type="xs:boolean" />
          <xs:element name="keepFileOpen" minOccurs="0" maxOccurs="1" type="xs:boolean" />
          <xs:element name="maxLogFilenames" minOccurs="0" maxOccurs="1" type="xs:integer" />
          <xs:element name="networkWrites" minOccurs="0" maxOccurs="1" type="xs:boolean" />
          <xs:element name="openFileCacheSize" minOccurs="0" maxOccurs="1" type="xs:integer" />
          <xs:element name="openFileCacheTimeout" minOccurs="0" maxOccurs="1" type="xs:integer" />
          <xs:element name="optimizeBufferReuse" minOccurs="0" maxOccurs="1" type="xs:boolean" />
          <xs:element name="bufferSize" minOccurs="0" maxOccurs="1" type="xs:integer" />
          <xs:element name="autoFlush" minOccurs="0" maxOccurs="1" type="xs:boolean" />
          <xs:element name="concurrentWriteAttemptDelay" minOccurs="0" maxOccurs="1" type="xs:integer" />
          <xs:element name="concurrentWriteAttempts" minOccurs="0" maxOccurs="1" type="xs:integer" />
        </xs:choice>
        <xs:attribute name="name" type="xs:string">
          <xs:annotation>
            <xs:documentation>Name of the target.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="layout" type="SimpleLayoutAttribute">
          <xs:annotation>
            <xs:documentation>Text to be rendered.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="header" type="SimpleLayoutAttribute">
          <xs:annotation>
            <xs:documentation>Header.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="footer" type="SimpleLayoutAttribute">
          <xs:annotation>
            <xs:documentation>Footer.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="encoding" type="xs:string">
          <xs:annotation>
            <xs:documentation>File encoding.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="lineEnding" type="LineEndingMode">
          <xs:annotation>
            <xs:documentation>Line ending mode.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="archiveNumbering" type="NLog.Targets.ArchiveNumberingMode">
          <xs:annotation>
            <xs:documentation>Way file archives are numbered.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="archiveFileName" type="SimpleLayoutAttribute">
          <xs:annotation>
            <xs:documentation>Name of the file to be used for an archive.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="archiveEvery" type="NLog.Targets.FileArchivePeriod">
          <xs:annotation>
            <xs:documentation>Indicates whether to automatically archive log files every time the specified time passes.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="archiveAboveSize" type="xs:long">
          <xs:annotation>
            <xs:documentation>Size in bytes above which log files will be automatically archived. Warning: combining this with  isn't supported. We cannot create multiple archive files, if they should have the same name. Choose: </xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="enableArchiveFileCompression" type="xs:boolean">
          <xs:annotation>
            <xs:documentation>Indicates whether to compress archive files into the zip archive format.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="maxArchiveFiles" type="xs:integer">
          <xs:annotation>
            <xs:documentation>Maximum number of archive files that should be kept.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="forceManaged" type="xs:boolean">
          <xs:annotation>
            <xs:documentation>Gets or set a value indicating whether a managed file stream is forced, instead of using the native implementation.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="archiveFileKind" type="NLog.Targets.FilePathKind">
          <xs:annotation>
            <xs:documentation>Is the  an absolute or relative path?</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="cleanupFileName" type="xs:boolean">
          <xs:annotation>
            <xs:documentation>Cleanup invalid values in a filename, e.g. slashes in a filename. If set to true, this can impact the performance of massive writes. If set to false, nothing gets written when the filename is wrong.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="discardAll" type="xs:boolean">
          <xs:annotation>
            <xs:documentation>Whether or not this target should just discard all data that its asked to write. Mostly used for when testing NLog Stack except final write</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="fileNameKind" type="NLog.Targets.FilePathKind">
          <xs:annotation>
            <xs:documentation>Is the  an absolute or relative path?</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="forceMutexConcurrentWrites" type="xs:boolean">
          <xs:annotation>
            <xs:documentation>Value indicationg whether file creation calls should be synchronized by a system global mutex.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="writeFooterOnArchivingOnly" type="xs:boolean">
          <xs:annotation>
            <xs:documentation>Indicates whether the footer should be written only when the file is archived.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="fileName" type="SimpleLayoutAttribute">
          <xs:annotation>
            <xs:documentation>Name of the file to write to.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="archiveDateFormat" type="xs:string">
          <xs:annotation>
            <xs:documentation>Value specifying the date format to use when archiving files.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="archiveOldFileOnStartup" type="xs:boolean">
          <xs:annotation>
            <xs:documentation>Indicates whether to archive old log file on startup.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="createDirs" type="xs:boolean">
          <xs:annotation>
            <xs:documentation>Indicates whether to create directories if they do not exist.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="enableFileDelete" type="xs:boolean">
          <xs:annotation>
            <xs:documentation>Indicates whether to enable log file(s) to be deleted.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="fileAttributes" type="NLog.Targets.Win32FileAttributes">
          <xs:annotation>
            <xs:documentation>File attributes (Windows only).</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="deleteOldFileOnStartup" type="xs:boolean">
          <xs:annotation>
            <xs:documentation>Indicates whether to delete old log file on startup.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="replaceFileContentsOnEachWrite" type="xs:boolean">
          <xs:annotation>
            <xs:documentation>Indicates whether to replace file contents on each write instead of appending log message at the end.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="concurrentWrites" type="xs:boolean">
          <xs:annotation>
            <xs:documentation>Indicates whether concurrent writes to the log file by multiple processes on the same host.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="keepFileOpen" type="xs:boolean">
          <xs:annotation>
            <xs:documentation>Indicates whether to keep log file open instead of opening and closing it on each logging event.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="maxLogFilenames" type="xs:integer">
          <xs:annotation>
            <xs:documentation>Maximum number of log filenames that should be stored as existing.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="networkWrites" type="xs:boolean">
          <xs:annotation>
            <xs:documentation>Indicates whether concurrent writes to the log file by multiple processes on different network hosts.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="openFileCacheSize" type="xs:integer">
          <xs:annotation>
            <xs:documentation>Number of files to be kept open. Setting this to a higher value may improve performance in a situation where a single File target is writing to many files (such as splitting by level or by logger).</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="openFileCacheTimeout" type="xs:integer">
          <xs:annotation>
            <xs:documentation>Maximum number of seconds that files are kept open. If this number is negative the files are not automatically closed after a period of inactivity.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="optimizeBufferReuse" type="xs:boolean">
          <xs:annotation>
            <xs:documentation>Target supports reuse of internal buffers, and doesn't have to constantly allocate new buffers Required for legacy NLog-targets, that expects buffers to remain stable after Write-method exit</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="bufferSize" type="xs:integer">
          <xs:annotation>
            <xs:documentation>Log file buffer size in bytes.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="autoFlush" type="xs:boolean">
          <xs:annotation>
            <xs:documentation>Indicates whether to automatically flush the file buffers after each log message.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="concurrentWriteAttemptDelay" type="xs:integer">
          <xs:annotation>
            <xs:documentation>Delay in milliseconds to wait before attempting to write to the file again.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="concurrentWriteAttempts" type="xs:integer">
          <xs:annotation>
            <xs:documentation>Number of times the write is appended on the file before NLog discards the log message.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:simpleType name="NLog.Targets.ArchiveNumberingMode">
    <xs:restriction base="xs:string">
      <xs:enumeration value="Sequence" />
      <xs:enumeration value="Rolling" />
      <xs:enumeration value="Date" />
      <xs:enumeration value="DateAndSequence" />
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="NLog.Targets.FileArchivePeriod">
    <xs:restriction base="xs:string">
      <xs:enumeration value="None" />
      <xs:enumeration value="Year" />
      <xs:enumeration value="Month" />
      <xs:enumeration value="Day" />
      <xs:enumeration value="Hour" />
      <xs:enumeration value="Minute" />
      <xs:enumeration value="Sunday" />
      <xs:enumeration value="Monday" />
      <xs:enumeration value="Tuesday" />
      <xs:enumeration value="Wednesday" />
      <xs:enumeration value="Thursday" />
      <xs:enumeration value="Friday" />
      <xs:enumeration value="Saturday" />
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="NLog.Targets.FilePathKind">
    <xs:restriction base="xs:string">
      <xs:enumeration value="Unknown" />
      <xs:enumeration value="Relative" />
      <xs:enumeration value="Absolute" />
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="NLog.Targets.Win32FileAttributes">
    <xs:restriction base="xs:string">
      <xs:enumeration value="ReadOnly" />
      <xs:enumeration value="Hidden" />
      <xs:enumeration value="System" />
      <xs:enumeration value="Archive" />
      <xs:enumeration value="Device" />
      <xs:enumeration value="Normal" />
      <xs:enumeration value="Temporary" />
      <xs:enumeration value="SparseFile" />
      <xs:enumeration value="ReparsePoint" />
      <xs:enumeration value="Compressed" />
      <xs:enumeration value="NotContentIndexed" />
      <xs:enumeration value="Encrypted" />
      <xs:enumeration value="WriteThrough" />
      <xs:enumeration value="NoBuffering" />
      <xs:enumeration value="DeleteOnClose" />
      <xs:enumeration value="PosixSemantics" />
    </xs:restriction>
  </xs:simpleType>
  <xs:complexType name="FilteringWrapper">
    <xs:complexContent>
      <xs:extension base="WrapperTargetBase">
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:element name="name" minOccurs="0" maxOccurs="1" type="xs:string" />
          <xs:element name="condition" minOccurs="0" maxOccurs="1" type="Condition" />
          <xs:element name="optimizeBufferReuse" minOccurs="0" maxOccurs="1" type="xs:boolean" />
        </xs:choice>
        <xs:attribute name="name" type="xs:string">
          <xs:annotation>
            <xs:documentation>Name of the target.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="condition" type="Condition">
          <xs:annotation>
            <xs:documentation>Condition expression. Log events who meet this condition will be forwarded to the wrapped target.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="optimizeBufferReuse" type="xs:boolean">
          <xs:annotation>
            <xs:documentation>Target supports reuse of internal buffers, and doesn't have to constantly allocate new buffers Required for legacy NLog-targets, that expects buffers to remain stable after Write-method exit</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="ImpersonatingWrapper">
    <xs:complexContent>
      <xs:extension base="WrapperTargetBase">
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:element name="name" minOccurs="0" maxOccurs="1" type="xs:string" />
          <xs:element name="domain" minOccurs="0" maxOccurs="1" type="xs:string" />
          <xs:element name="impersonationLevel" minOccurs="0" maxOccurs="1" type="NLog.Targets.Wrappers.SecurityImpersonationLevel" />
          <xs:element name="logOnProvider" minOccurs="0" maxOccurs="1" type="NLog.Targets.Wrappers.LogOnProviderType" />
          <xs:element name="logOnType" minOccurs="0" maxOccurs="1" type="NLog.Targets.Wrappers.SecurityLogOnType" />
          <xs:element name="password" minOccurs="0" maxOccurs="1" type="xs:string" />
          <xs:element name="revertToSelf" minOccurs="0" maxOccurs="1" type="xs:boolean" />
          <xs:element name="userName" minOccurs="0" maxOccurs="1" type="xs:string" />
          <xs:element name="optimizeBufferReuse" minOccurs="0" maxOccurs="1" type="xs:boolean" />
        </xs:choice>
        <xs:attribute name="name" type="xs:string">
          <xs:annotation>
            <xs:documentation>Name of the target.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="domain" type="xs:string">
          <xs:annotation>
            <xs:documentation>Windows domain name to change context to.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="impersonationLevel" type="NLog.Targets.Wrappers.SecurityImpersonationLevel">
          <xs:annotation>
            <xs:documentation>Required impersonation level.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="logOnProvider" type="NLog.Targets.Wrappers.LogOnProviderType">
          <xs:annotation>
            <xs:documentation>Type of the logon provider.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="logOnType" type="NLog.Targets.Wrappers.SecurityLogOnType">
          <xs:annotation>
            <xs:documentation>Logon Type.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="password" type="xs:string">
          <xs:annotation>
            <xs:documentation>User account password.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="revertToSelf" type="xs:boolean">
          <xs:annotation>
            <xs:documentation>Indicates whether to revert to the credentials of the process instead of impersonating another user.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="userName" type="xs:string">
          <xs:annotation>
            <xs:documentation>Username to change context to.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="optimizeBufferReuse" type="xs:boolean">
          <xs:annotation>
            <xs:documentation>Target supports reuse of internal buffers, and doesn't have to constantly allocate new buffers Required for legacy NLog-targets, that expects buffers to remain stable after Write-method exit</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:simpleType name="NLog.Targets.Wrappers.SecurityImpersonationLevel">
    <xs:restriction base="xs:string">
      <xs:enumeration value="Anonymous" />
      <xs:enumeration value="Identification" />
      <xs:enumeration value="Impersonation" />
      <xs:enumeration value="Delegation" />
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="NLog.Targets.Wrappers.LogOnProviderType">
    <xs:restriction base="xs:string">
      <xs:enumeration value="Default" />
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="NLog.Targets.Wrappers.SecurityLogOnType">
    <xs:restriction base="xs:string">
      <xs:enumeration value="Interactive" />
      <xs:enumeration value="Network" />
      <xs:enumeration value="Batch" />
      <xs:enumeration value="Service" />
      <xs:enumeration value="NetworkClearText" />
      <xs:enumeration value="NewCredentials" />
    </xs:restriction>
  </xs:simpleType>
  <xs:complexType name="LimitingWrapper">
    <xs:complexContent>
      <xs:extension base="WrapperTargetBase">
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:element name="name" minOccurs="0" maxOccurs="1" type="xs:string" />
          <xs:element name="interval" minOccurs="0" maxOccurs="1" type="xs:string" />
          <xs:element name="messageLimit" minOccurs="0" maxOccurs="1" type="xs:integer" />
          <xs:element name="optimizeBufferReuse" minOccurs="0" maxOccurs="1" type="xs:boolean" />
        </xs:choice>
        <xs:attribute name="name" type="xs:string">
          <xs:annotation>
            <xs:documentation>Name of the target.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="interval" type="xs:string">
          <xs:annotation>
            <xs:documentation>Interval in which messages will be written up to the  number of messages.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="messageLimit" type="xs:integer">
          <xs:annotation>
            <xs:documentation>Maximum allowed number of messages written per .</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="optimizeBufferReuse" type="xs:boolean">
          <xs:annotation>
            <xs:documentation>Target supports reuse of internal buffers, and doesn't have to constantly allocate new buffers Required for legacy NLog-targets, that expects buffers to remain stable after Write-method exit</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="LogReceiverService">
    <xs:complexContent>
      <xs:extension base="Target">
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:element name="name" minOccurs="0" maxOccurs="1" type="xs:string" />
          <xs:element name="endpointAddress" minOccurs="0" maxOccurs="1" type="xs:string" />
          <xs:element name="endpointConfigurationName" minOccurs="0" maxOccurs="1" type="xs:string" />
          <xs:element name="useOneWayContract" minOccurs="0" maxOccurs="1" type="xs:boolean" />
          <xs:element name="clientId" minOccurs="0" maxOccurs="1" type="Layout" />
          <xs:element name="includeEventProperties" minOccurs="0" maxOccurs="1" type="xs:boolean" />
          <xs:element name="parameter" minOccurs="0" maxOccurs="unbounded" type="NLog.Targets.MethodCallParameter" />
          <xs:element name="useBinaryEncoding" minOccurs="0" maxOccurs="1" type="xs:boolean" />
          <xs:element name="optimizeBufferReuse" minOccurs="0" maxOccurs="1" type="xs:boolean" />
        </xs:choice>
        <xs:attribute name="name" type="xs:string">
          <xs:annotation>
            <xs:documentation>Name of the target.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="endpointAddress" type="xs:string">
          <xs:annotation>
            <xs:documentation>Endpoint address.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="endpointConfigurationName" type="xs:string">
          <xs:annotation>
            <xs:documentation>Name of the endpoint configuration in WCF configuration file.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="useOneWayContract" type="xs:boolean">
          <xs:annotation>
            <xs:documentation>Indicates whether to use a WCF service contract that is one way (fire and forget) or two way (request-reply)</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="clientId" type="SimpleLayoutAttribute">
          <xs:annotation>
            <xs:documentation>Client ID.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="includeEventProperties" type="xs:boolean">
          <xs:annotation>
            <xs:documentation>Indicates whether to include per-event properties in the payload sent to the server.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="useBinaryEncoding" type="xs:boolean">
          <xs:annotation>
            <xs:documentation>Indicates whether to use binary message encoding.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="optimizeBufferReuse" type="xs:boolean">
          <xs:annotation>
            <xs:documentation>Target supports reuse of internal buffers, and doesn't have to constantly allocate new buffers Required for legacy NLog-targets, that expects buffers to remain stable after Write-method exit</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="NLog.Targets.MethodCallParameter">
    <xs:choice minOccurs="0" maxOccurs="unbounded">
      <xs:element name="layout" minOccurs="0" maxOccurs="1" type="Layout" />
      <xs:element name="name" minOccurs="0" maxOccurs="1" type="xs:string" />
      <xs:element name="parameterType" minOccurs="0" maxOccurs="1" type="xs:string" />
      <xs:element name="type" minOccurs="0" maxOccurs="1" type="xs:string" />
    </xs:choice>
    <xs:attribute name="layout" type="SimpleLayoutAttribute">
      <xs:annotation>
        <xs:documentation>Layout that should be use to calculate the value for the parameter.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string">
      <xs:annotation>
        <xs:documentation>Name of the parameter.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="parameterType" type="xs:string">
      <xs:annotation>
        <xs:documentation>Type of the parameter.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="type" type="xs:string">
      <xs:annotation>
        <xs:documentation>Type of the parameter. Obsolete alias for </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="Mail">
    <xs:complexContent>
      <xs:extension base="Target">
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:element name="name" minOccurs="0" maxOccurs="1" type="xs:string" />
          <xs:element name="layout" minOccurs="0" maxOccurs="1" type="Layout" />
          <xs:element name="header" minOccurs="0" maxOccurs="1" type="Layout" />
          <xs:element name="footer" minOccurs="0" maxOccurs="1" type="Layout" />
          <xs:element name="html" minOccurs="0" maxOccurs="1" type="xs:boolean" />
          <xs:element name="encoding" minOccurs="0" maxOccurs="1" type="xs:string" />
          <xs:element name="addNewLines" minOccurs="0" maxOccurs="1" type="xs:boolean" />
          <xs:element name="cc" minOccurs="0" maxOccurs="1" type="Layout" />
          <xs:element name="to" minOccurs="0" maxOccurs="1" type="Layout" />
          <xs:element name="bcc" minOccurs="0" maxOccurs="1" type="Layout" />
          <xs:element name="body" minOccurs="0" maxOccurs="1" type="Layout" />
          <xs:element name="subject" minOccurs="0" maxOccurs="1" type="Layout" />
          <xs:element name="from" minOccurs="0" maxOccurs="1" type="Layout" />
          <xs:element name="timeout" minOccurs="0" maxOccurs="1" type="xs:integer" />
          <xs:element name="priority" minOccurs="0" maxOccurs="1" type="Layout" />
          <xs:element name="replaceNewlineWithBrTagInHtml" minOccurs="0" maxOccurs="1" type="xs:boolean" />
          <xs:element name="optimizeBufferReuse" minOccurs="0" maxOccurs="1" type="xs:boolean" />
          <xs:element name="smtpServer" minOccurs="0" maxOccurs="1" type="Layout" />
          <xs:element name="smtpAuthentication" minOccurs="0" maxOccurs="1" type="NLog.Targets.SmtpAuthenticationMode" />
          <xs:element name="smtpUserName" minOccurs="0" maxOccurs="1" type="Layout" />
          <xs:element name="smtpPassword" minOccurs="0" maxOccurs="1" type="Layout" />
          <xs:element name="enableSsl" minOccurs="0" maxOccurs="1" type="xs:boolean" />
          <xs:element name="smtpPort" minOccurs="0" maxOccurs="1" type="xs:integer" />
          <xs:element name="useSystemNetMailSettings" minOccurs="0" maxOccurs="1" type="xs:boolean" />
          <xs:element name="pickupDirectoryLocation" minOccurs="0" maxOccurs="1" type="xs:string" />
          <xs:element name="deliveryMethod" minOccurs="0" maxOccurs="1" type="System.Net.Mail.SmtpDeliveryMethod" />
        </xs:choice>
        <xs:attribute name="name" type="xs:string">
          <xs:annotation>
            <xs:documentation>Name of the target.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="layout" type="SimpleLayoutAttribute">
          <xs:annotation>
            <xs:documentation>Text to be rendered.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="header" type="SimpleLayoutAttribute">
          <xs:annotation>
            <xs:documentation>Header.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="footer" type="SimpleLayoutAttribute">
          <xs:annotation>
            <xs:documentation>Footer.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="html" type="xs:boolean">
          <xs:annotation>
            <xs:documentation>Indicates whether to send message as HTML instead of plain text.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="encoding" type="xs:string">
          <xs:annotation>
            <xs:documentation>Encoding to be used for sending e-mail.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="addNewLines" type="xs:boolean">
          <xs:annotation>
            <xs:documentation>Indicates whether to add new lines between log entries.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="cc" type="SimpleLayoutAttribute">
          <xs:annotation>
            <xs:documentation>CC email addresses separated by semicolons (e.g. john@domain.com;jane@domain.com).</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="to" type="SimpleLayoutAttribute">
          <xs:annotation>
            <xs:documentation>Recipients' email addresses separated by semicolons (e.g. john@domain.com;jane@domain.com).</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="bcc" type="SimpleLayoutAttribute">
          <xs:annotation>
            <xs:documentation>BCC email addresses separated by semicolons (e.g. john@domain.com;jane@domain.com).</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="body" type="SimpleLayoutAttribute">
          <xs:annotation>
            <xs:documentation>Mail message body (repeated for each log message send in one mail).</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="subject" type="SimpleLayoutAttribute">
          <xs:annotation>
            <xs:documentation>Mail subject.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="from" type="SimpleLayoutAttribute">
          <xs:annotation>
            <xs:documentation>Sender's email address (e.g. joe@domain.com).</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="timeout" type="xs:integer">
          <xs:annotation>
            <xs:documentation>Indicates the SMTP client timeout.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="priority" type="SimpleLayoutAttribute">
          <xs:annotation>
            <xs:documentation>Priority used for sending mails.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="replaceNewlineWithBrTagInHtml" type="xs:boolean">
          <xs:annotation>
            <xs:documentation>Indicates whether NewLine characters in the body should be replaced with  tags.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="optimizeBufferReuse" type="xs:boolean">
          <xs:annotation>
            <xs:documentation>Target supports reuse of internal buffers, and doesn't have to constantly allocate new buffers Required for legacy NLog-targets, that expects buffers to remain stable after Write-method exit</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="smtpServer" type="SimpleLayoutAttribute">
          <xs:annotation>
            <xs:documentation>SMTP Server to be used for sending.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="smtpAuthentication" type="NLog.Targets.SmtpAuthenticationMode">
          <xs:annotation>
            <xs:documentation>SMTP Authentication mode.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="smtpUserName" type="SimpleLayoutAttribute">
          <xs:annotation>
            <xs:documentation>Username used to connect to SMTP server (used when SmtpAuthentication is set to "basic").</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="smtpPassword" type="SimpleLayoutAttribute">
          <xs:annotation>
            <xs:documentation>Password used to authenticate against SMTP server (used when SmtpAuthentication is set to "basic").</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="enableSsl" type="xs:boolean">
          <xs:annotation>
            <xs:documentation>Indicates whether SSL (secure sockets layer) should be used when communicating with SMTP server.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="smtpPort" type="xs:integer">
          <xs:annotation>
            <xs:documentation>Port number that SMTP Server is listening on.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="useSystemNetMailSettings" type="xs:boolean">
          <xs:annotation>
            <xs:documentation>Indicates whether the default Settings from System.Net.MailSettings should be used.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="pickupDirectoryLocation" type="xs:string">
          <xs:annotation>
            <xs:documentation>Folder where applications save mail messages to be processed by the local SMTP server.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="deliveryMethod" type="System.Net.Mail.SmtpDeliveryMethod">
          <xs:annotation>
            <xs:documentation>Specifies how outgoing email messages will be handled.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:simpleType name="NLog.Targets.SmtpAuthenticationMode">
    <xs:restriction base="xs:string">
      <xs:enumeration value="None" />
      <xs:enumeration value="Basic" />
      <xs:enumeration value="Ntlm" />
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="System.Net.Mail.SmtpDeliveryMethod">
    <xs:restriction base="xs:string">
      <xs:enumeration value="Network" />
      <xs:enumeration value="SpecifiedPickupDirectory" />
      <xs:enumeration value="PickupDirectoryFromIis" />
    </xs:restriction>
  </xs:simpleType>
  <xs:complexType name="Memory">
    <xs:complexContent>
      <xs:extension base="Target">
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:element name="name" minOccurs="0" maxOccurs="1" type="xs:string" />
          <xs:element name="layout" minOccurs="0" maxOccurs="1" type="Layout" />
          <xs:element name="optimizeBufferReuse" minOccurs="0" maxOccurs="1" type="xs:boolean" />
        </xs:choice>
        <xs:attribute name="name" type="xs:string">
          <xs:annotation>
            <xs:documentation>Name of the target.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="layout" type="SimpleLayoutAttribute">
          <xs:annotation>
            <xs:documentation>Layout used to format log messages.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="optimizeBufferReuse" type="xs:boolean">
          <xs:annotation>
            <xs:documentation>Target supports reuse of internal buffers, and doesn't have to constantly allocate new buffers Required for legacy NLog-targets, that expects buffers to remain stable after Write-method exit</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="MSMQ">
    <xs:complexContent>
      <xs:extension base="Target">
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:element name="name" minOccurs="0" maxOccurs="1" type="xs:string" />
          <xs:element name="layout" minOccurs="0" maxOccurs="1" type="Layout" />
          <xs:element name="encoding" minOccurs="0" maxOccurs="1" type="xs:string" />
          <xs:element name="useXmlEncoding" minOccurs="0" maxOccurs="1" type="xs:boolean" />
          <xs:element name="checkIfQueueExists" minOccurs="0" maxOccurs="1" type="xs:boolean" />
          <xs:element name="optimizeBufferReuse" minOccurs="0" maxOccurs="1" type="xs:boolean" />
          <xs:element name="createQueueIfNotExists" minOccurs="0" maxOccurs="1" type="xs:boolean" />
          <xs:element name="label" minOccurs="0" maxOccurs="1" type="Layout" />
          <xs:element name="queue" minOccurs="0" maxOccurs="1" type="Layout" />
          <xs:element name="recoverable" minOccurs="0" maxOccurs="1" type="xs:boolean" />
        </xs:choice>
        <xs:attribute name="name" type="xs:string">
          <xs:annotation>
            <xs:documentation>Name of the target.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="layout" type="SimpleLayoutAttribute">
          <xs:annotation>
            <xs:documentation>Layout used to format log messages.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="encoding" type="xs:string">
          <xs:annotation>
            <xs:documentation>Encoding to be used when writing text to the queue.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="useXmlEncoding" type="xs:boolean">
          <xs:annotation>
            <xs:documentation>Indicates whether to use the XML format when serializing message. This will also disable creating queues.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="checkIfQueueExists" type="xs:boolean">
          <xs:annotation>
            <xs:documentation>Indicates whether to check if a queue exists before writing to it.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="optimizeBufferReuse" type="xs:boolean">
          <xs:annotation>
            <xs:documentation>Target supports reuse of internal buffers, and doesn't have to constantly allocate new buffers Required for legacy NLog-targets, that expects buffers to remain stable after Write-method exit</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="createQueueIfNotExists" type="xs:boolean">
          <xs:annotation>
            <xs:documentation>Indicates whether to create the queue if it doesn't exists.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="label" type="SimpleLayoutAttribute">
          <xs:annotation>
            <xs:documentation>Label to associate with each message.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="queue" type="SimpleLayoutAttribute">
          <xs:annotation>
            <xs:documentation>Name of the queue to write to.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="recoverable" type="xs:boolean">
          <xs:annotation>
            <xs:documentation>Indicates whether to use recoverable messages (with guaranteed delivery).</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="MethodCall">
    <xs:complexContent>
      <xs:extension base="Target">
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:element name="name" minOccurs="0" maxOccurs="1" type="xs:string" />
          <xs:element name="className" minOccurs="0" maxOccurs="1" type="xs:string" />
          <xs:element name="methodName" minOccurs="0" maxOccurs="1" type="xs:string" />
          <xs:element name="parameter" minOccurs="0" maxOccurs="unbounded" type="NLog.Targets.MethodCallParameter" />
          <xs:element name="optimizeBufferReuse" minOccurs="0" maxOccurs="1" type="xs:boolean" />
        </xs:choice>
        <xs:attribute name="name" type="xs:string">
          <xs:annotation>
            <xs:documentation>Name of the target.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="className" type="xs:string">
          <xs:annotation>
            <xs:documentation>Class name.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="methodName" type="xs:string">
          <xs:annotation>
            <xs:documentation>Method name. The method must be public and static. Use the AssemblyQualifiedName , https://msdn.microsoft.com/en-us/library/system.type.assemblyqualifiedname(v=vs.110).aspx e.g.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="optimizeBufferReuse" type="xs:boolean">
          <xs:annotation>
            <xs:documentation>Target supports reuse of internal buffers, and doesn't have to constantly allocate new buffers Required for legacy NLog-targets, that expects buffers to remain stable after Write-method exit</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="Network">
    <xs:complexContent>
      <xs:extension base="Target">
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:element name="name" minOccurs="0" maxOccurs="1" type="xs:string" />
          <xs:element name="layout" minOccurs="0" maxOccurs="1" type="Layout" />
          <xs:element name="encoding" minOccurs="0" maxOccurs="1" type="xs:string" />
          <xs:element name="lineEnding" minOccurs="0" maxOccurs="1" type="LineEndingMode" />
          <xs:element name="maxMessageSize" minOccurs="0" maxOccurs="1" type="xs:integer" />
          <xs:element name="newLine" minOccurs="0" maxOccurs="1" type="xs:boolean" />
          <xs:element name="onConnectionOverflow" minOccurs="0" maxOccurs="1" type="NLog.Targets.NetworkTargetConnectionsOverflowAction" />
          <xs:element name="onOverflow" minOccurs="0" maxOccurs="1" type="NLog.Targets.NetworkTargetOverflowAction" />
          <xs:element name="address" minOccurs="0" maxOccurs="1" type="Layout" />
          <xs:element name="connectionCacheSize" minOccurs="0" maxOccurs="1" type="xs:integer" />
          <xs:element name="keepConnection" minOccurs="0" maxOccurs="1" type="xs:boolean" />
          <xs:element name="maxConnections" minOccurs="0" maxOccurs="1" type="xs:integer" />
          <xs:element name="maxQueueSize" minOccurs="0" maxOccurs="1" type="xs:integer" />
          <xs:element name="optimizeBufferReuse" minOccurs="0" maxOccurs="1" type="xs:boolean" />
        </xs:choice>
        <xs:attribute name="name" type="xs:string">
          <xs:annotation>
            <xs:documentation>Name of the target.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="layout" type="SimpleLayoutAttribute">
          <xs:annotation>
            <xs:documentation>Layout used to format log messages.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="encoding" type="xs:string">
          <xs:annotation>
            <xs:documentation>Encoding to be used.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="lineEnding" type="LineEndingMode">
          <xs:annotation>
            <xs:documentation>End of line value if a newline is appended at the end of log message .</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="maxMessageSize" type="xs:integer">
          <xs:annotation>
            <xs:documentation>Maximum message size in bytes.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="newLine" type="xs:boolean">
          <xs:annotation>
            <xs:documentation>Indicates whether to append newline at the end of log message.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="onConnectionOverflow" type="NLog.Targets.NetworkTargetConnectionsOverflowAction">
          <xs:annotation>
            <xs:documentation>Action that should be taken if the will be more connections than .</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="onOverflow" type="NLog.Targets.NetworkTargetOverflowAction">
          <xs:annotation>
            <xs:documentation>Action that should be taken if the message is larger than maxMessageSize.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="address" type="SimpleLayoutAttribute">
          <xs:annotation>
            <xs:documentation>Network address.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="connectionCacheSize" type="xs:integer">
          <xs:annotation>
            <xs:documentation>Size of the connection cache (number of connections which are kept alive).</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="keepConnection" type="xs:boolean">
          <xs:annotation>
            <xs:documentation>Indicates whether to keep connection open whenever possible.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="maxConnections" type="xs:integer">
          <xs:annotation>
            <xs:documentation>Maximum current connections. 0 = no maximum.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="maxQueueSize" type="xs:integer">
          <xs:annotation>
            <xs:documentation>Maximum queue size.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="optimizeBufferReuse" type="xs:boolean">
          <xs:annotation>
            <xs:documentation>Target supports reuse of internal buffers, and doesn't have to constantly allocate new buffers Required for legacy NLog-targets, that expects buffers to remain stable after Write-method exit</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="NLogViewer">
    <xs:complexContent>
      <xs:extension base="Target">
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:element name="name" minOccurs="0" maxOccurs="1" type="xs:string" />
          <xs:element name="encoding" minOccurs="0" maxOccurs="1" type="xs:string" />
          <xs:element name="layout" minOccurs="0" maxOccurs="1" type="Layout" />
          <xs:element name="lineEnding" minOccurs="0" maxOccurs="1" type="LineEndingMode" />
          <xs:element name="maxMessageSize" minOccurs="0" maxOccurs="1" type="xs:integer" />
          <xs:element name="newLine" minOccurs="0" maxOccurs="1" type="xs:boolean" />
          <xs:element name="onConnectionOverflow" minOccurs="0" maxOccurs="1" type="NLog.Targets.NetworkTargetConnectionsOverflowAction" />
          <xs:element name="onOverflow" minOccurs="0" maxOccurs="1" type="NLog.Targets.NetworkTargetOverflowAction" />
          <xs:element name="maxConnections" minOccurs="0" maxOccurs="1" type="xs:integer" />
          <xs:element name="keepConnection" minOccurs="0" maxOccurs="1" type="xs:boolean" />
          <xs:element name="connectionCacheSize" minOccurs="0" maxOccurs="1" type="xs:integer" />
          <xs:element name="address" minOccurs="0" maxOccurs="1" type="Layout" />
          <xs:element name="maxQueueSize" minOccurs="0" maxOccurs="1" type="xs:integer" />
          <xs:element name="parameter" minOccurs="0" maxOccurs="unbounded" type="NLog.Targets.NLogViewerParameterInfo" />
          <xs:element name="includeNdc" minOccurs="0" maxOccurs="1" type="xs:boolean" />
          <xs:element name="includeSourceInfo" minOccurs="0" maxOccurs="1" type="xs:boolean" />
          <xs:element name="includeNLogData" minOccurs="0" maxOccurs="1" type="xs:boolean" />
          <xs:element name="includeMdc" minOccurs="0" maxOccurs="1" type="xs:boolean" />
          <xs:element name="includeCallSite" minOccurs="0" maxOccurs="1" type="xs:boolean" />
          <xs:element name="appInfo" minOccurs="0" maxOccurs="1" type="xs:string" />
          <xs:element name="ndcItemSeparator" minOccurs="0" maxOccurs="1" type="xs:string" />
          <xs:element name="includeMdlc" minOccurs="0" maxOccurs="1" type="xs:boolean" />
          <xs:element name="optimizeBufferReuse" minOccurs="0" maxOccurs="1" type="xs:boolean" />
        </xs:choice>
        <xs:attribute name="name" type="xs:string">
          <xs:annotation>
            <xs:documentation>Name of the target.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="encoding" type="xs:string">
          <xs:annotation>
            <xs:documentation>Encoding to be used.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="layout" type="SimpleLayoutAttribute">
          <xs:annotation>
            <xs:documentation>Instance of  that is used to format log messages.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="lineEnding" type="LineEndingMode">
          <xs:annotation>
            <xs:documentation>End of line value if a newline is appended at the end of log message .</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="maxMessageSize" type="xs:integer">
          <xs:annotation>
            <xs:documentation>Maximum message size in bytes.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="newLine" type="xs:boolean">
          <xs:annotation>
            <xs:documentation>Indicates whether to append newline at the end of log message.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="onConnectionOverflow" type="NLog.Targets.NetworkTargetConnectionsOverflowAction">
          <xs:annotation>
            <xs:documentation>Action that should be taken if the will be more connections than .</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="onOverflow" type="NLog.Targets.NetworkTargetOverflowAction">
          <xs:annotation>
            <xs:documentation>Action that should be taken if the message is larger than maxMessageSize.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="maxConnections" type="xs:integer">
          <xs:annotation>
            <xs:documentation>Maximum current connections. 0 = no maximum.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="keepConnection" type="xs:boolean">
          <xs:annotation>
            <xs:documentation>Indicates whether to keep connection open whenever possible.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="connectionCacheSize" type="xs:integer">
          <xs:annotation>
            <xs:documentation>Size of the connection cache (number of connections which are kept alive).</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="address" type="SimpleLayoutAttribute">
          <xs:annotation>
            <xs:documentation>Network address.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="maxQueueSize" type="xs:integer">
          <xs:annotation>
            <xs:documentation>Maximum queue size.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="includeNdc" type="xs:boolean">
          <xs:annotation>
            <xs:documentation>Indicates whether to include  stack contents.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="includeSourceInfo" type="xs:boolean">
          <xs:annotation>
            <xs:documentation>Indicates whether to include source info (file name and line number) in the information sent over the network.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="includeNLogData" type="xs:boolean">
          <xs:annotation>
            <xs:documentation>Indicates whether to include NLog-specific extensions to log4j schema.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="includeMdc" type="xs:boolean">
          <xs:annotation>
            <xs:documentation>Indicates whether to include  dictionary contents.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="includeCallSite" type="xs:boolean">
          <xs:annotation>
            <xs:documentation>Indicates whether to include call site (class and method name) in the information sent over the network.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="appInfo" type="xs:string">
          <xs:annotation>
            <xs:documentation>AppInfo field. By default it's the friendly name of the current AppDomain.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="ndcItemSeparator" type="xs:string">
          <xs:annotation>
            <xs:documentation>NDC item separator.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="includeMdlc" type="xs:boolean">
          <xs:annotation>
            <xs:documentation>Indicates whether to include  dictionary contents.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="optimizeBufferReuse" type="xs:boolean">
          <xs:annotation>
            <xs:documentation>Target supports reuse of internal buffers, and doesn't have to constantly allocate new buffers Required for legacy NLog-targets, that expects buffers to remain stable after Write-method exit</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="Null">
    <xs:complexContent>
      <xs:extension base="Target">
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:element name="name" minOccurs="0" maxOccurs="1" type="xs:string" />
          <xs:element name="layout" minOccurs="0" maxOccurs="1" type="Layout" />
          <xs:element name="formatMessage" minOccurs="0" maxOccurs="1" type="xs:boolean" />
          <xs:element name="optimizeBufferReuse" minOccurs="0" maxOccurs="1" type="xs:boolean" />
        </xs:choice>
        <xs:attribute name="name" type="xs:string">
          <xs:annotation>
            <xs:documentation>Name of the target.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="layout" type="SimpleLayoutAttribute">
          <xs:annotation>
            <xs:documentation>Layout used to format log messages.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="formatMessage" type="xs:boolean">
          <xs:annotation>
            <xs:documentation>Indicates whether to perform layout calculation.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="optimizeBufferReuse" type="xs:boolean">
          <xs:annotation>
            <xs:documentation>Target supports reuse of internal buffers, and doesn't have to constantly allocate new buffers Required for legacy NLog-targets, that expects buffers to remain stable after Write-method exit</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="OutputDebugString">
    <xs:complexContent>
      <xs:extension base="Target">
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:element name="name" minOccurs="0" maxOccurs="1" type="xs:string" />
          <xs:element name="layout" minOccurs="0" maxOccurs="1" type="Layout" />
          <xs:element name="optimizeBufferReuse" minOccurs="0" maxOccurs="1" type="xs:boolean" />
        </xs:choice>
        <xs:attribute name="name" type="xs:string">
          <xs:annotation>
            <xs:documentation>Name of the target.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="layout" type="SimpleLayoutAttribute">
          <xs:annotation>
            <xs:documentation>Layout used to format log messages.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="optimizeBufferReuse" type="xs:boolean">
          <xs:annotation>
            <xs:documentation>Target supports reuse of internal buffers, and doesn't have to constantly allocate new buffers Required for legacy NLog-targets, that expects buffers to remain stable after Write-method exit</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="PerfCounter">
    <xs:complexContent>
      <xs:extension base="Target">
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:element name="name" minOccurs="0" maxOccurs="1" type="xs:string" />
          <xs:element name="autoCreate" minOccurs="0" maxOccurs="1" type="xs:boolean" />
          <xs:element name="categoryName" minOccurs="0" maxOccurs="1" type="xs:string" />
          <xs:element name="counterHelp" minOccurs="0" maxOccurs="1" type="xs:string" />
          <xs:element name="counterName" minOccurs="0" maxOccurs="1" type="xs:string" />
          <xs:element name="counterType" minOccurs="0" maxOccurs="1" type="System.Diagnostics.PerformanceCounterType" />
          <xs:element name="incrementValue" minOccurs="0" maxOccurs="1" type="Layout" />
          <xs:element name="instanceName" minOccurs="0" maxOccurs="1" type="xs:string" />
          <xs:element name="optimizeBufferReuse" minOccurs="0" maxOccurs="1" type="xs:boolean" />
        </xs:choice>
        <xs:attribute name="name" type="xs:string">
          <xs:annotation>
            <xs:documentation>Name of the target.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="autoCreate" type="xs:boolean">
          <xs:annotation>
            <xs:documentation>Indicates whether performance counter should be automatically created.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="categoryName" type="xs:string">
          <xs:annotation>
            <xs:documentation>Name of the performance counter category.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="counterHelp" type="xs:string">
          <xs:annotation>
            <xs:documentation>Counter help text.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="counterName" type="xs:string">
          <xs:annotation>
            <xs:documentation>Name of the performance counter.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="counterType" type="System.Diagnostics.PerformanceCounterType">
          <xs:annotation>
            <xs:documentation>Performance counter type.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="incrementValue" type="SimpleLayoutAttribute">
          <xs:annotation>
            <xs:documentation>The value by which to increment the counter.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="instanceName" type="xs:string">
          <xs:annotation>
            <xs:documentation>Performance counter instance name.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="optimizeBufferReuse" type="xs:boolean">
          <xs:annotation>
            <xs:documentation>Target supports reuse of internal buffers, and doesn't have to constantly allocate new buffers Required for legacy NLog-targets, that expects buffers to remain stable after Write-method exit</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:simpleType name="System.Diagnostics.PerformanceCounterType">
    <xs:restriction base="xs:string">
      <xs:enumeration value="NumberOfItems32" />
      <xs:enumeration value="NumberOfItems64" />
      <xs:enumeration value="NumberOfItemsHEX32" />
      <xs:enumeration value="NumberOfItemsHEX64" />
      <xs:enumeration value="RateOfCountsPerSecond32" />
      <xs:enumeration value="RateOfCountsPerSecond64" />
      <xs:enumeration value="CountPerTimeInterval32" />
      <xs:enumeration value="CountPerTimeInterval64" />
      <xs:enumeration value="RawFraction" />
      <xs:enumeration value="RawBase" />
      <xs:enumeration value="AverageTimer32" />
      <xs:enumeration value="AverageBase" />
      <xs:enumeration value="AverageCount64" />
      <xs:enumeration value="SampleFraction" />
      <xs:enumeration value="SampleCounter" />
      <xs:enumeration value="SampleBase" />
      <xs:enumeration value="CounterTimer" />
      <xs:enumeration value="CounterTimerInverse" />
      <xs:enumeration value="Timer100Ns" />
      <xs:enumeration value="Timer100NsInverse" />
      <xs:enumeration value="ElapsedTime" />
      <xs:enumeration value="CounterMultiTimer" />
      <xs:enumeration value="CounterMultiTimerInverse" />
      <xs:enumeration value="CounterMultiTimer100Ns" />
      <xs:enumeration value="CounterMultiTimer100NsInverse" />
      <xs:enumeration value="CounterMultiBase" />
      <xs:enumeration value="CounterDelta32" />
      <xs:enumeration value="CounterDelta64" />
    </xs:restriction>
  </xs:simpleType>
  <xs:complexType name="PostFilteringWrapper">
    <xs:complexContent>
      <xs:extension base="WrapperTargetBase">
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:element name="name" minOccurs="0" maxOccurs="1" type="xs:string" />
          <xs:element name="defaultFilter" minOccurs="0" maxOccurs="1" type="Condition" />
          <xs:element name="when" minOccurs="0" maxOccurs="unbounded" type="NLog.Targets.Wrappers.FilteringRule" />
          <xs:element name="optimizeBufferReuse" minOccurs="0" maxOccurs="1" type="xs:boolean" />
        </xs:choice>
        <xs:attribute name="name" type="xs:string">
          <xs:annotation>
            <xs:documentation>Name of the target.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="defaultFilter" type="Condition">
          <xs:annotation>
            <xs:documentation>Default filter to be applied when no specific rule matches.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="optimizeBufferReuse" type="xs:boolean">
          <xs:annotation>
            <xs:documentation>Target supports reuse of internal buffers, and doesn't have to constantly allocate new buffers Required for legacy NLog-targets, that expects buffers to remain stable after Write-method exit</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="NLog.Targets.Wrappers.FilteringRule">
    <xs:choice minOccurs="0" maxOccurs="unbounded">
      <xs:element name="exists" minOccurs="0" maxOccurs="1" type="Condition" />
      <xs:element name="filter" minOccurs="0" maxOccurs="1" type="Condition" />
    </xs:choice>
    <xs:attribute name="exists" type="Condition">
      <xs:annotation>
        <xs:documentation>Condition to be tested.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="filter" type="Condition">
      <xs:annotation>
        <xs:documentation>Resulting filter to be applied when the condition matches.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="RandomizeGroup">
    <xs:complexContent>
      <xs:extension base="CompoundTargetBase">
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:element name="name" minOccurs="0" maxOccurs="1" type="xs:string" />
          <xs:element name="optimizeBufferReuse" minOccurs="0" maxOccurs="1" type="xs:boolean" />
        </xs:choice>
        <xs:attribute name="name" type="xs:string">
          <xs:annotation>
            <xs:documentation>Name of the target.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="optimizeBufferReuse" type="xs:boolean">
          <xs:annotation>
            <xs:documentation>Target supports reuse of internal buffers, and doesn't have to constantly allocate new buffers Required for legacy NLog-targets, that expects buffers to remain stable after Write-method exit</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="RepeatingWrapper">
    <xs:complexContent>
      <xs:extension base="WrapperTargetBase">
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:element name="name" minOccurs="0" maxOccurs="1" type="xs:string" />
          <xs:element name="optimizeBufferReuse" minOccurs="0" maxOccurs="1" type="xs:boolean" />
          <xs:element name="repeatCount" minOccurs="0" maxOccurs="1" type="xs:integer" />
        </xs:choice>
        <xs:attribute name="name" type="xs:string">
          <xs:annotation>
            <xs:documentation>Name of the target.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="optimizeBufferReuse" type="xs:boolean">
          <xs:annotation>
            <xs:documentation>Target supports reuse of internal buffers, and doesn't have to constantly allocate new buffers Required for legacy NLog-targets, that expects buffers to remain stable after Write-method exit</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="repeatCount" type="xs:integer">
          <xs:annotation>
            <xs:documentation>Number of times to repeat each log message.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="RetryingWrapper">
    <xs:complexContent>
      <xs:extension base="WrapperTargetBase">
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:element name="name" minOccurs="0" maxOccurs="1" type="xs:string" />
          <xs:element name="optimizeBufferReuse" minOccurs="0" maxOccurs="1" type="xs:boolean" />
          <xs:element name="retryCount" minOccurs="0" maxOccurs="1" type="xs:integer" />
          <xs:element name="retryDelayMilliseconds" minOccurs="0" maxOccurs="1" type="xs:integer" />
        </xs:choice>
        <xs:attribute name="name" type="xs:string">
          <xs:annotation>
            <xs:documentation>Name of the target.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="optimizeBufferReuse" type="xs:boolean">
          <xs:annotation>
            <xs:documentation>Target supports reuse of internal buffers, and doesn't have to constantly allocate new buffers Required for legacy NLog-targets, that expects buffers to remain stable after Write-method exit</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="retryCount" type="xs:integer">
          <xs:annotation>
            <xs:documentation>Number of retries that should be attempted on the wrapped target in case of a failure.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="retryDelayMilliseconds" type="xs:integer">
          <xs:annotation>
            <xs:documentation>Time to wait between retries in milliseconds.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="RoundRobinGroup">
    <xs:complexContent>
      <xs:extension base="CompoundTargetBase">
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:element name="name" minOccurs="0" maxOccurs="1" type="xs:string" />
          <xs:element name="optimizeBufferReuse" minOccurs="0" maxOccurs="1" type="xs:boolean" />
        </xs:choice>
        <xs:attribute name="name" type="xs:string">
          <xs:annotation>
            <xs:documentation>Name of the target.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="optimizeBufferReuse" type="xs:boolean">
          <xs:annotation>
            <xs:documentation>Target supports reuse of internal buffers, and doesn't have to constantly allocate new buffers Required for legacy NLog-targets, that expects buffers to remain stable after Write-method exit</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="SplitGroup">
    <xs:complexContent>
      <xs:extension base="CompoundTargetBase">
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:element name="name" minOccurs="0" maxOccurs="1" type="xs:string" />
          <xs:element name="optimizeBufferReuse" minOccurs="0" maxOccurs="1" type="xs:boolean" />
        </xs:choice>
        <xs:attribute name="name" type="xs:string">
          <xs:annotation>
            <xs:documentation>Name of the target.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="optimizeBufferReuse" type="xs:boolean">
          <xs:annotation>
            <xs:documentation>Target supports reuse of internal buffers, and doesn't have to constantly allocate new buffers Required for legacy NLog-targets, that expects buffers to remain stable after Write-method exit</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="Trace">
    <xs:complexContent>
      <xs:extension base="Target">
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:element name="name" minOccurs="0" maxOccurs="1" type="xs:string" />
          <xs:element name="layout" minOccurs="0" maxOccurs="1" type="Layout" />
          <xs:element name="optimizeBufferReuse" minOccurs="0" maxOccurs="1" type="xs:boolean" />
        </xs:choice>
        <xs:attribute name="name" type="xs:string">
          <xs:annotation>
            <xs:documentation>Name of the target.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="layout" type="SimpleLayoutAttribute">
          <xs:annotation>
            <xs:documentation>Layout used to format log messages.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="optimizeBufferReuse" type="xs:boolean">
          <xs:annotation>
            <xs:documentation>Target supports reuse of internal buffers, and doesn't have to constantly allocate new buffers Required for legacy NLog-targets, that expects buffers to remain stable after Write-method exit</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="WebService">
    <xs:complexContent>
      <xs:extension base="Target">
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:element name="name" minOccurs="0" maxOccurs="1" type="xs:string" />
          <xs:element name="includeBOM" minOccurs="0" maxOccurs="1" type="xs:boolean" />
          <xs:element name="parameter" minOccurs="0" maxOccurs="unbounded" type="NLog.Targets.MethodCallParameter" />
          <xs:element name="optimizeBufferReuse" minOccurs="0" maxOccurs="1" type="xs:boolean" />
          <xs:element name="encoding" minOccurs="0" maxOccurs="1" type="xs:string" />
          <xs:element name="escapeDataNLogLegacy" minOccurs="0" maxOccurs="1" type="xs:boolean" />
          <xs:element name="escapeDataRfc3986" minOccurs="0" maxOccurs="1" type="xs:boolean" />
          <xs:element name="methodName" minOccurs="0" maxOccurs="1" type="xs:string" />
          <xs:element name="namespace" minOccurs="0" maxOccurs="1" type="xs:string" />
          <xs:element name="protocol" minOccurs="0" maxOccurs="1" type="NLog.Targets.WebServiceProtocol" />
          <xs:element name="url" minOccurs="0" maxOccurs="1" type="xs:anyURI" />
          <xs:element name="xmlRoot" minOccurs="0" maxOccurs="1" type="xs:string" />
          <xs:element name="xmlRootNamespace" minOccurs="0" maxOccurs="1" type="xs:string" />
        </xs:choice>
        <xs:attribute name="name" type="xs:string">
          <xs:annotation>
            <xs:documentation>Name of the target.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="includeBOM" type="xs:boolean">
          <xs:annotation>
            <xs:documentation>Should we include the BOM (Byte-order-mark) for UTF? Influences the  property. This will only work for UTF-8.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="optimizeBufferReuse" type="xs:boolean">
          <xs:annotation>
            <xs:documentation>Target supports reuse of internal buffers, and doesn't have to constantly allocate new buffers Required for legacy NLog-targets, that expects buffers to remain stable after Write-method exit</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="encoding" type="xs:string">
          <xs:annotation>
            <xs:documentation>Encoding.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="escapeDataNLogLegacy" type="xs:boolean">
          <xs:annotation>
            <xs:documentation>Value whether escaping be done according to the old NLog style (Very non-standard)</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="escapeDataRfc3986" type="xs:boolean">
          <xs:annotation>
            <xs:documentation>Value whether escaping be done according to Rfc3986 (Supports Internationalized Resource Identifiers - IRIs)</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="methodName" type="xs:string">
          <xs:annotation>
            <xs:documentation>Web service method name. Only used with Soap.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="namespace" type="xs:string">
          <xs:annotation>
            <xs:documentation>Web service namespace. Only used with Soap.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="protocol" type="NLog.Targets.WebServiceProtocol">
          <xs:annotation>
            <xs:documentation>Protocol to be used when calling web service.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="url" type="xs:anyURI">
          <xs:annotation>
            <xs:documentation>Web service URL.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="xmlRoot" type="xs:string">
          <xs:annotation>
            <xs:documentation>Name of the root XML element, if POST of XML document chosen. If so, this property must not be null. (see  and ).</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="xmlRootNamespace" type="xs:string">
          <xs:annotation>
            <xs:documentation>(optional) root namespace of the XML document, if POST of XML document chosen. (see  and ).</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:simpleType name="NLog.Targets.WebServiceProtocol">
    <xs:restriction base="xs:string">
      <xs:enumeration value="Soap11" />
      <xs:enumeration value="Soap12" />
      <xs:enumeration value="HttpPost" />
      <xs:enumeration value="HttpGet" />
      <xs:enumeration value="JsonPost" />
      <xs:enumeration value="XmlPost" />
    </xs:restriction>
  </xs:simpleType>
  <xs:complexType name="CompoundLayout">
    <xs:complexContent>
      <xs:extension base="Layout">
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:element name="layout" minOccurs="0" maxOccurs="unbounded" type="Layout" />
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="Layout">
    <xs:choice minOccurs="0" maxOccurs="unbounded" />
  </xs:complexType>
  <xs:complexType name="CsvLayout">
    <xs:complexContent>
      <xs:extension base="Layout">
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:element name="footer" minOccurs="0" maxOccurs="1" type="Layout" />
          <xs:element name="header" minOccurs="0" maxOccurs="1" type="Layout" />
          <xs:element name="layout" minOccurs="0" maxOccurs="1" type="Layout" />
          <xs:element name="column" minOccurs="0" maxOccurs="unbounded" type="NLog.Layouts.CsvColumn" />
          <xs:element name="customColumnDelimiter" minOccurs="0" maxOccurs="1" type="xs:string" />
          <xs:element name="delimiter" minOccurs="0" maxOccurs="1" type="NLog.Layouts.CsvColumnDelimiterMode" />
          <xs:element name="quoteChar" minOccurs="0" maxOccurs="1" type="xs:string" />
          <xs:element name="quoting" minOccurs="0" maxOccurs="1" type="NLog.Layouts.CsvQuotingMode" />
          <xs:element name="withHeader" minOccurs="0" maxOccurs="1" type="xs:boolean" />
        </xs:choice>
        <xs:attribute name="footer" type="SimpleLayoutAttribute">
          <xs:annotation>
            <xs:documentation>Footer layout.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="header" type="SimpleLayoutAttribute">
          <xs:annotation>
            <xs:documentation>Header layout.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="layout" type="SimpleLayoutAttribute">
          <xs:annotation>
            <xs:documentation>Body layout (can be repeated multiple times).</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="customColumnDelimiter" type="xs:string">
          <xs:annotation>
            <xs:documentation>Custom column delimiter value (valid when ColumnDelimiter is set to 'Custom').</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="delimiter" type="NLog.Layouts.CsvColumnDelimiterMode">
          <xs:annotation>
            <xs:documentation>Column delimiter.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="quoteChar" type="xs:string">
          <xs:annotation>
            <xs:documentation>Quote Character.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="quoting" type="NLog.Layouts.CsvQuotingMode">
          <xs:annotation>
            <xs:documentation>Quoting mode.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="withHeader" type="xs:boolean">
          <xs:annotation>
            <xs:documentation>Indicates whether CVS should include header.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:simpleType name="NLog.Layouts.CsvColumnDelimiterMode">
    <xs:restriction base="xs:string">
      <xs:enumeration value="Auto" />
      <xs:enumeration value="Comma" />
      <xs:enumeration value="Semicolon" />
      <xs:enumeration value="Tab" />
      <xs:enumeration value="Pipe" />
      <xs:enumeration value="Space" />
      <xs:enumeration value="Custom" />
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="NLog.Layouts.CsvQuotingMode">
    <xs:restriction base="xs:string">
      <xs:enumeration value="All" />
      <xs:enumeration value="Nothing" />
      <xs:enumeration value="Auto" />
    </xs:restriction>
  </xs:simpleType>
  <xs:complexType name="NLog.Layouts.CsvColumn">
    <xs:choice minOccurs="0" maxOccurs="unbounded">
      <xs:element name="layout" minOccurs="0" maxOccurs="1" type="Layout" />
      <xs:element name="name" minOccurs="0" maxOccurs="1" type="xs:string" />
    </xs:choice>
    <xs:attribute name="layout" type="SimpleLayoutAttribute">
      <xs:annotation>
        <xs:documentation>Layout of the column.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string">
      <xs:annotation>
        <xs:documentation>Name of the column.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="JsonLayout">
    <xs:complexContent>
      <xs:extension base="Layout">
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:element name="attribute" minOccurs="0" maxOccurs="unbounded" type="NLog.Layouts.JsonAttribute" />
          <xs:element name="excludeProperties" minOccurs="0" maxOccurs="1" type="xs:string" />
          <xs:element name="includeAllProperties" minOccurs="0" maxOccurs="1" type="xs:boolean" />
          <xs:element name="includeMdc" minOccurs="0" maxOccurs="1" type="xs:boolean" />
          <xs:element name="renderEmptyObject" minOccurs="0" maxOccurs="1" type="xs:boolean" />
          <xs:element name="suppressSpaces" minOccurs="0" maxOccurs="1" type="xs:boolean" />
          <xs:element name="includeMdlc" minOccurs="0" maxOccurs="1" type="xs:boolean" />
        </xs:choice>
        <xs:attribute name="excludeProperties" type="xs:string">
          <xs:annotation>
            <xs:documentation>List of property names to exclude when  is true</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="includeAllProperties" type="xs:boolean">
          <xs:annotation>
            <xs:documentation>Option to include all properties from the log events</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="includeMdc" type="xs:boolean">
          <xs:annotation>
            <xs:documentation>Indicates whether to include contents of the  dictionary.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="renderEmptyObject" type="xs:boolean">
          <xs:annotation>
            <xs:documentation>Option to render the empty object value {}</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="suppressSpaces" type="xs:boolean">
          <xs:annotation>
            <xs:documentation>Option to suppress the extra spaces in the output json</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="includeMdlc" type="xs:boolean">
          <xs:annotation>
            <xs:documentation>Indicates whether to include contents of the  dictionary.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="NLog.Layouts.JsonAttribute">
    <xs:choice minOccurs="0" maxOccurs="unbounded">
      <xs:element name="encode" minOccurs="0" maxOccurs="1" type="xs:boolean" />
      <xs:element name="escapeUnicode" minOccurs="0" maxOccurs="1" type="xs:boolean" />
      <xs:element name="layout" minOccurs="0" maxOccurs="1" type="Layout" />
      <xs:element name="name" minOccurs="0" maxOccurs="1" type="xs:string" />
    </xs:choice>
    <xs:attribute name="encode" type="xs:boolean">
      <xs:annotation>
        <xs:documentation>Determines wether or not this attribute will be Json encoded.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="escapeUnicode" type="xs:boolean">
      <xs:annotation>
        <xs:documentation>Indicates whether to escape non-ascii characters</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="layout" type="SimpleLayoutAttribute">
      <xs:annotation>
        <xs:documentation>Layout that will be rendered as the attribute's value.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string">
      <xs:annotation>
        <xs:documentation>Name of the attribute.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="LayoutWithHeaderAndFooter">
    <xs:complexContent>
      <xs:extension base="Layout">
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:element name="footer" minOccurs="0" maxOccurs="1" type="Layout" />
          <xs:element name="header" minOccurs="0" maxOccurs="1" type="Layout" />
          <xs:element name="layout" minOccurs="0" maxOccurs="1" type="Layout" />
        </xs:choice>
        <xs:attribute name="footer" type="SimpleLayoutAttribute">
          <xs:annotation>
            <xs:documentation>Footer layout.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="header" type="SimpleLayoutAttribute">
          <xs:annotation>
            <xs:documentation>Header layout.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="layout" type="SimpleLayoutAttribute">
          <xs:annotation>
            <xs:documentation>Body layout (can be repeated multiple times).</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="Log4JXmlEventLayout">
    <xs:complexContent>
      <xs:extension base="Layout">
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:element name="includeAllProperties" minOccurs="0" maxOccurs="1" type="xs:boolean" />
          <xs:element name="includeMdc" minOccurs="0" maxOccurs="1" type="xs:boolean" />
          <xs:element name="includeMdlc" minOccurs="0" maxOccurs="1" type="xs:boolean" />
        </xs:choice>
        <xs:attribute name="includeAllProperties" type="xs:boolean">
          <xs:annotation>
            <xs:documentation>Option to include all properties from the log events</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="includeMdc" type="xs:boolean">
          <xs:annotation>
            <xs:documentation>Indicates whether to include contents of the  dictionary.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="includeMdlc" type="xs:boolean">
          <xs:annotation>
            <xs:documentation>Indicates whether to include contents of the  dictionary.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="SimpleLayout">
    <xs:complexContent>
      <xs:extension base="Layout">
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:element name="text" minOccurs="0" maxOccurs="1" type="xs:string" />
        </xs:choice>
        <xs:attribute name="text" type="xs:string">
          <xs:annotation>
            <xs:documentation>Layout text.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="when">
    <xs:complexContent>
      <xs:extension base="Filter">
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:element name="action" minOccurs="0" maxOccurs="1" type="FilterResult" />
          <xs:element name="condition" minOccurs="0" maxOccurs="1" type="Condition" />
        </xs:choice>
        <xs:attribute name="action" type="FilterResult">
          <xs:annotation>
            <xs:documentation>Action to be taken when filter matches.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="condition" type="Condition">
          <xs:annotation>
            <xs:documentation>Condition expression.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:simpleType name="FilterResult">
    <xs:restriction base="xs:string">
      <xs:enumeration value="Neutral" />
      <xs:enumeration value="Log" />
      <xs:enumeration value="Ignore" />
      <xs:enumeration value="LogFinal" />
      <xs:enumeration value="IgnoreFinal" />
    </xs:restriction>
  </xs:simpleType>
  <xs:complexType name="whenContains">
    <xs:complexContent>
      <xs:extension base="Filter">
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:element name="action" minOccurs="0" maxOccurs="1" type="FilterResult" />
          <xs:element name="ignoreCase" minOccurs="0" maxOccurs="1" type="xs:boolean" />
          <xs:element name="layout" minOccurs="0" maxOccurs="1" type="Layout" />
          <xs:element name="substring" minOccurs="0" maxOccurs="1" type="xs:string" />
        </xs:choice>
        <xs:attribute name="action" type="FilterResult">
          <xs:annotation>
            <xs:documentation>Action to be taken when filter matches.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="ignoreCase" type="xs:boolean">
          <xs:annotation>
            <xs:documentation>Indicates whether to ignore case when comparing strings.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="layout" type="SimpleLayoutAttribute">
          <xs:annotation>
            <xs:documentation>Layout to be used to filter log messages.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="substring" type="xs:string">
          <xs:annotation>
            <xs:documentation>Substring to be matched.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="whenEqual">
    <xs:complexContent>
      <xs:extension base="Filter">
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:element name="action" minOccurs="0" maxOccurs="1" type="FilterResult" />
          <xs:element name="compareTo" minOccurs="0" maxOccurs="1" type="xs:string" />
          <xs:element name="ignoreCase" minOccurs="0" maxOccurs="1" type="xs:boolean" />
          <xs:element name="layout" minOccurs="0" maxOccurs="1" type="Layout" />
        </xs:choice>
        <xs:attribute name="action" type="FilterResult">
          <xs:annotation>
            <xs:documentation>Action to be taken when filter matches.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="compareTo" type="xs:string">
          <xs:annotation>
            <xs:documentation>String to compare the layout to.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="ignoreCase" type="xs:boolean">
          <xs:annotation>
            <xs:documentation>Indicates whether to ignore case when comparing strings.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="layout" type="SimpleLayoutAttribute">
          <xs:annotation>
            <xs:documentation>Layout to be used to filter log messages.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="whenNotContains">
    <xs:complexContent>
      <xs:extension base="Filter">
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:element name="action" minOccurs="0" maxOccurs="1" type="FilterResult" />
          <xs:element name="ignoreCase" minOccurs="0" maxOccurs="1" type="xs:boolean" />
          <xs:element name="layout" minOccurs="0" maxOccurs="1" type="Layout" />
          <xs:element name="substring" minOccurs="0" maxOccurs="1" type="xs:string" />
        </xs:choice>
        <xs:attribute name="action" type="FilterResult">
          <xs:annotation>
            <xs:documentation>Action to be taken when filter matches.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="ignoreCase" type="xs:boolean">
          <xs:annotation>
            <xs:documentation>Indicates whether to ignore case when comparing strings.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="layout" type="SimpleLayoutAttribute">
          <xs:annotation>
            <xs:documentation>Layout to be used to filter log messages.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="substring" type="xs:string">
          <xs:annotation>
            <xs:documentation>Substring to be matched.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="whenNotEqual">
    <xs:complexContent>
      <xs:extension base="Filter">
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:element name="action" minOccurs="0" maxOccurs="1" type="FilterResult" />
          <xs:element name="compareTo" minOccurs="0" maxOccurs="1" type="xs:string" />
          <xs:element name="ignoreCase" minOccurs="0" maxOccurs="1" type="xs:boolean" />
          <xs:element name="layout" minOccurs="0" maxOccurs="1" type="Layout" />
        </xs:choice>
        <xs:attribute name="action" type="FilterResult">
          <xs:annotation>
            <xs:documentation>Action to be taken when filter matches.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="compareTo" type="xs:string">
          <xs:annotation>
            <xs:documentation>String to compare the layout to.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="ignoreCase" type="xs:boolean">
          <xs:annotation>
            <xs:documentation>Indicates whether to ignore case when comparing strings.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="layout" type="SimpleLayoutAttribute">
          <xs:annotation>
            <xs:documentation>Layout to be used to filter log messages.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="AccurateLocal">
    <xs:complexContent>
      <xs:extension base="TimeSource">
        <xs:choice minOccurs="0" maxOccurs="unbounded" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="AccurateUTC">
    <xs:complexContent>
      <xs:extension base="TimeSource">
        <xs:choice minOccurs="0" maxOccurs="unbounded" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="FastLocal">
    <xs:complexContent>
      <xs:extension base="TimeSource">
        <xs:choice minOccurs="0" maxOccurs="unbounded" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="FastUTC">
    <xs:complexContent>
      <xs:extension base="TimeSource">
        <xs:choice minOccurs="0" maxOccurs="unbounded" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
</xs:schema>
```

`\\?\C:\Dev\Projects\YAPA-2-modern\YAPA\packages.config`:

```config
﻿<?xml version="1.0" encoding="utf-8"?>
<packages>
  <package id="Autofac" version="4.1.1" targetFramework="net461" />
  <package id="DeltaCompressionDotNet" version="1.0.0" targetFramework="net461" />
  <package id="GitVersion.MsBuild" version="5.8.1" targetFramework="net461" developmentDependency="true" />
  <package id="LiveCharts" version="0.9.7" targetFramework="net461" />
  <package id="LiveCharts.Wpf" version="0.9.7" targetFramework="net461" />
  <package id="MaterialDesignColors" version="2.0.6" targetFramework="net461" />
  <package id="MaterialDesignThemes" version="4.5.0" targetFramework="net461" />
  <package id="Microsoft.AspNetCore.Hosting.Abstractions" version="1.1.0" targetFramework="net461" />
  <package id="Microsoft.AspNetCore.Hosting.Server.Abstractions" version="1.1.0" targetFramework="net461" />
  <package id="Microsoft.AspNetCore.Http.Abstractions" version="1.1.0" targetFramework="net461" />
  <package id="Microsoft.AspNetCore.Http.Features" version="1.1.0" targetFramework="net461" />
  <package id="Microsoft.Data.Sqlite" version="1.1.0" targetFramework="net461" />
  <package id="Microsoft.EntityFrameworkCore" version="1.1.0" targetFramework="net461" />
  <package id="Microsoft.EntityFrameworkCore.Design" version="1.1.0" targetFramework="net461" />
  <package id="Microsoft.EntityFrameworkCore.Relational" version="1.1.0" targetFramework="net461" />
  <package id="Microsoft.EntityFrameworkCore.Relational.Design" version="1.1.0" targetFramework="net461" />
  <package id="Microsoft.EntityFrameworkCore.Sqlite" version="1.1.0" targetFramework="net461" />
  <package id="Microsoft.EntityFrameworkCore.Tools" version="1.1.0-preview4-final" targetFramework="net461" developmentDependency="true" />
  <package id="Microsoft.Extensions.Caching.Abstractions" version="1.1.0" targetFramework="net461" />
  <package id="Microsoft.Extensions.Caching.Memory" version="1.1.0" targetFramework="net461" />
  <package id="Microsoft.Extensions.Configuration.Abstractions" version="1.1.0" targetFramework="net461" />
  <package id="Microsoft.Extensions.DependencyInjection" version="1.1.0" targetFramework="net461" />
  <package id="Microsoft.Extensions.DependencyInjection.Abstractions" version="1.1.0" targetFramework="net461" />
  <package id="Microsoft.Extensions.FileProviders.Abstractions" version="1.1.0" targetFramework="net461" />
  <package id="Microsoft.Extensions.Logging" version="1.1.0" targetFramework="net461" />
  <package id="Microsoft.Extensions.Logging.Abstractions" version="1.1.0" targetFramework="net461" />
  <package id="Microsoft.Extensions.Options" version="1.1.0" targetFramework="net461" />
  <package id="Microsoft.Extensions.Primitives" version="1.1.0" targetFramework="net461" />
  <package id="Microsoft.NETCore.Platforms" version="1.1.0" targetFramework="net461" />
  <package id="Microsoft.SqlServer.Compact" version="4.0.8854.1" targetFramework="net461" />
  <package id="Microsoft.Win32.Primitives" version="4.3.0" targetFramework="net461" />
  <package id="Mono.Cecil" version="0.9.6.1" targetFramework="net461" />
  <package id="NETStandard.Library" version="1.6.1" targetFramework="net461" />
  <package id="Newtonsoft.Json" version="10.0.3" targetFramework="net461" />
  <package id="NLog" version="4.4.10" targetFramework="net461" />
  <package id="NLog.Config" version="4.4.10" targetFramework="net461" />
  <package id="NLog.Schema" version="4.4.10" targetFramework="net461" />
  <package id="Remotion.Linq" version="2.1.1" targetFramework="net461" />
  <package id="SimpleFeedReader" version="1.0.7" targetFramework="net461" />
  <package id="Splat" version="1.6.2" targetFramework="net461" />
  <package id="SQLite" version="3.13.0" targetFramework="net461" />
  <package id="squirrel.windows" version="1.5.28" targetFramework="net461" />
  <package id="System.AppContext" version="4.3.0" targetFramework="net461" />
  <package id="System.Collections" version="4.3.0" targetFramework="net461" />
  <package id="System.Collections.Concurrent" version="4.3.0" targetFramework="net461" />
  <package id="System.Collections.Immutable" version="1.3.0" targetFramework="net461" />
  <package id="System.ComponentModel" version="4.3.0" targetFramework="net461" />
  <package id="System.Console" version="4.3.0" targetFramework="net461" />
  <package id="System.Diagnostics.Debug" version="4.3.0" targetFramework="net461" />
  <package id="System.Diagnostics.DiagnosticSource" version="4.3.0" targetFramework="net461" />
  <package id="System.Diagnostics.Tools" version="4.3.0" targetFramework="net461" />
  <package id="System.Diagnostics.Tracing" version="4.3.0" targetFramework="net461" />
  <package id="System.Globalization" version="4.3.0" targetFramework="net461" />
  <package id="System.Globalization.Calendars" version="4.3.0" targetFramework="net461" />
  <package id="System.Interactive.Async" version="3.0.0" targetFramework="net461" />
  <package id="System.IO" version="4.3.0" targetFramework="net461" />
  <package id="System.IO.Compression" version="4.3.0" targetFramework="net461" />
  <package id="System.IO.Compression.ZipFile" version="4.3.0" targetFramework="net461" />
  <package id="System.IO.FileSystem" version="4.3.0" targetFramework="net461" />
  <package id="System.IO.FileSystem.Primitives" version="4.3.0" targetFramework="net461" />
  <package id="System.Linq" version="4.3.0" targetFramework="net461" />
  <package id="System.Linq.Expressions" version="4.3.0" targetFramework="net461" />
  <package id="System.Linq.Queryable" version="4.0.1" targetFramework="net461" />
  <package id="System.Net.Http" version="4.3.4" targetFramework="net461" />
  <package id="System.Net.Primitives" version="4.3.0" targetFramework="net461" />
  <package id="System.Net.Sockets" version="4.3.0" targetFramework="net461" />
  <package id="System.ObjectModel" version="4.3.0" targetFramework="net461" />
  <package id="System.Reflection" version="4.3.0" targetFramework="net461" />
  <package id="System.Reflection.Extensions" version="4.3.0" targetFramework="net461" />
  <package id="System.Reflection.Primitives" version="4.3.0" targetFramework="net461" />
  <package id="System.Resources.ResourceManager" version="4.3.0" targetFramework="net461" />
  <package id="System.Runtime" version="4.3.0" targetFramework="net461" />
  <package id="System.Runtime.CompilerServices.Unsafe" version="4.5.3" targetFramework="net461" />
  <package id="System.Runtime.Extensions" version="4.3.0" targetFramework="net461" />
  <package id="System.Runtime.Handles" version="4.3.0" targetFramework="net461" />
  <package id="System.Runtime.InteropServices" version="4.3.0" targetFramework="net461" />
  <package id="System.Runtime.InteropServices.RuntimeInformation" version="4.3.0" targetFramework="net461" />
  <package id="System.Runtime.InteropServices.WindowsRuntime" version="4.3.0" targetFramework="net461" />
  <package id="System.Runtime.Numerics" version="4.3.0" targetFramework="net461" />
  <package id="System.Security.Cryptography.Algorithms" version="4.3.0" targetFramework="net461" />
  <package id="System.Security.Cryptography.Encoding" version="4.3.0" targetFramework="net461" />
  <package id="System.Security.Cryptography.Primitives" version="4.3.0" targetFramework="net461" />
  <package id="System.Security.Cryptography.X509Certificates" version="4.3.0" targetFramework="net461" />
  <package id="System.Text.Encoding" version="4.3.0" targetFramework="net461" />
  <package id="System.Text.Encoding.Extensions" version="4.3.0" targetFramework="net461" />
  <package id="System.Text.Encodings.Web" version="4.5.1" targetFramework="net461" />
  <package id="System.Text.RegularExpressions" version="4.3.1" targetFramework="net461" />
  <package id="System.Threading" version="4.3.0" targetFramework="net461" />
  <package id="System.Threading.Tasks" version="4.3.0" targetFramework="net461" />
  <package id="System.Threading.Tasks.Extensions" version="4.5.4" targetFramework="net461" />
  <package id="System.Threading.Timer" version="4.3.0" targetFramework="net461" />
  <package id="System.Xml.ReaderWriter" version="4.3.0" targetFramework="net461" />
  <package id="System.Xml.XDocument" version="4.3.0" targetFramework="net461" />
  <package id="UtilPack.NuGet.MSBuild" version="2.9.1" targetFramework="net461" developmentDependency="true" />
  <package id="WpfAnimatedGif" version="1.4.4" targetFramework="net461" />
</packages>
```

`\\?\C:\Dev\Projects\YAPA-2-modern\YAPA\Plugins\Dashboard\DashboardPluginMeta.cs`:

```cs
﻿using System;
using YAPA.Shared.Common;
using YAPA.Shared.Contracts;
using YAPA.WPF;

namespace YAPA.Plugins.Dashboard
{
    [BuiltInPlugin(Order = 1)]
    public class DashboardPlugin : IPluginMeta
    {
        public string Title => "Dashboard";
        public string Id => "Dashboard";

        public Type Plugin => typeof(Shared.Common.Dashboard);

        public Type Settings => typeof(DashboardSettings);

        public Type SettingEditWindow => typeof(GithubDashboard);
    }
}

```

`\\?\C:\Dev\Projects\YAPA-2-modern\YAPA\Plugins\Dashboard\GithubDashboard.xaml`:

```xaml
﻿<UserControl x:Class="YAPA.Plugins.Dashboard.GithubDashboard"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:gif="http://wpfanimatedgif.codeplex.com"
             xmlns:wpf="clr-namespace:LiveCharts.Wpf;assembly=LiveCharts.Wpf"
             xmlns:materialDesign="http://materialdesigninxaml.net/winfx/xaml/themes"
             mc:Ignorable="d" 
             d:DesignHeight="300" d:DesignWidth="300">
    <Grid>
        <StackPanel>
            <StackPanel Orientation="Horizontal" Margin="0,10,0,0" HorizontalAlignment="Center" VerticalAlignment="Top" Height="110" x:Name="LoadingPanel" Visibility="Visible">
                <Image gif:ImageBehavior.AnimatedSource="../../Resources/loader.gif" Stretch="None" HorizontalAlignment="Center" VerticalAlignment="Center" />
            </StackPanel>
            <StackPanel Orientation="Horizontal" HorizontalAlignment="Center">
                <ComboBox x:Name="FilteredProfiles"
                          MinWidth="200"
                          Margin="16 0 0 10"
                          materialDesign:HintAssist.FloatingScale="1.2"
                          materialDesign:HintAssist.Hint="Profile"
                          materialDesign:TextFieldAssist.HasClearButton="True"
                          Style="{DynamicResource MaterialDesignFloatingHintComboBox}"
                          IsEditable="True"
>
                    <ComboBox.Text>
                        <Binding Path="settings.ProfileFilter" Mode="TwoWay" UpdateSourceTrigger="PropertyChanged">
                        </Binding>
                    </ComboBox.Text>
                    <ComboBox.ItemsPanel>
                        <ItemsPanelTemplate >
                            <VirtualizingStackPanel />
                        </ItemsPanelTemplate>
                    </ComboBox.ItemsPanel>
                </ComboBox>
                
                <ComboBox x:Name="NumberOfMonths"
                          MinWidth="200"
                          Margin="16 0 0 10"
                          materialDesign:HintAssist.Hint="Number of months"
                          materialDesign:HintAssist.FloatingScale="1.2"
                          Style="{DynamicResource MaterialDesignFloatingHintComboBox}"
                          IsEditable="True"
>
                    <ComboBox.Text>
                        <Binding Path="settings.NumberOfMonths" Mode="TwoWay" UpdateSourceTrigger="PropertyChanged">
                        </Binding>
                    </ComboBox.Text>
                    <ComboBox.ItemsPanel>
                        <ItemsPanelTemplate >
                            <VirtualizingStackPanel />
                        </ItemsPanelTemplate>
                    </ComboBox.ItemsPanel>
                </ComboBox>
            </StackPanel>

            <StackPanel Orientation="Horizontal" Margin="0,10,0,0" HorizontalAlignment="Center" VerticalAlignment="Top" Height="120" x:Name="DayPanel" Visibility="Collapsed">
                <StackPanel Orientation="Vertical" Margin="0,15,0,0" Width="20">
                    <TextBlock Height="11"  Margin="0,-1,0,12" FontSize="10" VerticalAlignment="Top" Text="Mon" x:Name="MondayTextBlock"></TextBlock>
                    <TextBlock Height="11"  Margin="0,0,0,12" FontSize="10" VerticalAlignment="Top" Text="Wen"></TextBlock>
                    <TextBlock Height="11"  Margin="0,0,0,1" FontSize="10" VerticalAlignment="Top" Text="Fri"></TextBlock>
                </StackPanel>

                <ScrollViewer VerticalScrollBarVisibility="Hidden" HorizontalScrollBarVisibility="Auto" Width="500">
                    <StackPanel Orientation="Horizontal"  x:Name="WeekStackPanel">

                    </StackPanel>
                </ScrollViewer>
            </StackPanel>


            <StackPanel HorizontalAlignment="Center" Orientation="Horizontal">
                <TextBlock x:Name="Summary"></TextBlock>
            </StackPanel>
            <Separator Margin="0,10,0,10"/>

            <StackPanel Height="140" x:Name="CartesianContainer" >
                <StackPanel HorizontalAlignment="Center" Orientation="Horizontal">
                    <TextBlock FontWeight="Bold" x:Name="CartesianChartTitle"></TextBlock>
                </StackPanel>
                <wpf:CartesianChart x:Name="CartesianChart"  Series="{Binding CompletedPomodoros}" MinHeight="130">
                    <wpf:CartesianChart.AxisY>
                        <wpf:Axis Title="Total time" x:Name="AxisYLabels" MinValue="0"></wpf:Axis>
                    </wpf:CartesianChart.AxisY>
                    <wpf:CartesianChart.AxisX>
                        <wpf:Axis Title="Day" x:Name="ChartLabels" Labels="{Binding Labels}"></wpf:Axis>
                    </wpf:CartesianChart.AxisX>
                </wpf:CartesianChart>
            </StackPanel>

        </StackPanel>
    </Grid>
</UserControl>

```

`\\?\C:\Dev\Projects\YAPA-2-modern\YAPA\Plugins\Dashboard\GithubDashboard.xaml.cs`:

```cs
﻿using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Windows;
using LiveCharts;
using LiveCharts.Wpf;
using YAPA.Shared.Common;
using YAPA.Shared.Contracts;
using YAPA.WPF;

namespace YAPA.Plugins.Dashboard
{
    public partial class GithubDashboard : IPluginSettingWindow
    {
        private Shared.Common.Dashboard _dashboard;
        private readonly ISettings _globalSettings;
        private const int MaxNumberOfMonths = 13;

        public DashboardSettings settings { get; }

        public GithubDashboard(Shared.Common.Dashboard dashboard, DashboardSettings settings, ISettings globalSettings)
        {
            _dashboard = dashboard;
            this.settings = settings;
            _globalSettings = globalSettings;
            InitializeComponent();

            DataContext = this;

            CartesianChart.DataHover += Chart_DataHover;

            for (int i = 1; i < MaxNumberOfMonths; i++)
            {
                NumberOfMonths.Items.Add(i);
            }

            _globalSettings.PropertyChanged += _globalSettings_PropertyChanged;
        }

        private void _globalSettings_PropertyChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e)
        {
            if (e.PropertyName.StartsWith($"{nameof(Shared.Common.Dashboard)}.{nameof(DashboardSettings.NumberOfMonths)}"))
            {
                FilteredProfiles.Items.Clear();
                settings.ProfileFilter = null;
                Refresh();

            }

            if (e.PropertyName.StartsWith($"{nameof(Shared.Common.Dashboard)}.{nameof(DashboardSettings.ProfileFilter)}"))
            {
                Refresh();
            }
        }

        ~GithubDashboard()
        {
            _dashboard = null;
        }

        private void Chart_DataHover(object sender, ChartPoint chartPoint)
        {
            //TODO: highlight grid dashboard cell
        }

        private static PomodoroLevelEnum GetLevelFromCount(int count, int maxCount)
        {
            if (count == 0)
            {
                return PomodoroLevelEnum.Level0;
            }
            if (maxCount <= 4)
            {
                return PomodoroLevelEnum.Level4;
            }

            var level = (double)count / maxCount;

            var displayLevel = PomodoroLevelEnum.Level4;

            if (level < 0.25)
            {
                displayLevel = PomodoroLevelEnum.Level1;
            }
            else if (level < 0.50)
            {
                displayLevel = PomodoroLevelEnum.Level2;
            }
            else if (level < 0.75)
            {
                displayLevel = PomodoroLevelEnum.Level3;
            }

            return displayLevel;
        }

        public void Refresh()
        {
            Console.WriteLine("Refresh 1");
            Refresh(settings.NumberOfMonths, settings.ProfileFilter);
        }

        public void Refresh(int numberOfMonths, string profileFilter)
        {
            //Task.Run(() =>
            //{
                Console.WriteLine("refresh");
                var pomodoros = GetPomodoros(numberOfMonths, profileFilter);
                if (pomodoros?.Any() == false)
                {
                    return;
                }

                UpdateCompletedSummary(pomodoros);

                UpdateGithubDashboard(pomodoros);

                UpdateCartesianChart(pomodoros);
            //});
        }

        private void UpdateGithubDashboard(IEnumerable<PomodorosPerTimeModel> pomodoros)
        {
            var max = pomodoros.Max(_ => _.Pomodoro.Count);

            Dispatcher.Invoke(() =>
            {
                WeekStackPanel.Children.Clear();
            });

            foreach (var pomodoro in pomodoros.GroupBy(_ => new { _.Month, _.Year }))
            {
                var month = pomodoro.Select(_ => _.Pomodoro.ToPomodoroViewModel(_.Week, GetLevelFromCount(_.Pomodoro.Count, max)));
                Dispatcher.Invoke(() =>
                {
                    WeekStackPanel.Children.Add(new PomodoroMonth(month));
                });
            }
            Dispatcher.Invoke(() =>
            {
                var weekShift = DayOfWeek.Monday - CultureInfo.CurrentCulture.DateTimeFormat.FirstDayOfWeek;
                MondayTextBlock.Margin = new Thickness(0, 12 * weekShift - 1, 0, 12);

                DayPanel.Visibility = Visibility.Visible;
                LoadingPanel.Visibility = Visibility.Collapsed;
            });
        }

        private void UpdateCompletedSummary(IEnumerable<PomodorosPerTimeModel> pomodoros)
        {
            var count = pomodoros.Sum(_ => _.Pomodoro.Count);
            var totalTime = pomodoros.Sum(_ => _.Pomodoro.DurationMin);
            Dispatcher.Invoke(() =>
            {
                if (count > 0)
                {
                    var multiple = count > 1 ? "s" : "";
                    Summary.Text = $"Total time: {TimeSpan.FromMinutes(totalTime)}, Pomodoro{multiple}: {count}";
                }
            });
        }

        private IEnumerable<PomodorosPerTimeModel> GetPomodoros(int numberOfMonths, string profileFilter)
        {
            var dfi = DateTimeFormatInfo.CurrentInfo;
            var cal = dfi?.Calendar;

            if (cal == null)
            {
                return Enumerable.Empty<PomodorosPerTimeModel>();
            }

            var allPomodoros = _dashboard.GetPomodoros(numberOfMonths, profileFilter);

            if (FilteredProfiles.Items.Count == 0)
            {
                Dispatcher.Invoke(() =>
                {
                    foreach (var item in allPomodoros.Profiles)
                    {
                        FilteredProfiles.Items.Add(item);
                    }
                });
            }

            var pomodoros = allPomodoros.DashboardItems.ToList()
                   .Select(
                       _ =>
                           new PomodorosPerTimeModel
                           {
                               Week = cal.GetWeekOfYear(_.DateTime, CalendarWeekRule.FirstFullWeek, dfi.FirstDayOfWeek),
                               Month = cal.GetMonth(_.DateTime),
                               Year = cal.GetYear(_.DateTime),
                               Pomodoro = _,
                           })
                   .ToList();

            return pomodoros;
        }

        private void UpdateCartesianChart(IEnumerable<PomodorosPerTimeModel> pomodoros)
        {
            const int daysToShow = 60;
            var seriesCollection = new SeriesCollection();

            var lastPomodoros = pomodoros.Skip(pomodoros.Count() - daysToShow).ToList();

            if (lastPomodoros.Any(_ => _.Pomodoro.DurationMin / 60.0 > 0.01))
            {
                Dispatcher.Invoke(() =>
                {
                    seriesCollection.Add(
                            new LineSeries
                            {
                                Title = "Total time",
                                Values = new ChartValues<double>(lastPomodoros.Select(_ => (double)_.Pomodoro.DurationMin))
                            });

                    CartesianChart.Series = seriesCollection;
                    CartesianChartTitle.Text = $"Last {daysToShow} days";
                    AxisYLabels.LabelFormatter = x => TimeSpan.FromMinutes(x).ToString("g");
                    ChartLabels.Labels =
                    lastPomodoros.Select(_ => _.Pomodoro.DateTime.ToShortDateString()).ToArray();
                });
            }
            else
            {
                Dispatcher.Invoke(() =>
                {
                    CartesianContainer.Visibility = Visibility.Collapsed;
                });
            }
        }
    }
}

```

`\\?\C:\Dev\Projects\YAPA-2-modern\YAPA\Plugins\Dashboard\ItemRepository.cs`:

```cs
﻿using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using Microsoft.EntityFrameworkCore;
using YAPA.Shared.Contracts;
using YAPA.WPF;

namespace YAPA.Plugins.Dashboard
{
    public class ItemRepository : IPomodoroRepository
    {
        private readonly DatabaseContext _context;

        public ItemRepository()
        {
            _context = new DatabaseContext(Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments), "YAPA2", "Yapa.db"));
            _context.Database.Migrate();
        }

        public void Delete(int id)
        {
            lock (_context)
            {
                var existing = _context.Pomodoros.FirstOrDefault(x => x.Id == id);

                if (existing != null)
                {
                    _context.Pomodoros.Remove(existing);
                    _context.SaveChanges();
                }
            }
        }

        public int CompletedToday()
        {
            lock (_context)
            {
                var startDate = DateTime.Now.Date;
                var endDate = startDate.AddDays(1).AddSeconds(-1);
                return _context.Pomodoros
                    .Where(pomodoro => startDate <= pomodoro.DateTime && pomodoro.DateTime <= endDate)
                    .Select(_ => _.Count)
                    .DefaultIfEmpty(0)
                    .Sum();
            }
        }

        public void Add(PomodoroEntity pomodoroEntity)
        {
            lock (_context)
            {
                _context.Pomodoros.Add(pomodoroEntity);
                _context.SaveChanges();
            }
        }

        public IEnumerable<PomodoroEntity> After(DateTime date)
        {
            lock (_context)
            {
                return _context.Pomodoros.Where(x => x.DateTime >= date).ToList();
            }
        }
    }

    public enum PomodoroLevelEnum
    {
        Level0 = 0,
        Level1 = 1,
        Level2 = 2,
        Level3 = 3,
        Level4 = 4,
    }
}

```

`\\?\C:\Dev\Projects\YAPA-2-modern\YAPA\Plugins\Dashboard\PomodoroMonth.xaml`:

```xaml
﻿<UserControl x:Class="YAPA.Plugins.Dashboard.PomodoroMonth"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:local="clr-namespace:YAPA.Plugins.Dashboard"
             mc:Ignorable="d" 
             d:DesignHeight="300" d:DesignWidth="300">
    <Grid Margin="0,0,5,0">
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"></RowDefinition>
            <RowDefinition Height="*"></RowDefinition>
        </Grid.RowDefinitions>

        <TextBlock Margin="4,0,0,0" Grid.Row="0"  x:Name="MonthName"></TextBlock>
        <StackPanel Grid.Row="1" x:Name="PomodorWeeks" Orientation="Horizontal" HorizontalAlignment="Left"></StackPanel>
    </Grid>
</UserControl>

```

`\\?\C:\Dev\Projects\YAPA-2-modern\YAPA\Plugins\Dashboard\PomodoroMonth.xaml.cs`:

```cs
﻿using System.Collections.Generic;
using System.Linq;
using YAPA.WPF;

namespace YAPA.Plugins.Dashboard
{
    public partial class PomodoroMonth
    {
        private readonly IEnumerable<PomodoroViewModel> _month;
        public PomodoroMonth(IEnumerable<PomodoroViewModel> month = null)
        {
            _month = month;
            Loaded += PomodoroMonth_Loaded;
            InitializeComponent();
        }

        private void PomodoroMonth_Loaded(object sender, System.Windows.RoutedEventArgs e)
        {
            if (_month == null)
            {
                return;
            }

            MonthName.Text = _month.First().DateTime.ToString("MMMM");

            var weeks = _month.GroupBy(x => x.Week).ToList();
            foreach (var week in weeks)
            {
                PomodorWeeks.Children.Add(new PomodoroWeek(week));
            }

            PomodorWeeks.Width = weeks.Count * 13;
        }

        ~PomodoroMonth()
        {
            Dispatcher.InvokeAsync(() =>
            {
                try
                {
                    PomodorWeeks.Children.Clear();
                }
                catch { }
            });
        }
    }
}

```

`\\?\C:\Dev\Projects\YAPA-2-modern\YAPA\Plugins\Dashboard\PomodorosPerTimeModel.cs`:

```cs
﻿using YAPA.Shared.Contracts;

namespace YAPA.Plugins.Dashboard
{
    public class PomodorosPerTimeModel
    {
        public PomodoroGithubDashboardModel Pomodoro { get; set; }
        public int Year { get; set; }
        public int Month { get; set; }
        public int Week { get; set; }
    }
}

```

`\\?\C:\Dev\Projects\YAPA-2-modern\YAPA\Plugins\Dashboard\PomodoroWeek.xaml`:

```xaml
﻿<UserControl x:Class="YAPA.Plugins.Dashboard.PomodoroWeek"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             mc:Ignorable="d" 
             Height="100"
             Width="13"
             d:DesignHeight="300" d:DesignWidth="13">
    <Grid>
        <StackPanel Orientation="Vertical" x:Name="PomodorPanel">

        </StackPanel>
    </Grid>
</UserControl>

```

`\\?\C:\Dev\Projects\YAPA-2-modern\YAPA\Plugins\Dashboard\PomodoroWeek.xaml.cs`:

```cs
﻿using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Documents;
using System.Windows.Media;
using System.Windows.Shapes;
using YAPA.WPF;

namespace YAPA.Plugins.Dashboard
{
    public static class LevelBrushes
    {
        public static Brush Level0 { get; }
        public static Brush Level1 { get; }
        public static Brush Level2 { get; }
        public static Brush Level3 { get; }
        public static Brush Level4 { get; }

        static LevelBrushes()
        {
            var converter = new BrushConverter();
            Level0 = (Brush)converter.ConvertFromString("#eee");
            Level1 = (Brush)converter.ConvertFromString("#d6e685");
            Level2 = (Brush)converter.ConvertFromString("#8cc665");
            Level3 = (Brush)converter.ConvertFromString("#44a340");
            Level4 = (Brush)converter.ConvertFromString("#1e6823");
        }
    }

    public partial class PomodoroWeek
    {
        private static Brush GreenFill(PomodoroLevelEnum level)
        {
            Brush fill = Brushes.Transparent;
            switch (level)
            {
                case PomodoroLevelEnum.Level0:
                    fill = LevelBrushes.Level0;
                    break;
                case PomodoroLevelEnum.Level1:
                    fill = LevelBrushes.Level1;
                    break;
                case PomodoroLevelEnum.Level2:
                    fill = LevelBrushes.Level2;
                    break;
                case PomodoroLevelEnum.Level3:
                    fill = LevelBrushes.Level3;
                    break;
                case PomodoroLevelEnum.Level4:
                    fill = LevelBrushes.Level4;
                    break;
            }
            return fill;
        }

        public PomodoroWeek(IEnumerable<PomodoroViewModel> week = null)
        {
            InitializeComponent();

            if (week == null)
            {
                return;
            }

            var pomodoroViewModels = week as PomodoroViewModel[] ?? week.ToArray();

            var firstDayOfWeek = System.Threading.Thread.CurrentThread.CurrentCulture.DateTimeFormat.FirstDayOfWeek;
            var maxDate = pomodoroViewModels.Max(x => x.DateTime);
            var minDate = pomodoroViewModels.Min(x => x.DateTime);
            var daysToAdd = 0;

            var dfi = DateTimeFormatInfo.CurrentInfo;
            var cal = dfi?.Calendar;

            if (cal == null)
            {
                return;
            }

            if (cal.GetDayOfWeek(minDate) == firstDayOfWeek)
            {
                //do nothing, this is start of the week
            }
            else if (cal.GetDayOfWeek(maxDate.AddDays(1)) != firstDayOfWeek)
            {
                //this is not the start of the week and not the end of the week
                var daysTillStartOfWeek = 0;
                while (cal.GetDayOfWeek(maxDate.AddDays(1)) != firstDayOfWeek)
                {
                    maxDate = maxDate.AddDays(1);
                    daysTillStartOfWeek++;
                }
                daysToAdd = 7 - pomodoroViewModels.Length - daysTillStartOfWeek;
            }
            else if (cal.GetDayOfWeek(maxDate.AddDays(1)) == firstDayOfWeek)
            {
                daysToAdd = 7 - pomodoroViewModels.Length;
            }

            for (var i = 0; i < daysToAdd; i++)
            {
                var green = new Rectangle
                {
                    Width = 11,
                    Height = 11,
                    Fill = Brushes.Transparent,
                    Margin = new Thickness(0, 0, 0, 1)
                };
                PomodorPanel.Children.Add(green);
            }

            foreach (var pomodoroViewModel in pomodoroViewModels)
            {
                var green = new Rectangle
                {
                    Width = 11,
                    Height = 11,
                    Margin = new Thickness(0, 0, 0, 1),
                    Fill = GreenFill(pomodoroViewModel.Level)
                };

                var toolTip = new ToolTip();
                var pomodoros = new TextBlock();
                pomodoros.Inlines.Add(new Bold(new Run(pomodoroViewModel.Count == 0 ? "No pomodoros" : $"{pomodoroViewModel.Count} pomodoros")));
                pomodoros.Inlines.Add(new Run($" on {pomodoroViewModel.DateTime:yyyy-MM-dd}"));
                toolTip.Content = pomodoros;

                green.ToolTip = toolTip;

                PomodorPanel.Children.Add(green);
            }

            PomodorPanel.Margin = new Thickness(1, 0, 0, 0);
        }

        ~PomodoroWeek()
        {
            Dispatcher.InvokeAsync(() =>
            {
                try
                {
                    PomodorPanel.Children.Clear();
                }
                catch
                {
                }
            });
        }

    }
}

```

`\\?\C:\Dev\Projects\YAPA-2-modern\YAPA\Plugins\MinimizeToTray\MinimizeToTraySettingWindow.xaml`:

```xaml
﻿<UserControl x:Class="YAPA.Plugins.MinimizeToTray.MinimizeToTraySettingWindow"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:xctk="http://schemas.xceed.com/wpf/xaml/toolkit"
             xmlns:materialDesign="http://materialdesigninxaml.net/winfx/xaml/themes"
             mc:Ignorable="d" 
             d:DesignHeight="300" d:DesignWidth="300"
             >
    <Grid>
        <Grid>
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto"></RowDefinition>
                <RowDefinition Height="Auto"></RowDefinition>
                <RowDefinition Height="Auto"></RowDefinition>
                <RowDefinition Height="Auto"></RowDefinition>
                <RowDefinition Height="Auto"></RowDefinition>
                <RowDefinition Height="Auto"></RowDefinition>
                <RowDefinition Height="Auto"></RowDefinition>
                <RowDefinition Height="Auto"></RowDefinition>
                <RowDefinition Height="Auto"></RowDefinition>
            </Grid.RowDefinitions>

            <Grid.ColumnDefinitions>
                <ColumnDefinition></ColumnDefinition>
                <ColumnDefinition></ColumnDefinition>
            </Grid.ColumnDefinitions>

            <CheckBox  IsChecked="{Binding MinimizeToTray, Mode=TwoWay}" Grid.Row="0" Grid.Column="0" Grid.ColumnSpan="2" >Minimize to tray</CheckBox>
            <CheckBox  IsChecked="{Binding ShowInTaskbar, Mode=TwoWay}" Grid.Row="1" Grid.Column="0" Grid.ColumnSpan="2">Show in taskbar</CheckBox>

            <Separator Margin="0,10,0,10" Grid.Column="0" Grid.Row="2" Grid.ColumnSpan="2"></Separator>

            <CheckBox IsChecked="{Binding ShowBalloonTipWhenInSystemTray, Mode=TwoWay}" Grid.Row="3" Grid.Column="0" Grid.ColumnSpan="2">Show balloon tip when in system tray</CheckBox>
            <CheckBox IsChecked="{Binding ShowApplicationOnBalloonTipClick, Mode=TwoWay}" Grid.Row="4" Grid.Column="0" Grid.ColumnSpan="2">Show application when clicked on balloon tip</CheckBox>
            <Label Grid.Row="5" Grid.Column="0">Show balloon tip for (s)</Label>
            <ComboBox materialDesign:HintAssist.Hint="(editable)" x:Name="BalloonTipSelect"
                      Grid.Row="5" Grid.Column="1" MinWidth="72"
                      IsEnabled="{Binding ShowBalloonTipWhenInSystemTray}"
                      Margin="16 0 0 0"
                      VerticalAlignment="Bottom" 
                      IsEditable="True">
                <ComboBox.Text>
                    <Binding Path="TimeToDisplayBalloontip" Mode="TwoWay" UpdateSourceTrigger="PropertyChanged">
                    </Binding>
                </ComboBox.Text>
                <ComboBox.ItemsPanel>
                    <ItemsPanelTemplate>
                        <VirtualizingStackPanel />
                    </ItemsPanelTemplate>
                </ComboBox.ItemsPanel>
            </ComboBox>

            <Separator Margin="0,10,0,10" Grid.Column="0" Grid.Row="6" Grid.ColumnSpan="2"></Separator>
            
            <TextBlock Text="Work icon color" Grid.Column="0" Grid.Row="7"></TextBlock>
            <xctk:ColorPicker  x:Name="WorkTrayColor"
                      Grid.Column="1" Grid.Row="7"  MinWidth="72"
                      Margin="16 0 0 0" SelectedColor="{Binding WorkTrayIconColor}">
            </xctk:ColorPicker>

            <TextBlock Text="Break icon color" Grid.Column="0" Grid.Row="8"></TextBlock>
            <xctk:ColorPicker x:Name="BreakTrayColor"
                               Grid.Column="1" Grid.Row="8" MinWidth="72"
                               Margin="16 0 0 0" SelectedColor="{Binding BreakTrayIconColor}">
            </xctk:ColorPicker>
        </Grid>
    </Grid>
</UserControl>

```

`\\?\C:\Dev\Projects\YAPA-2-modern\YAPA\Plugins\MinimizeToTray\MinimizeToTraySettingWindow.xaml.cs`:

```cs
﻿using System.Linq;

namespace YAPA.Plugins.MinimizeToTray
{
    public partial class MinimizeToTraySettingWindow
    {
        public MinimizeToTraySettingWindow(SystemTraySettings settings)
        {
            settings.DeferChanges();
            InitializeComponent();
            DataContext = settings;

            BalloonTipSelect.ItemsSource = Enumerable.Range(1, 60);
        }
    }
}

```

`\\?\C:\Dev\Projects\YAPA-2-modern\YAPA\Plugins\MinimizeToTray\SystemTray.cs`:

```cs
using System;
using System.Collections.Generic;
using System.Drawing;
using System.IO;
using System.Linq;
using System.Runtime.InteropServices;
using System.Windows.Forms;
using System.Windows.Input;
using System.Windows.Media;
using YAPA.Shared.Contracts;
using YAPA.WPF.Shared.Shared;

namespace YAPA.Plugins.MinimizeToTray
{
    public class SystemTrayPlugin : IPluginMeta
    {
        public string Title => "System tray";
        public string Id => "SystemTray";

        public Type Plugin => typeof(SystemTray);

        public Type Settings => typeof(SystemTraySettings);

        public Type SettingEditWindow => typeof(MinimizeToTraySettingWindow);
    }

    public class SystemTray : IPlugin
    {
        [DllImport("user32.dll", CharSet = CharSet.Auto)]
        internal static extern bool DestroyIcon(IntPtr handle);

        private readonly NotifyIcon _sysTrayIcon;
        private IntPtr _systemTrayIcon;

        private readonly IApplication _app;
        private readonly IMainViewModel _viewModel;
        private readonly SystemTraySettings _settings;

        public SystemTray(IApplication app, IMainViewModel viewModel, SystemTraySettings settings, ISettings globalSettings)
        {
            _app = app;
            _viewModel = viewModel;
            _settings = settings;

            globalSettings.PropertyChanged += _globalSettings_PropertyChanged;

            _app.StateChanged += _app_StateChanged;

            _sysTrayIcon = new NotifyIcon
            {
                Text = @"YAPA 2",
                Icon = new Icon(Path.Combine(AppDomain.CurrentDomain.BaseDirectory, @"Resources\pomoTray.ico"), 40, 40),
                Visible = SystemTrayVisible()
            };

            _sysTrayIcon.DoubleClick += SysTrayIcon_DoubleClick;

            _viewModel.Engine.PropertyChanged += _engine_PropertyChanged;

            _sysTrayIcon.ContextMenu = new ContextMenu(CreateNotifyIconContextMenu());
            _sysTrayIcon.ContextMenu.Popup += ContextMenu_Popup;
            _sysTrayIcon.BalloonTipClicked += _sysTrayIcon_BalloonTipClicked;

            _app.Closing += () => _sysTrayIcon.Dispose();
        }

        private void _sysTrayIcon_BalloonTipClicked(object sender, EventArgs e)
        {
            if (_settings.ShowApplicationOnBalloonTipClick)
            {
                _app.Show();
                _app.AppState = ApplicationState.Normal;
            }
        }

        private bool SystemTrayVisible()
        {
            return _settings.ShowInTaskbar == false || (_settings.MinimizeToTray && _app.AppState == ApplicationState.Minimized);
        }

        private void ContextMenu_Popup(object sender, EventArgs e)
        {
            _sysTrayIcon.ContextMenu.MenuItems.Clear();
            _sysTrayIcon.ContextMenu.MenuItems.AddRange(CreateNotifyIconContextMenu());
        }

        private void _globalSettings_PropertyChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e)
        {
            if (e.PropertyName == $"{nameof(SystemTray)}.{nameof(_settings.ShowInTaskbar)}")
            {
                _app.ShowInTaskbar = _settings.ShowInTaskbar;
            }

            if (e.PropertyName.StartsWith($"{nameof(SystemTray)}"))
            {
                _sysTrayIcon.Visible = SystemTrayVisible();
            }
        }

        private void _engine_PropertyChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e)
        {
            if (e.PropertyName == nameof(_viewModel.Engine.Elapsed))
            {
                UpdateIcon();
            }
            else if (e.PropertyName == nameof(_viewModel.Engine.Phase))
            {
                if (_sysTrayIcon.Visible == false || _settings.ShowBalloonTipWhenInSystemTray == false)
                {
                    return;
                }

                var phase = _viewModel.Engine.Phase;

                var workEndedMessage = "Work interval ended.";
                var breakEndedMessage = "Break interval ended.";

                var workStartingMessage = $"Starting {_viewModel.Engine.WorkTime / 60}min work interval.";
                var breakStartingMessage = $"Starting {_viewModel.Engine.BreakTime / 60}min break interval.";

                var messageToShow = string.Empty;

                switch (phase)
                {
                    case PomodoroPhase.Work:
                        messageToShow = workStartingMessage;
                        break;
                    case PomodoroPhase.WorkEnded:
                        messageToShow = workEndedMessage;
                        break;
                    case PomodoroPhase.Break:
                        messageToShow = breakStartingMessage;
                        break;
                    case PomodoroPhase.BreakEnded:
                        messageToShow = breakEndedMessage;
                        break;
                }


                if (!string.IsNullOrEmpty(messageToShow))
                {
                    _sysTrayIcon.ShowBalloonTip(_settings.TimeToDisplayBalloontip, "YAPA 2", messageToShow, ToolTipIcon.None);
                }
            }
        }

        private MenuItem[] CreateNotifyIconContextMenu()
        {
            var commands = new List<Tuple<string, ICommand>>
            {
                new Tuple<string, ICommand>("Start",_viewModel.StartCommand),
                new Tuple<string, ICommand>("Pause",_viewModel.PauseCommand),
                new Tuple<string, ICommand>("Stop",_viewModel.StopCommand),
                new Tuple<string, ICommand>("Skip",_viewModel.SkipCommand),
                new Tuple<string, ICommand>("Reset session",_viewModel.ResetCommand),
                new Tuple<string, ICommand>("Settings",_viewModel.ShowSettingsCommand),
            };

            var menuItems = commands.Select(x =>
            {
                var command = x.Item2;

                var item = new MenuItem
                {
                    Text = x.Item1,
                    Enabled = command.CanExecute(null)
                };
                item.Click += (sender, args) =>
                {
                    if (command.CanExecute(null))
                    {
                        command.Execute(null);
                    }
                };
                return item;
            });

            var close = new MenuItem
            {
                Text = @"Exit"
            };
            close.Click += (o, s) =>
            {
                _app.CloseApp();
            };

            return menuItems.Union(new List<MenuItem> { close }).ToArray();
        }

        private void _app_StateChanged(ApplicationState state)
        {
            if (state == ApplicationState.Minimized && (_settings.MinimizeToTray || _settings.ShowInTaskbar == false))
            {
                _app.Hide();
                _sysTrayIcon.Visible = true;
            }

            if (state != ApplicationState.Minimized)
            {
                _app.ShowInTaskbar = _settings.ShowInTaskbar;
            }
        }

        private void SysTrayIcon_DoubleClick(object sender, EventArgs e)
        {
            _app.Show();
            _app.AppState = ApplicationState.Normal;
        }

        //http://blogs.msdn.com/b/abhinaba/archive/2005/09/12/animation-and-text-in-system-tray-using-c.aspx
        private void UpdateIcon()
        {
            System.Windows.Media.Color textColor;

            if (_viewModel.Engine.Phase == PomodoroPhase.Break || _viewModel.Engine.Phase == PomodoroPhase.BreakEnded)
            {
                textColor = _settings.BreakTrayIconColor;
            }
            else
            {
                textColor = _settings.WorkTrayIconColor;
            }

            if (_systemTrayIcon != IntPtr.Zero)
            {
                DestroyIcon(_systemTrayIcon);
            }

            var minutes = _viewModel.Engine.DisplayValue / 60;
            var seconds = _viewModel.Engine.DisplayValue % 60;
            var displayText = minutes == 0 && seconds > 0 ? "<1" : minutes.ToString();

            System.Drawing.Brush brush = new SolidBrush(System.Drawing.Color.FromArgb(textColor.A, textColor.R, textColor.G, textColor.B));

            var bitmap = new Bitmap(16, 16);
            var graphics = Graphics.FromImage(bitmap);
            graphics.DrawString(displayText, new Font("Microsoft Sans Serif", 8.25f, FontStyle.Bold), brush, 0, 0);

            _systemTrayIcon = bitmap.GetHicon();

            var icon = Icon.FromHandle(_systemTrayIcon);
            _sysTrayIcon.Icon = icon;
        }
    }

    public class SystemTraySettings : IPluginSettings
    {
        private readonly ISettingsForComponent _settings;

        public System.Windows.Media.Color WorkTrayIconColor
        {
            get
            {
                var color = _settings.Get(nameof(WorkTrayIconColor), "DarkGreen");
                return YapaHelpers.ColorFromString(color, Colors.DarkGreen);
            }
            set => _settings.Update(nameof(WorkTrayIconColor), value);
        }

        public System.Windows.Media.Color BreakTrayIconColor
        {
            get
            {
                var color = _settings.Get(nameof(BreakTrayIconColor), "DarkRed");
                return YapaHelpers.ColorFromString(color, Colors.DarkRed);
            }
            set => _settings.Update(nameof(BreakTrayIconColor), value);
        }

        public bool ShowInTaskbar
        {
            get => _settings.Get(nameof(ShowInTaskbar), true);
            set => _settings.Update(nameof(ShowInTaskbar), value);
        }

        public bool MinimizeToTray
        {
            get => _settings.Get(nameof(MinimizeToTray), true);
            set => _settings.Update(nameof(MinimizeToTray), value);
        }

        public bool ShowBalloonTipWhenInSystemTray
        {
            get => _settings.Get(nameof(ShowBalloonTipWhenInSystemTray), true);
            set => _settings.Update(nameof(ShowBalloonTipWhenInSystemTray), value);
        }

        public bool ShowApplicationOnBalloonTipClick
        {
            get => _settings.Get(nameof(ShowApplicationOnBalloonTipClick), false);
            set => _settings.Update(nameof(ShowApplicationOnBalloonTipClick), value);
        }

        public int TimeToDisplayBalloontip
        {
            get => _settings.Get(nameof(TimeToDisplayBalloontip), 10);
            set => _settings.Update(nameof(TimeToDisplayBalloontip), value);
        }

        public SystemTraySettings(ISettings settings)
        {
            _settings = settings.GetSettingsForComponent(new SystemTrayPlugin().Id);

        }

        public void DeferChanges()
        {
            _settings.DeferChanges();
        }
    }
}

```

`\\?\C:\Dev\Projects\YAPA-2-modern\YAPA\Plugins\PomodoroEngine\CreatePomodoroProfile.xaml`:

```xaml
﻿<Window x:Class="YAPA.Plugins.PomodoroEngine.CreatePomodoroProfile"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"       
        xmlns:materialDesign="http://materialdesigninxaml.net/winfx/xaml/themes"
        mc:Ignorable="d"
        Title="Pomodoro profile name" Height="100" Width="250"
        WindowStyle="ToolWindow"
        ResizeMode="NoResize">
    <Window.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.Light.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.Defaults.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MaterialDesignColors;component/Themes/Recommended/Primary/MaterialDesignColor.DeepPurple.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MaterialDesignColors;component/Themes/Recommended/Accent/MaterialDesignColor.Lime.xaml" />
            </ResourceDictionary.MergedDictionaries>
        </ResourceDictionary>
    </Window.Resources>
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="*"></RowDefinition>
            <RowDefinition Height="Auto"></RowDefinition>
        </Grid.RowDefinitions>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="Auto"></ColumnDefinition>
            <ColumnDefinition Width="*"></ColumnDefinition>
        </Grid.ColumnDefinitions>
        <TextBlock Text="Profile name:"  Grid.Row="0" Grid.Column="0" VerticalAlignment="Center"></TextBlock>
        <TextBox Grid.Row="0" Grid.Column="1" x:Name="ProfileName"></TextBox>
        <StackPanel  Grid.Row="1" Grid.Column="1" Orientation="Horizontal" HorizontalAlignment="Right">
            <Button x:Name="Save" Grid.Row="1" Grid.Column="1" Content="Save" Click="Save_Click" Margin="2" Style="{DynamicResource MaterialDesignFlatButton}"></Button>
            <Button x:Name="Cancel" Grid.Row="1" Grid.Column="1" Content="Cancel" Click="Cancel_Click" Margin="2" Style="{DynamicResource MaterialDesignFlatButton}"></Button>
        </StackPanel>

    </Grid>
</Window>

```

`\\?\C:\Dev\Projects\YAPA-2-modern\YAPA\Plugins\PomodoroEngine\CreatePomodoroProfile.xaml.cs`:

```cs
﻿using System.Collections.Generic;
using System.Linq;
using System.Windows;

namespace YAPA.Plugins.PomodoroEngine
{
    public partial class CreatePomodoroProfile
    {
        public CreatePomodoroProfile(List<string> invalidNames)
        {
            InitializeComponent();
            InvalidNames = invalidNames;
            Closing += CreatePomodoroProfile_Closing;
        }

        private void CreatePomodoroProfile_Closing(object sender, System.ComponentModel.CancelEventArgs e)
        {
            if (!_saved)
            {
                SelectedName = null;
            }
        }

        private List<string> InvalidNames { get; }
        public string SelectedName { get; private set; }
        private bool _saved;

        private void Cancel_Click(object sender, RoutedEventArgs e)
        {
            SelectedName = null;
            _saved = false;
            Close();
        }

        private void Save_Click(object sender, RoutedEventArgs e)
        {
            SelectedName = ProfileName.Text;
            var isInvalidName = InvalidNames.Any(x => x.Equals(SelectedName, System.StringComparison.InvariantCultureIgnoreCase));

            if (isInvalidName)
            {
                MessageBox.Show("Profile name already in use.", "Unable to create profile", MessageBoxButton.OK);
            }
            else
            {
                _saved = true;
                Close();
            }
        }
    }
}

```

`\\?\C:\Dev\Projects\YAPA-2-modern\YAPA\Plugins\PomodoroEngine\PomodoroEnginePluginMeta.cs`:

```cs
﻿using System;
using YAPA.Shared.Contracts;
using YAPA.WPF;

namespace YAPA.Plugins.PomodoroEngine
{
    [BuiltInPlugin(Order = 2)]
    public class PomodoroEnginePlugin : IPluginMeta
    {
        public string Title => "General";
        public string Id => "PomodoroEngine";

        public Type Plugin => null;

        public Type Settings => null;

        public Type SettingEditWindow => typeof(PomodoroEngineSettingWindow);
    }

}

```

`\\?\C:\Dev\Projects\YAPA-2-modern\YAPA\Plugins\PomodoroEngine\PomodoroEngineSettingWindow.xaml`:

```xaml
﻿<UserControl x:Class="YAPA.Plugins.PomodoroEngine.PomodoroEngineSettingWindow"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:pomodoroEngine="clr-namespace:YAPA.Plugins.PomodoroEngine"
             xmlns:materialDesign="http://materialdesigninxaml.net/winfx/xaml/themes"
            mc:Ignorable="d" 
             d:DesignHeight="200" d:DesignWidth="400">
    <UserControl.Resources>
        <pomodoroEngine:StringToFontFamily x:Key="StringToFontFamily" />

        <DataTemplate x:Key="ListBoxTaskTemplate">
            <Grid>
                <Grid.RowDefinitions>
                    <RowDefinition/>
                    <RowDefinition/>
                </Grid.RowDefinitions>

                <TextBlock Grid.Row="0" Text="{Binding Key}"/>
                <TextBlock Grid.Row="1"  Text="1234567890" FontFamily="{Binding Value, Converter={StaticResource StringToFontFamily}}"
                           FontSize="24"/>
            </Grid>
        </DataTemplate>
    </UserControl.Resources>
    <Grid>
        <Grid>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*"></ColumnDefinition>
                <ColumnDefinition Width="2*"></ColumnDefinition>
                <ColumnDefinition Width="*"></ColumnDefinition>
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto"></RowDefinition>
                <RowDefinition Height="Auto"></RowDefinition>
                <RowDefinition Height="Auto"></RowDefinition>
                <RowDefinition Height="Auto"></RowDefinition>
                <RowDefinition Height="Auto"></RowDefinition>
                <RowDefinition Height="Auto"></RowDefinition>
                <RowDefinition Height="Auto"></RowDefinition>
                <RowDefinition Height="Auto"></RowDefinition>
                <RowDefinition Height="Auto"></RowDefinition>
                <RowDefinition Height="Auto"></RowDefinition>
                <RowDefinition Height="Auto"></RowDefinition>
            </Grid.RowDefinitions>

            <StackPanel  Grid.Row="0" Grid.Column="0" Grid.ColumnSpan="3" x:Name="ProfileSetting">

            </StackPanel>

            <Separator  Margin="0,10,0,10" Grid.Column="0" Grid.ColumnSpan="3" Grid.Row="5" ></Separator>

            <CheckBox  IsChecked="{Binding Settings.CountBackwards, Mode=TwoWay}" Grid.Column="0" Grid.ColumnSpan="2" Grid.Row="6" >Count backwards</CheckBox>

            <TextBlock Text="Display count of" Grid.Column="0" Grid.Row="7"></TextBlock>
            <ComboBox x:Name="CounterList"
                      Grid.Column="1" Grid.Row="7" MinWidth="72"
                      Margin="16 0 0 0"
                      VerticalAlignment="Bottom" 
                      IsEditable="True"
                      DisplayMemberPath="Title"
                      SelectedValuePath="Item"
                      SelectedValue="{Binding Settings.Counter}"
                      >
                <ComboBox.ItemsPanel>
                    <ItemsPanelTemplate>
                        <VirtualizingStackPanel />
                    </ItemsPanelTemplate>
                </ComboBox.ItemsPanel>
            </ComboBox>

            <Separator Margin="0,10,0,10" Grid.Column="0" Grid.ColumnSpan="3" Grid.Row="8" ></Separator>


            <TextBlock Text="Font" Grid.Column="0" Grid.Row="9"></TextBlock>
            <ComboBox materialDesign:HintAssist.Hint="" x:Name="FontSelector"
                         Grid.Column="1" Grid.Row="9"  MinWidth="72"
                          Margin="16 0 0 0"
                          VerticalAlignment="Bottom" 
                          IsEditable="False"
                          SelectedValuePath="Key"
                            SelectedValue="{Binding Settings.FontFamily, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" 
                          ItemTemplate="{StaticResource ListBoxTaskTemplate}">
                <ComboBox.ItemsPanel>
                    <ItemsPanelTemplate >
                        <VirtualizingStackPanel />
                    </ItemsPanelTemplate>
                </ComboBox.ItemsPanel>
            </ComboBox>
        </Grid>
    </Grid>
</UserControl>

```

`\\?\C:\Dev\Projects\YAPA-2-modern\YAPA\Plugins\PomodoroEngine\PomodoroEngineSettingWindow.xaml.cs`:

```cs
﻿using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Globalization;
using System.IO;
using System.Windows.Data;
using System.Windows.Media;
using YAPA.Shared.Common;
using YAPA.Shared.Contracts;
using System.Linq;

namespace YAPA.Plugins.PomodoroEngine
{
    public partial class PomodoroEngineSettingWindow
    {
        private readonly ISettingManager _settingManager;
        private readonly IFontService _fontService;

        public PomodoroEngineSettingWindow(PomodoroEngineSettings settings, IPomodoroEngine engine, PomodoroProfileSettings profileSettings, ISettings globalSettings, ISettingManager settingManager, IFontService fontService)
        {
            settings.DeferChanges();
            InitializeComponent();

            _settingManager = settingManager;
            _fontService = fontService;
            var counterValues = new List<CounterListItem>
            {
                new CounterListItem{ Item = CounterEnum.CompletedThisSession, Title = "Completed this session"},
                new CounterListItem{ Item = CounterEnum.CompletedToday, Title = "Competed today"},
                new CounterListItem{ Item = CounterEnum.PomodoroIndex, Title = "Pomodoro index"},
            };

            CounterList.ItemsSource = counterValues;

            Settings = settings;
            Engine = engine;
            DataContext = this;

            ProfileSetting.Children.Clear();
            ProfileSetting.Children.Add(profileSettings);

            FontSelector.ItemsSource = _fontService.GetAllFonts();
        }

        public PomodoroEngineSettings Settings { get; }
        public IPomodoroEngine Engine { get; }
    }

    public class CounterListItem
    {
        public CounterEnum Item { get; set; }
        public string Title { get; set; }
    }

    public class SecondsToMinutesConverter : IValueConverter
    {
        public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
        {
            var seconds = (int)(value ?? 60);
            return seconds / 60;
        }

        public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
        {
            if (!int.TryParse(value?.ToString(), out var seconds))
            {
                seconds = 1;
            }

            return seconds * 60;
        }
    }

    public class InverseBoolean : IValueConverter
    {
        public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
        {
            return value != null && !(bool)value;
        }

        public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
        {
            return value != null && !(bool)value;
        }
    }

    public class StringToFontFamily : IValueConverter
    {
        public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
        {
            var fontName = value?.ToString();
            if (!string.IsNullOrEmpty(fontName))
            {
                var font = new FontFamily(fontName);
                return font;
            }
            return new FontFamily();

        }

        public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
        {
            return string.Empty;
        }
    }

}

```

`\\?\C:\Dev\Projects\YAPA-2-modern\YAPA\Plugins\PomodoroEngine\PomodoroProfileSettings.xaml`:

```xaml
﻿<UserControl x:Class="YAPA.Plugins.PomodoroEngine.PomodoroProfileSettings"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:materialDesign="http://materialdesigninxaml.net/winfx/xaml/themes"
             xmlns:pomodoroEngine="clr-namespace:YAPA.Plugins.PomodoroEngine"
             mc:Ignorable="d" 
             d:DesignHeight="300" d:DesignWidth="300">
    <UserControl.Resources>
        <pomodoroEngine:SecondsToMinutesConverter x:Key="SecToMinConverter" />
        <pomodoroEngine:InverseBoolean x:Key="InverseBooleanConverter" />
    </UserControl.Resources>
    <Grid>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="*"></ColumnDefinition>
            <ColumnDefinition Width="2*"></ColumnDefinition>
            <ColumnDefinition Width="*"></ColumnDefinition>
        </Grid.ColumnDefinitions>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"></RowDefinition>
            <RowDefinition Height="Auto"></RowDefinition>
            <RowDefinition Height="Auto"></RowDefinition>
            <RowDefinition Height="Auto"></RowDefinition>
            <RowDefinition Height="Auto"></RowDefinition>
            <RowDefinition Height="Auto"></RowDefinition>
            <RowDefinition Height="Auto"></RowDefinition>
            <RowDefinition Height="Auto"></RowDefinition>
            <RowDefinition Height="Auto"></RowDefinition>
        </Grid.RowDefinitions>

        <TextBlock Text="Active profile" Grid.Column="0" Grid.Row="0"></TextBlock>
        <ComboBox  x:Name="ActiveProfileSelect"
                         Grid.Column="1" Grid.Row="0"  MinWidth="72"
                          Margin="16 0 0 0"
                          VerticalAlignment="Bottom" 
                          IsEnabled="{Binding Engine.IsRunning, Converter={StaticResource InverseBooleanConverter}}"
                          SelectedItem="{Binding Settings.ActiveProfile, Mode=OneWay}" 
                         >
        </ComboBox>


        <Button Grid.Column="2" Grid.Row="0" Margin="5,1,5,1" Content="Remove" Click="RemoveProfile_Click" x:Name="RemoveButton" IsEnabled="{Binding Engine.IsRunning, Converter={StaticResource InverseBooleanConverter}}"></Button>
        <Button Grid.Column="2" Grid.Row="1" Margin="5,1,5,1" Content="Add" Click="AddProfile_Click" x:Name="AddButton" IsEnabled="{Binding Engine.IsRunning, Converter={StaticResource InverseBooleanConverter}}"></Button>

        <TextBlock Text="Work time" Grid.Column="0" Grid.Row="1"></TextBlock>
        <ComboBox materialDesign:HintAssist.Hint="" x:Name="WorkTimeSelect"
                         Grid.Column="1" Grid.Row="1"  MinWidth="72"
                          Margin="16 0 0 0"
                          VerticalAlignment="Bottom" 
                          IsEditable="True"
>
            <ComboBox.Text>
                <Binding Path="Settings.WorkTime" Mode="TwoWay" UpdateSourceTrigger="PropertyChanged" Converter="{StaticResource SecToMinConverter}">
                </Binding>
            </ComboBox.Text>
            <ComboBox.ItemsPanel>
                <ItemsPanelTemplate >
                    <VirtualizingStackPanel />
                </ItemsPanelTemplate>
            </ComboBox.ItemsPanel>
        </ComboBox>

        <TextBlock Text="Break time" Grid.Column="0" Grid.Row="2" ></TextBlock>
        <ComboBox materialDesign:HintAssist.Hint="(editable)" x:Name="BreakTimeSelect"
                         Grid.Column="1" Grid.Row="2"  MinWidth="72"
                          Margin="16 0 0 0"
                          VerticalAlignment="Bottom" 
                          IsEditable="True">
            <ComboBox.Text>
                <Binding Path="Settings.BreakTime" Mode="TwoWay" UpdateSourceTrigger="PropertyChanged" Converter="{StaticResource SecToMinConverter}">
                </Binding>
            </ComboBox.Text>
            <ComboBox.ItemsPanel>
                <ItemsPanelTemplate>
                    <VirtualizingStackPanel />
                </ItemsPanelTemplate>
            </ComboBox.ItemsPanel>
        </ComboBox>

        <TextBlock Text="Session rounds" Grid.Column="0" Grid.Row="3"></TextBlock>
        <ComboBox materialDesign:HintAssist.Hint="(editable)" x:Name="SessionRounds"
                         Grid.Column="1" Grid.Row="3"  MinWidth="72"
                          Margin="16 0 0 0"
                          VerticalAlignment="Bottom" 
                          IsEditable="True">
            <ComboBox.Text>
                <Binding Path="Settings.PomodorosBeforeLongBreak" Mode="TwoWay" UpdateSourceTrigger="PropertyChanged">
                </Binding>
            </ComboBox.Text>
            <ComboBox.ItemsPanel>
                <ItemsPanelTemplate>
                    <VirtualizingStackPanel />
                </ItemsPanelTemplate>
            </ComboBox.ItemsPanel>
        </ComboBox>
        
        <TextBlock Text="Long break time" Grid.Column="0" Grid.Row="4"></TextBlock>
        <ComboBox materialDesign:HintAssist.Hint="(editable)" x:Name="LongBreakTimeSelect"
                         Grid.Column="1" Grid.Row="4"  MinWidth="72"
                          Margin="16 0 0 0"
                          VerticalAlignment="Bottom" 
                          IsEditable="True">
            <ComboBox.Text>
                <Binding Path="Settings.LongBreakTime" Mode="TwoWay" UpdateSourceTrigger="PropertyChanged" Converter="{StaticResource SecToMinConverter}">
                </Binding>
            </ComboBox.Text>
            <ComboBox.ItemsPanel>
                <ItemsPanelTemplate>
                    <VirtualizingStackPanel />
                </ItemsPanelTemplate>
            </ComboBox.ItemsPanel>
        </ComboBox>

        <CheckBox x:Name="AutoStartBreak" IsChecked="{Binding Settings.AutoStartBreak, Mode=TwoWay}" Grid.Column="0" Grid.ColumnSpan="4" Grid.Row="5" >Auto start break</CheckBox>
        <CheckBox x:Name="AutoStartWork" IsChecked="{Binding Settings.AutoStartWork, Mode=TwoWay}" Grid.Column="0" Grid.ColumnSpan="4" Grid.Row="6" >Auto start work</CheckBox>

    </Grid>
</UserControl>

```

`\\?\C:\Dev\Projects\YAPA-2-modern\YAPA\Plugins\PomodoroEngine\PomodoroProfileSettings.xaml.cs`:

```cs
﻿using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Controls.Primitives;
using YAPA.Shared.Common;
using YAPA.Shared.Contracts;

namespace YAPA.Plugins.PomodoroEngine
{
    public partial class PomodoroProfileSettings : INotifyPropertyChanged
    {
        public ObservableCollection<string> Profiles { get; set; } = new ObservableCollection<string>();
        public PomodoroEngineSettings Settings { get; }
        public IPomodoroEngine Engine { get; }

        public PomodoroProfileSettings(PomodoroEngineSettings settings, IPomodoroEngine engine)
        {
            settings.DeferChanges();

            InitializeComponent();
            var oneHour = Enumerable.Range(1, 60).Reverse().ToList();
            WorkTimeSelect.ItemsSource = oneHour;
            BreakTimeSelect.ItemsSource = oneHour;
            LongBreakTimeSelect.ItemsSource = oneHour;
            SessionRounds.ItemsSource = Enumerable.Range(2, 10).ToList();
            Settings = settings;
            Engine = engine;

            Engine.PropertyChanged += Engine_PropertyChanged;

            Unloaded += PomodoroProfileSettings_Unloaded;
            DataContext = this;
            ActiveProfileSelect.ItemsSource = Profiles;
            ActiveProfileSelect.SelectionChanged += ActiveProfile_SelectectionChanged;
            RefreshProfilesList();
        }

        private void PomodoroProfileSettings_Unloaded(object sender, RoutedEventArgs e)
        {
            Engine.PropertyChanged -= Engine_PropertyChanged;
        }

        private void Engine_PropertyChanged(object sender, PropertyChangedEventArgs e)
        {
            if (e.PropertyName == nameof(Engine.Phase))
            {
                RemoveButton.IsEnabled = Profiles.Count > 1 && !Engine.IsRunning;
            }
        }

        private void RefreshProfilesList()
        {
            Profiles.Clear();
            foreach (var item in Settings.Profiles.Select(x => x.Key).ToList())
            {
                Profiles.Add(item);
            }
            NotifyPropertyChanged(nameof(Profiles));

            RemoveButton.IsEnabled = Profiles.Count > 1 && !Engine.IsRunning;
        }

        public event PropertyChangedEventHandler PropertyChanged;

        private void NotifyPropertyChanged([CallerMemberName] string name = "")
        {
            PropertyChanged?.Invoke(name, new PropertyChangedEventArgs(name));
        }

        private void ActiveProfile_SelectectionChanged(object sender, RoutedEventArgs e)
        {
            var selected = (string)((ComboBox)sender).SelectedItem;
            if (string.IsNullOrEmpty(selected))
            {
                return;
            }
            Settings.ActiveProfile = (string)((ComboBox)sender).SelectedItem;

            RefreshProfileProperties();
        }

        private void RefreshProfileProperties()
        {
            ActiveProfileSelect.GetBindingExpression(Selector.SelectedItemProperty)?.UpdateTarget();
            WorkTimeSelect.GetBindingExpression(ComboBox.TextProperty)?.UpdateTarget();
            BreakTimeSelect.GetBindingExpression(ComboBox.TextProperty)?.UpdateTarget();
            LongBreakTimeSelect.GetBindingExpression(ComboBox.TextProperty)?.UpdateTarget();
            AutoStartBreak.GetBindingExpression(ToggleButton.IsCheckedProperty)?.UpdateTarget();
        }

        private void RemoveProfile_Click(object sender, RoutedEventArgs e)
        {
            var profiles = Settings.Profiles;
            profiles.Remove(Settings.ActiveProfile);
            Settings.ActiveProfile = profiles.First().Key;

            Settings.Profiles = profiles;

            RefreshProfilesList();

            RefreshProfileProperties();
        }

        private void AddProfile_Click(object sender, RoutedEventArgs e)
        {
            var newProfile = new PomodoroProfile { BreakTime = 5 * 60, WorkTime = 25 * 60, LongBreakTime = 15 * 60 };

            var createWindow = new CreatePomodoroProfile(Settings.Profiles.Select(x => x.Key).ToList());

            var parent = Window.GetWindow(this);
            if (parent != null)
            {
                createWindow.Left = parent.Left + parent.Width / 2.5;
                createWindow.Top = parent.Top + parent.Height / 2.5;
            }
            createWindow.Topmost = true;
            createWindow.ShowDialog();
            if (string.IsNullOrEmpty(createWindow.SelectedName))
            {
                return;
            }

            var profileName = createWindow.SelectedName;
            var profiles = Settings.Profiles;
            profiles.Add(profileName, newProfile);

            Settings.Profiles = profiles;
            Settings.ActiveProfile = profileName;

            RefreshProfilesList();

            RefreshProfileProperties();
        }
    }
}

```

`\\?\C:\Dev\Projects\YAPA-2-modern\YAPA\Plugins\ReleaseNotes\ReleaseNotesPlugin.cs`:

```cs
﻿using System;
using System.Reflection;
using YAPA.Plugins.SaveApplicationPossitionOnScreen;
using YAPA.Shared.Contracts;
using YAPA.WPF;

namespace YAPA.Plugins.ReleaseNotes
{
    [BuiltInPlugin(Hide = true)]
    public class ReleaseNotesPlugin : IPluginMeta
    {
        public string Title => "Release notes";

        public string Id => "ReleaseNotes";

        public Type Plugin => typeof(ReleaseNotes);

        public Type Settings => typeof(ReleaseNotesSettings);

        public Type SettingEditWindow => null;
    }

    public class ReleaseNotes : IPlugin
    {
        private readonly IEnvironment _environment;
        private readonly ReleaseNotesSettings _settings;
        private readonly IApplication _application;
        private readonly SaveApplicationPositionOnScreenSettings _positionSettings;

        public ReleaseNotes(IEnvironment environment, ReleaseNotesSettings settings, IApplication application, SaveApplicationPositionOnScreenSettings positionSettings)
        {
            _environment = environment;
            _settings = settings;
            _application = application;
            _positionSettings = positionSettings;
            ShowUpdateWindow();
        }

        private void ShowUpdateWindow()
        {
            var assembly = Assembly.GetExecutingAssembly();

            var currentVersion = assembly.GetName().Version.ToString(3);

            var showDialog = !string.IsNullOrEmpty(_settings.Version)
                && currentVersion != _settings.Version
                && _settings.ShowNotification;

            _settings.Version = currentVersion;

            if (showDialog)
            {
                var window = new ReleaseNotesWindow(_settings, _positionSettings, _environment.PreRelease());

                window.Show();
            }
        }
    }

    public class ReleaseNotesSettings : IPluginSettings
    {
        private readonly ISettingsForComponent _settings;

        public ReleaseNotesSettings(ISettings settings)
        {
            _settings = settings.GetSettingsForComponent(new ReleaseNotesPlugin().Id);
        }

        public string Version
        {
            get => _settings.Get<string>(nameof(Version), null);
            set => _settings.Update(nameof(Version), value);
        }

        public bool ShowNotification
        {
            get => _settings.Get<bool>(nameof(ShowNotification), true);
            set => _settings.Update(nameof(ShowNotification), value);
        }

        public void DeferChanges()
        {
            _settings.DeferChanges();
        }
    }
}

```

`\\?\C:\Dev\Projects\YAPA-2-modern\YAPA\Plugins\ReleaseNotes\ReleaseNotesWindow.xaml`:

```xaml
﻿<Window x:Class="YAPA.Plugins.ReleaseNotes.ReleaseNotesWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:YAPA.Plugins.ReleaseNotes"
        mc:Ignorable="d"
        Title="YAPA 2 updated!" Height="150" Width="400"
        ResizeMode="NoResize" Topmost="True">
    <Grid  Margin="5">
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"></RowDefinition>
            <RowDefinition Height="*"></RowDefinition>
            <RowDefinition Height="Auto"></RowDefinition>
        </Grid.RowDefinitions>

        <TextBlock TextWrapping="Wrap">Application has been updated to the latest version. Click link below to check changes.</TextBlock>

        <TextBlock Grid.Row="1" HorizontalAlignment="Center">           
            <Hyperlink NavigateUri="" RequestNavigate="Hyperlink_RequestNavigate">
                Changelog
            </Hyperlink>
        </TextBlock>

        <Grid  Grid.Row="2">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto"></ColumnDefinition>
                <ColumnDefinition Width="*"></ColumnDefinition>
                <ColumnDefinition Width="Auto"></ColumnDefinition>
            </Grid.ColumnDefinitions>
            <CheckBox Grid.Column="0" IsChecked="{Binding ReleaseNotesSettings.ShowNotification, Mode=TwoWay}">Show update notifications</CheckBox>
            <Button Grid.Column="2" Style="{DynamicResource MaterialDesignFlatButton}" Click="Ok_Click" Grid.Row="2">Ok</Button>
        </Grid>
    </Grid>
</Window>

```

`\\?\C:\Dev\Projects\YAPA-2-modern\YAPA\Plugins\ReleaseNotes\ReleaseNotesWindow.xaml.cs`:

```cs
﻿using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Interop;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;
using YAPA.Plugins.SaveApplicationPossitionOnScreen;
using YAPA.Shared.Contracts;

namespace YAPA.Plugins.ReleaseNotes
{
    /// <summary>
    /// Interaction logic for ReleaseNotesWindow.xaml
    /// </summary>
    public partial class ReleaseNotesWindow : Window
    {
        public ReleaseNotesSettings ReleaseNotesSettings { get; }
        private string releaseNotes = "https://github.com/YetAnotherPomodoroApp/YAPA-2/releases/latest";
        private string preReleaseNotes = "https://github.com/YetAnotherPomodoroApp/YAPA-2/compare/pre-release";
        private readonly SaveApplicationPositionOnScreenSettings _positionSettings;
        private readonly bool _preRelease;

        public ReleaseNotesWindow(ReleaseNotesSettings releaseNotesSettings, SaveApplicationPossitionOnScreen.SaveApplicationPositionOnScreenSettings _positionSettings, bool preRelease)
        {
            InitializeComponent();

            ReleaseNotesSettings = releaseNotesSettings;
            this._positionSettings = _positionSettings;
            _preRelease = preRelease;

            DataContext = this;

            Loaded += ReleaseNotesWindow_Loaded;
        }

        private void ReleaseNotesWindow_Loaded(object sender, RoutedEventArgs e)
        {
            try
            {
                var originalHeigh = Height;
                var originalWidth = Width;
                WindowPlacement.SetPlacement(new WindowInteropHelper(this).Handle, _positionSettings.Position);
                Height = originalHeigh;
                Width = originalWidth;
            }
            catch
            {
            }
        }

        private void Ok_Click(object sender, RoutedEventArgs e)
        {
            this.Close();
        }

        private void Hyperlink_RequestNavigate(object sender, RequestNavigateEventArgs e)
        {
            // for .NET Core you need to add UseShellExecute = true
            // see https://learn.microsoft.com/dotnet/api/system.diagnostics.processstartinfo.useshellexecute#property-value
            Process.Start(new ProcessStartInfo(_preRelease ? preReleaseNotes : releaseNotes));
            e.Handled = true;
        }
    }
}

```

`\\?\C:\Dev\Projects\YAPA-2-modern\YAPA\Plugins\SaveApplicationPossitionOnScreen\SaveApplicationPositionOnScreen.cs`:

```cs
﻿using NLog;
using System;
using YAPA.Shared.Contracts;
using YAPA.WPF;

namespace YAPA.Plugins.SaveApplicationPossitionOnScreen
{
    [BuiltInPlugin(Hide = true)]
    public class SaveApplicationPositionOnScreenPlugin : IPluginMeta
    {
        public string Title => "Save application position on screen";
        public string Id => "SaveApplicationPositionOnScreen";

        public Type Plugin => typeof(SaveApplicationPositionOnScreen);

        public Type Settings => typeof(SaveApplicationPositionOnScreenSettings);

        public Type SettingEditWindow => null;
    }

    public class SaveApplicationPositionOnScreen : IPlugin
    {
        private readonly IApplication _app;
        private readonly SaveApplicationPositionOnScreenSettings _settings;
        private readonly ILogger _logger;

        public SaveApplicationPositionOnScreen(IApplication app,
            SaveApplicationPositionOnScreenSettings settings,
            ILogger logger)
        {
            _app = app;
            _settings = settings;
            _logger = logger;
            _app.Closing += App_Closing;
            _app.Loaded += App_Loaded;
        }

        private void App_Loaded()
        {
            try
            {
                WindowPlacement.SetPlacement(_app.WindowHandle, _settings.Position);
            }
            catch (Exception ex)
            {
                _logger.Error(ex, "Unable to restore application position ");
            }
        }

        private void App_Closing()
        {
            try
            {
                var currentPosition = WindowPlacement.GetPlacement(_app.WindowHandle);
                _settings.Position = currentPosition;
            }
            catch (Exception ex)
            {
                _logger.Error(ex, "Unable to save application position ");
            }
        }
    }

    public class SaveApplicationPositionOnScreenSettings : IPluginSettings
    {
        private readonly ISettingsForComponent _settings;

        public string Position
        {
            get => _settings.Get<string>(nameof(Position), null);
            set => _settings.Update(nameof(Position), value);
        }

        public SaveApplicationPositionOnScreenSettings(ISettings settings)
        {
            _settings = settings.GetSettingsForComponent(new SaveApplicationPositionOnScreenPlugin().Id);
        }

        public void DeferChanges()
        {
            _settings.DeferChanges();
        }
    }
}

```

`\\?\C:\Dev\Projects\YAPA-2-modern\YAPA\Plugins\SaveApplicationPossitionOnScreen\WindowPlacement.cs`:

```cs
﻿using Newtonsoft.Json;
using System;
using System.Runtime.InteropServices;

namespace YAPA.Plugins.SaveApplicationPossitionOnScreen
{
    // RECT structure required by WINDOWPLACEMENT structure
    [Serializable]
    [StructLayout(LayoutKind.Sequential)]
    public struct RECT
    {
        public int Left;
        public int Top;
        public int Right;
        public int Bottom;

        public RECT(int left, int top, int right, int bottom)
        {
            Left = left;
            Top = top;
            Right = right;
            Bottom = bottom;
        }
    }

    // POINT structure required by WINDOWPLACEMENT structure
    [Serializable]
    [StructLayout(LayoutKind.Sequential)]
    public struct POINT
    {
        public int X;
        public int Y;

        public POINT(int x, int y)
        {
            X = x;
            Y = y;
        }
    }

    // WINDOWPLACEMENT stores the position, size, and state of a window
    [Serializable]
    [StructLayout(LayoutKind.Sequential)]
    public struct WINDOWPLACEMENT
    {
        public int length;
        public int flags;
        public int showCmd;
        public POINT minPosition;
        public POINT maxPosition;
        public RECT normalPosition;
    }

    public class WindowPlacement
    {
        [DllImport("user32.dll")]
        private static extern bool SetWindowPlacement(IntPtr hWnd, [In] ref WINDOWPLACEMENT lpwndpl);

        [DllImport("user32.dll")]
        private static extern bool GetWindowPlacement(IntPtr hWnd, out WINDOWPLACEMENT lpwndpl);

        private const int SW_SHOWNORMAL = 1;
        private const int SW_SHOWMINIMIZED = 2;

        public static void SetPlacement(IntPtr windowHandle, string placementJson)
        {
            if (string.IsNullOrEmpty(placementJson))
            {
                return;
            }

            var bytes = Convert.FromBase64String(placementJson);
            var json = System.Text.Encoding.UTF8.GetString(bytes);
            var placement = JsonConvert.DeserializeObject<WINDOWPLACEMENT>(json);

            placement.length = Marshal.SizeOf(typeof(WINDOWPLACEMENT));
            placement.flags = 0;
            placement.showCmd = (placement.showCmd == SW_SHOWMINIMIZED ? SW_SHOWNORMAL : placement.showCmd);
            SetWindowPlacement(windowHandle, ref placement);
        }

        public static string GetPlacement(IntPtr windowHandle)
        {
            WINDOWPLACEMENT placement = new WINDOWPLACEMENT();
            GetWindowPlacement(windowHandle, out placement);
            var json = JsonConvert.SerializeObject(placement);
            var bytes = System.Text.Encoding.UTF8.GetBytes(json);
            return Convert.ToBase64String(bytes);
        }
    }
}

```

`\\?\C:\Dev\Projects\YAPA-2-modern\YAPA\Plugins\SoundSettings\MusicPlayer\MusicPlayer.cs`:

```cs
﻿using System;
using System.IO;
using YAPA.Shared.Common;
using YAPA.Shared.Contracts;
using YAPA.WPF;

namespace YAPA.Plugins.SoundSettings.MusicPlayer
{
    [BuiltInPlugin(Hide = true)]
    public class MusicPlayerPlugin : IPluginMeta
    {
        public string Title => "Music player";
        public string Id => "MusicPlayer";

        public Type Plugin => typeof(MusicPlayer);

        public Type Settings => typeof(MusicPlayerPluginSettings);

        public Type SettingEditWindow => typeof(MusicPlayerPluginSettingWindow);
    }

    public class MusicPlayer : IPlugin
    {
        private readonly IPomodoroEngine _engine;
        private readonly MusicPlayerPluginSettings _settings;
        private readonly IMusicPlayer _musicPlayer;
        private readonly PomodoroEngineSettings _engineSettings;

        public MusicPlayer(IPomodoroEngine engine, MusicPlayerPluginSettings settings, IMusicPlayer musicPlayer, PomodoroEngineSettings engineSettings)
        {
            _engine = engine;
            _settings = settings;
            _musicPlayer = musicPlayer;
            _engineSettings = engineSettings;

            _engine.PropertyChanged += _engine_PropertyChanged;
        }

        private void _engine_PropertyChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e)
        {
            if (e.PropertyName == nameof(_engine.Phase))
            {
                _musicPlayer.Stop();
                Play();
            }
        }

        private void Play()
        {
            if (_engineSettings.DisableSoundNotifications)
            {
                return;
            }

            var songToPlay = string.Empty;
            var repeat = false;
            switch (_engine.Phase)
            {
                case PomodoroPhase.Work:
                    songToPlay = _settings.WorkSong;
                    repeat = _settings.RepeatWorkSong;
                    break;
                case PomodoroPhase.Break:
                    if (_engine.Index == _engineSettings.PomodorosBeforeLongBreak)
                    {
                        songToPlay = _settings.SessionBreakSong;
                        repeat = _settings.RepeatSessionBreakSong;
                    }
                    else
                    {
                        songToPlay = _settings.BreakSong;
                        repeat = _settings.RepeatBreakSong;
                    }
                    break;
                case PomodoroPhase.BreakEnded:
                case PomodoroPhase.WorkEnded:
                    break;
            }

            PlaySong(songToPlay, repeat);
        }

        private void PlaySong(string songToPlay, bool repeat)
        {
            if (File.Exists(songToPlay))
            {
                _musicPlayer.Load(songToPlay);
                _musicPlayer.Play(repeat, _engineSettings.Volume);
            }
        }
    }

    public class MusicPlayerPluginSettings : IPluginSettings
    {
        private readonly ISettingsForComponent _settings;

        public string WorkSong
        {
            get => _settings.Get<string>(nameof(WorkSong), null, true);
            set => _settings.Update(nameof(WorkSong), value, true);
        }

        public bool RepeatWorkSong
        {
            get => _settings.Get(nameof(RepeatWorkSong), false, true);
            set => _settings.Update(nameof(RepeatWorkSong), value, true);
        }

        public string BreakSong
        {
            get => _settings.Get<string>(nameof(BreakSong), null, true);
            set => _settings.Update(nameof(BreakSong), value, true);
        }

        public bool RepeatBreakSong
        {
            get => _settings.Get(nameof(RepeatBreakSong), false, true);
            set => _settings.Update(nameof(RepeatBreakSong), value, true);
        }

        public string SessionBreakSong
        {
            get => _settings.Get<string>(nameof(SessionBreakSong), null, true);
            set => _settings.Update(nameof(SessionBreakSong), value, true);
        }

        public bool RepeatSessionBreakSong
        {
            get => _settings.Get(nameof(RepeatSessionBreakSong), false, true);
            set => _settings.Update(nameof(RepeatSessionBreakSong), value, true);
        }

        public MusicPlayerPluginSettings(ISettings settings)
        {
            _settings = settings.GetSettingsForComponent(new MusicPlayerPlugin().Id);
        }

        public void DeferChanges()
        {
            _settings.DeferChanges();
        }
    }

}

```

`\\?\C:\Dev\Projects\YAPA-2-modern\YAPA\Plugins\SoundSettings\MusicPlayer\MusicPlayerPluginSettingWindow.xaml`:

```xaml
﻿<UserControl x:Class="YAPA.Plugins.SoundSettings.MusicPlayer.MusicPlayerPluginSettingWindow"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             mc:Ignorable="d" 
             d:DesignHeight="300" d:DesignWidth="300">
    <Grid>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="Auto"></ColumnDefinition>
            <ColumnDefinition Width="*"></ColumnDefinition>
            <ColumnDefinition Width="Auto"></ColumnDefinition>
            <ColumnDefinition Width="Auto"></ColumnDefinition>
        </Grid.ColumnDefinitions>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"></RowDefinition>
            <RowDefinition Height="Auto"></RowDefinition>
            <RowDefinition Height="Auto"></RowDefinition>
            <RowDefinition Height="Auto"></RowDefinition>
            <RowDefinition Height="Auto"></RowDefinition>
            <RowDefinition Height="Auto"></RowDefinition>
            <RowDefinition Height="Auto"></RowDefinition>
            <RowDefinition Height="Auto"></RowDefinition>
        </Grid.RowDefinitions>

        <TextBlock Text="Work song" Grid.Column="0" Grid.Row="2" VerticalAlignment="Center"></TextBlock>
        <TextBox Text="{Binding WorkSong, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" x:Name="WorkSong" HorizontalContentAlignment="Stretch" 
                 HorizontalAlignment="Stretch"  Grid.Column="1" Grid.Row="2" Margin="2"></TextBox>
        <Button HorizontalAlignment="Right" x:Name="BrowseWorkSong" Style="{DynamicResource MaterialDesignFlatButton}"  Grid.Column="2" Grid.Row="2">
            Browse
        </Button>
        <Button HorizontalAlignment="Right" x:Name="PlayWorkSong" Style="{DynamicResource MaterialDesignFlatButton}" Grid.Column="3" Grid.Row="2">
            Play
        </Button>
        <CheckBox  IsChecked="{Binding RepeatWorkSong, Mode=TwoWay}" Grid.Column="0" Grid.ColumnSpan="2" Grid.Row="3" >Repeat work song</CheckBox>

        <TextBlock Text="Break song" Grid.Column="0" Grid.Row="4" VerticalAlignment="Center"></TextBlock>
        <TextBox Text="{Binding BreakSong, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" x:Name="BreakSong" HorizontalContentAlignment="Stretch" 
                 HorizontalAlignment="Stretch"  Grid.Column="1" Grid.Row="4" Margin="2"></TextBox>
        <Button HorizontalAlignment="Right" x:Name="BrowseBreakSong" Style="{DynamicResource MaterialDesignFlatButton}" Grid.Column="2" Grid.Row="4">
            Browse
        </Button>
        <Button HorizontalAlignment="Right" x:Name="PlayBreakSong" Style="{DynamicResource MaterialDesignFlatButton}" Grid.Column="3" Grid.Row="4">
            Play
        </Button>
        <CheckBox  IsChecked="{Binding RepeatBreakSong, Mode=TwoWay}" Grid.Column="0" Grid.ColumnSpan="2" Grid.Row="5" >Repeat break song</CheckBox>

        <TextBlock Text="Session break song" Grid.Column="0" Grid.Row="6" VerticalAlignment="Center"></TextBlock>
        <TextBox Text="{Binding SessionBreakSong, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" x:Name="SessionBreakSong" HorizontalContentAlignment="Stretch" 
                 HorizontalAlignment="Stretch"  Grid.Column="1" Grid.Row="6" Margin="2"></TextBox>
        <Button HorizontalAlignment="Right" x:Name="BrowseSessionBreakSong" CommandParameter="this" Style="{DynamicResource MaterialDesignFlatButton}" Grid.Column="2" Grid.Row="6">
            Browse
        </Button>
        <Button HorizontalAlignment="Right" x:Name="PlaySessionBreakSong" Style="{DynamicResource MaterialDesignFlatButton}" Grid.Column="3" Grid.Row="6">
            Play
        </Button>
        <CheckBox  IsChecked="{Binding RepeatSessionBreakSong, Mode=TwoWay}" Grid.Column="0" Grid.ColumnSpan="2" Grid.Row="7" >Repeat session break song</CheckBox>

    </Grid>
</UserControl>

```

`\\?\C:\Dev\Projects\YAPA-2-modern\YAPA\Plugins\SoundSettings\MusicPlayer\MusicPlayerPluginSettingWindow.xaml.cs`:

```cs
﻿using System;
using System.IO;
using System.Windows.Controls;
using System.Windows.Input;
using YAPA.Shared.Common;
using YAPA.Shared.Contracts;

namespace YAPA.Plugins.SoundSettings.MusicPlayer
{
    public partial class MusicPlayerPluginSettingWindow
    {
        private readonly IMusicPlayer _musicPlayer;
        private readonly PomodoroEngineSettings _pomodoroEngineSettings;

        public MusicPlayerPluginSettingWindow(MusicPlayerPluginSettings settings, IMusicPlayer musicPlayer, PomodoroEngineSettings pomodoroEngineSettings)
        {
            settings.DeferChanges();

            InitializeComponent();

            DataContext = settings;

            _musicPlayer = musicPlayer;
            _pomodoroEngineSettings = pomodoroEngineSettings;

            BrowseBreakSong.Command = new BrowseSong(BreakSong);
            BrowseWorkSong.Command = new BrowseSong(WorkSong);
            BrowseSessionBreakSong.Command = new BrowseSong(SessionBreakSong);

            PlaySessionBreakSong.Command = new PlaySong(SessionBreakSong, PlaySessionBreakSong, _musicPlayer, _pomodoroEngineSettings);
            PlayBreakSong.Command = new PlaySong(BreakSong, PlayWorkSong, _musicPlayer, _pomodoroEngineSettings);
            PlayWorkSong.Command = new PlaySong(WorkSong, PlayWorkSong, _musicPlayer, _pomodoroEngineSettings);
        }

        public class PlaySong : ICommand
        {
            private readonly TextBox _song;
            private readonly Button _playButton;
            private readonly IMusicPlayer _musicPlayer;
            private readonly PomodoroEngineSettings _pomodoroEngineSettings;
            private bool _isPlaying = false;

            public PlaySong(TextBox song, Button playButton, IMusicPlayer musicPlayer, PomodoroEngineSettings pomodoroEngineSettings)
            {
                _song = song;
                _playButton = playButton;
                _musicPlayer = musicPlayer;
                _pomodoroEngineSettings = pomodoroEngineSettings;
            }

            public bool CanExecute(object parameter)
            {
                return true;
            }

            public void Execute(object parameter)
            {
                if (!_isPlaying)
                {
                    if (File.Exists(_song.Text))
                    {
                        _musicPlayer.Load(_song.Text);
                        _musicPlayer.Play(false, _pomodoroEngineSettings.Volume);
                        _playButton.Content = "Stop";
                        _isPlaying = true;
                    }
                }
                else
                {
                    _musicPlayer.Stop();
                    _playButton.Content = "Play";
                    _isPlaying = false;
                }
            }

            public event EventHandler CanExecuteChanged;
        }

        public class BrowseSong : ICommand
        {
            private readonly TextBox _output;

            public BrowseSong(TextBox output)
            {
                _output = output;
            }

            public bool CanExecute(object parameter)
            {
                return true;
            }

            public void Execute(object parameter)
            {
                var dlg = new Microsoft.Win32.OpenFileDialog
                {
                    DefaultExt = ".wav",
                    Filter = "MP3 (*.mp3)|*.mp3|WAVE (*.wav)|*.wav|All Files(*.*)|*.*",
                    InitialDirectory = System.IO.Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "Resources\\sounds")
                };

                var result = dlg.ShowDialog();


                if (result.HasValue && result == true)
                {
                    _output.Text = dlg.FileName;
                }

            }

            public event EventHandler CanExecuteChanged;
        }
    }
}

```

`\\?\C:\Dev\Projects\YAPA-2-modern\YAPA\Plugins\SoundSettings\SoundNotifications\SoundNotifications.cs`:

```cs
﻿using System;
using System.IO;
using YAPA.Shared.Common;
using YAPA.Shared.Contracts;
using YAPA.WPF;

namespace YAPA.Plugins.SoundSettings.SoundNotifications
{
    [BuiltInPlugin(Hide = true)]
    public class SoundNotificationsPlugin : IPluginMeta
    {
        public string Title => "Sound notifications";
        public string Id => "SoundNotifications";

        public Type Plugin => typeof(SoundNotifications);

        public Type Settings => typeof(SoundNotificationsSettings);

        public Type SettingEditWindow => typeof(SoundNotificationSettingWindow);
    }

    public class SoundNotifications : IPlugin
    {
        private readonly IPomodoroEngine _engine;
        private readonly SoundNotificationsSettings _settings;
        private readonly IMusicPlayer _musicPlayer;
        private readonly PomodoroEngineSettings _engineSettings;

        public SoundNotifications(IPomodoroEngine engine, SoundNotificationsSettings settings, IMusicPlayer musicPlayer, PomodoroEngineSettings engineSettings)
        {
            _engine = engine;
            _settings = settings;
            _musicPlayer = musicPlayer;
            _engineSettings = engineSettings;

            _engine.PropertyChanged += _engine_PropertyChanged;
        }

        private void _engine_PropertyChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e)
        {
            if (e.PropertyName == nameof(_engine.Phase))
            {
                _musicPlayer.Stop();
                Play();
            }
        }

        private void PlayPeriodStart()
        {
            _musicPlayer.Load(_settings.PeriodStartSound);
            _musicPlayer.Play(volume: _engineSettings.Volume);
        }

        private void PlayPeriodEnd()
        {
            _musicPlayer.Load(_settings.PeriodEndSound);
            _musicPlayer.Play(volume: _engineSettings.Volume);
        }

        private void Play()
        {
            if (_engineSettings.DisableSoundNotifications)
            {
                return;
            }

            switch (_engine.Phase)
            {
                case PomodoroPhase.Work:
                    if (_settings.PlayPeriodStartEndSounds) PlayPeriodStart();
                    break;
                case PomodoroPhase.Break:
                    if (_settings.PlayPeriodStartEndSounds) PlayPeriodStart();
                    break;
                case PomodoroPhase.BreakEnded:
                case PomodoroPhase.WorkEnded:
                    if (_settings.PlayPeriodStartEndSounds) PlayPeriodEnd();
                    break;
            }
        }
    }

    public class SoundNotificationsSettings : IPluginSettings
    {
        private readonly ISettingsForComponent _settings;

        public string PeriodStartSound
        {
            get => _settings.Get(nameof(PeriodStartSound), Path.Combine(AppDomain.CurrentDomain.BaseDirectory, @"Resources\tick.wav"));
            set => _settings.Update(nameof(PeriodStartSound), value);
        }

        public string PeriodEndSound
        {
            get => _settings.Get(nameof(PeriodEndSound), Path.Combine(AppDomain.CurrentDomain.BaseDirectory, @"Resources\ding.wav"));
            set => _settings.Update(nameof(PeriodEndSound), value);
        }

        public bool PlayPeriodStartEndSounds
        {
            get => _settings.Get(nameof(PlayPeriodStartEndSounds), true);
            set => _settings.Update(nameof(PlayPeriodStartEndSounds), value);
        }

        public SoundNotificationsSettings(ISettings settings)
        {
            _settings = settings.GetSettingsForComponent(new SoundNotificationsPlugin().Id);
        }

        public void DeferChanges()
        {
            _settings.DeferChanges();
        }
    }

}

```

`\\?\C:\Dev\Projects\YAPA-2-modern\YAPA\Plugins\SoundSettings\SoundNotifications\SoundNotificationSettingWindow.xaml`:

```xaml
﻿<UserControl x:Class="YAPA.Plugins.SoundSettings.SoundNotifications.SoundNotificationSettingWindow"
      xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
      xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
      xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
      xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
      xmlns:local="clr-namespace:YAPA.WPF"
      xmlns:materialDesign="http://materialdesigninxaml.net/winfx/xaml/themes"
      mc:Ignorable="d" 
      d:DesignHeight="300" d:DesignWidth="300">

    <Grid>
        <CheckBox  IsChecked="{Binding PlayPeriodStartEndSounds, Mode=TwoWay}">Play period start\end sounds</CheckBox>

    </Grid>
</UserControl>

```

`\\?\C:\Dev\Projects\YAPA-2-modern\YAPA\Plugins\SoundSettings\SoundNotifications\SoundNotificationSettingWindow.xaml.cs`:

```cs
﻿namespace YAPA.Plugins.SoundSettings.SoundNotifications
{
    public partial class SoundNotificationSettingWindow
    {
        public SoundNotificationSettingWindow(SoundNotificationsSettings settings)
        {
            settings.DeferChanges();
            InitializeComponent();

            DataContext = settings;
        }
    }
}

```

`\\?\C:\Dev\Projects\YAPA-2-modern\YAPA\Plugins\SoundSettings\SoundSettingsPlugin.cs`:

```cs
﻿using System;
using YAPA.Shared.Contracts;
using YAPA.WPF;

namespace YAPA.Plugins.SoundSettings
{
    [BuiltInPlugin]
    public class SoundSettingsPlugin : IPluginMeta
    {
        public string Title => "Sound";
        public string Id => "SoundSettingsPlugin";

        public Type Plugin => null;

        public Type Settings => null;

        public Type SettingEditWindow => typeof(SoundSettingWindow);
    }
}

```

`\\?\C:\Dev\Projects\YAPA-2-modern\YAPA\Plugins\SoundSettings\SoundSettingWindow.xaml`:

```xaml
﻿<UserControl x:Class="YAPA.Plugins.SoundSettings.SoundSettingWindow"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:local="clr-namespace:YAPA.Plugins.SoundSettings"
             mc:Ignorable="d" 
             d:DesignHeight="300" d:DesignWidth="300">
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"></RowDefinition>
            <RowDefinition Height="Auto"></RowDefinition>
            <RowDefinition Height="*"></RowDefinition>
        </Grid.RowDefinitions>

        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="*"></ColumnDefinition>
            <ColumnDefinition Width="2*"></ColumnDefinition>
            <ColumnDefinition Width="*"></ColumnDefinition>
        </Grid.ColumnDefinitions>

        <CheckBox  IsChecked="{Binding DisableSoundNotifications, Mode=TwoWay}" Grid.Column="0" Grid.ColumnSpan="2" Grid.Row="0" >Disable sound notifications</CheckBox>
        <TextBlock Text="Volume" Grid.Column="0" Grid.Row="1"></TextBlock>
        <Slider Value="{Binding Volume, Mode=TwoWay, Delay=300}" x:Name="Slider" Grid.Column="1" Grid.Row="1" Minimum="0.1" Maximum="1" Ticks=".0,.1,.2,.3,.4,.5,.6,.7,.8,.9,1.0" />

        <StackPanel Grid.Row="2" x:Name="Container" Grid.Column="0" Grid.ColumnSpan="2"></StackPanel>
    </Grid>
</UserControl>

```

`\\?\C:\Dev\Projects\YAPA-2-modern\YAPA\Plugins\SoundSettings\SoundSettingWindow.xaml.cs`:

```cs
﻿using YAPA.Plugins.SoundSettings.MusicPlayer;
using YAPA.Plugins.SoundSettings.SoundNotifications;
using YAPA.Shared.Common;

namespace YAPA.Plugins.SoundSettings
{
    public partial class SoundSettingWindow
    {
        public SoundSettingWindow(SoundNotificationSettingWindow soundNotification, MusicPlayerPluginSettingWindow musicPlayer, PomodoroEngineSettings engineSettings)
        {
            InitializeComponent();
            Container.Children.Add(soundNotification);
            Container.Children.Add(musicPlayer);

            engineSettings.DeferChanges();

            DataContext = engineSettings;
        }
    }
}

```

`\\?\C:\Dev\Projects\YAPA-2-modern\YAPA\Plugins\Unclickable\UnclickableMeta.cs`:

```cs
﻿using System;
using System.Runtime.InteropServices;
using System.Windows;
using System.Windows.Interop;
using YAPA.Shared.Contracts;

namespace YAPA.Plugins.Unclickable
{
    public class UnclickableMeta : IPluginMeta
    {
        public string Title => "Unclickable";
        public string Id => "Unclickable";
        public Type Plugin => typeof(UnclickablePlugin);
        public Type Settings => typeof(UnclickableSettings);
        public Type SettingEditWindow => typeof(UnclickableSettingsWindow);
    }

    public class UnclickablePlugin : IPlugin
    {
        private readonly IPomodoroEngine _engine;
        private readonly UnclickableSettings _settings;
        private readonly ISettings _globalSettings;
        private readonly Window _window;

        private bool _setOnce;

        private int _extendedStyle;
        private bool _is64Bit;
        private IntPtr _windowHandle;

        public UnclickablePlugin(IApplication app, IPomodoroEngine engine, UnclickableSettings settings, ISettings globalSettings)
        {
            _engine = engine;
            _settings = settings;
            _globalSettings = globalSettings;
            _window = (Window)app;

            _engine.PropertyChanged += _engine_PropertyChanged;

            _window.Loaded += (sender, args) => SaveInitialStyle();

            _globalSettings.PropertyChanged += _globalSettings_PropertyChanged; ;
        }

        private void _globalSettings_PropertyChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e)
        {
            if (e.PropertyName.EndsWith(nameof(_settings.UnclickablityType)))
            {
                if (_settings.UnclickablityType != UnclickablityType.ClickThrough)
                {
                    Clickable();
                }
            }
        }

        private void _engine_PropertyChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e)
        {
            if (_settings.UnclickablityType != UnclickablityType.ClickThrough)
            {
                return;
            }
            if (_engine.Phase == PomodoroPhase.Break || _engine.Phase == PomodoroPhase.Work)
            {
                if (!_setOnce)
                {
                    Unclickable();
                    _setOnce = true;
                }
            }
            else
            {
                if (_setOnce)
                {
                    Clickable();
                    _setOnce = false;
                }
            }
        }

        public const int WS_EX_TRANSPARENT = 0x00000020;

        public const int GWL_EXSTYLE = (-20);

        [DllImport("user32.dll")]
        public static extern int GetWindowLong(IntPtr hwnd, int index);

        [DllImport("user32.dll")]
        public static extern int SetWindowLong(IntPtr hwnd, int index, int newStyle);

        [DllImport("user32.dll")]
        public static extern int GetWindowLongPtr(IntPtr hwnd, int index);

        [DllImport("user32.dll")]
        public static extern int SetWindowLongPtr(IntPtr hwnd, int index, int newStyle);

        void SaveInitialStyle()
        {
            _is64Bit = (Marshal.SizeOf(typeof(IntPtr))) == 8;
            _windowHandle = new WindowInteropHelper(_window).Handle;

            if (_is64Bit)
                _extendedStyle = GetWindowLongPtr(_windowHandle, GWL_EXSTYLE);
            else
                _extendedStyle = GetWindowLong(_windowHandle, GWL_EXSTYLE);
        }

        private void Unclickable()
        {
            if (_is64Bit)
                SetWindowLongPtr(_windowHandle, GWL_EXSTYLE, _extendedStyle | WS_EX_TRANSPARENT);
            else
                SetWindowLong(_windowHandle, GWL_EXSTYLE, _extendedStyle | WS_EX_TRANSPARENT);
        }

        private void Clickable()
        {
            if (_is64Bit)
                SetWindowLongPtr(_windowHandle, GWL_EXSTYLE, _extendedStyle);
            else
                SetWindowLong(_windowHandle, GWL_EXSTYLE, _extendedStyle);
        }
    }

    public enum UnclickablityType
    {
        ClickThrough
    }

    public class UnclickableSettings : IPluginSettings
    {
        private readonly ISettingsForComponent _settings;

        public UnclickablityType UnclickablityType
        {
            get => _settings.Get(nameof(UnclickablityType), UnclickablityType.ClickThrough);
            set => _settings.Update(nameof(UnclickablityType), value);
        }

        public UnclickableSettings(ISettings settings)
        {
            _settings = settings.GetSettingsForComponent(new UnclickableMeta().Id);
        }

        public void DeferChanges()
        {
            _settings.DeferChanges();
        }
    }
}

```

`\\?\C:\Dev\Projects\YAPA-2-modern\YAPA\Plugins\Unclickable\UnclickableSettingWindow.xaml`:

```xaml
﻿<UserControl x:Class="YAPA.Plugins.Unclickable.UnclickableSettingsWindow"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             mc:Ignorable="d" 
             d:DesignHeight="300" d:DesignWidth="300">
    <Grid>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="Auto"></ColumnDefinition>
            <ColumnDefinition Width="*"></ColumnDefinition>
        </Grid.ColumnDefinitions>

        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"></RowDefinition>
            <RowDefinition Height="*"></RowDefinition>
        </Grid.RowDefinitions>
        <TextBlock Text="Unclickable behaviour" Grid.Column="0" Grid.Row="0"></TextBlock>

        <ComboBox x:Name="BehaviourList"
                  Grid.Column="1" Grid.Row="0"
                  Margin="16 0 0 0"
                  DisplayMemberPath="Title"
                  SelectedValuePath="Item"
                  SelectedValue="{Binding Settings.UnclickablityType}" >

            <ComboBox.ItemsPanel>
                <ItemsPanelTemplate>
                    <VirtualizingStackPanel />
                </ItemsPanelTemplate>
            </ComboBox.ItemsPanel>
        </ComboBox>
    </Grid>
</UserControl>

```

`\\?\C:\Dev\Projects\YAPA-2-modern\YAPA\Plugins\Unclickable\UnclickableSettingWindow.xaml.cs`:

```cs
﻿using System.Collections.Generic;

namespace YAPA.Plugins.Unclickable
{
    public partial class UnclickableSettingsWindow
    {
        public UnclickableSettings Settings { get; }

        public UnclickableSettingsWindow(UnclickableSettings settings)
        {
            Settings = settings;
            Settings.DeferChanges();

            InitializeComponent();

            var counterValues = new List<BehaviourListItem>
            {
                new BehaviourListItem{ Item = UnclickablityType.ClickThrough, Title = "Click through"},
            };

            BehaviourList.ItemsSource = counterValues;

            DataContext = this;
        }

        public class BehaviourListItem
        {
            public UnclickablityType Item { get; set; }
            public string Title { get; set; }
        }
    }
}

```

`\\?\C:\Dev\Projects\YAPA-2-modern\YAPA\Properties\Resources.Designer.cs`:

```cs
﻿//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace YAPA.Properties {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("YAPA.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Icon similar to (Icon).
        /// </summary>
        public static System.Drawing.Icon backward {
            get {
                object obj = ResourceManager.GetObject("backward", resourceCulture);
                return ((System.Drawing.Icon)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Icon similar to (Icon).
        /// </summary>
        public static System.Drawing.Icon pause {
            get {
                object obj = ResourceManager.GetObject("pause", resourceCulture);
                return ((System.Drawing.Icon)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Icon similar to (Icon).
        /// </summary>
        public static System.Drawing.Icon preferences {
            get {
                object obj = ResourceManager.GetObject("preferences", resourceCulture);
                return ((System.Drawing.Icon)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Icon similar to (Icon).
        /// </summary>
        public static System.Drawing.Icon start {
            get {
                object obj = ResourceManager.GetObject("start", resourceCulture);
                return ((System.Drawing.Icon)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Icon similar to (Icon).
        /// </summary>
        public static System.Drawing.Icon stop {
            get {
                object obj = ResourceManager.GetObject("stop", resourceCulture);
                return ((System.Drawing.Icon)(obj));
            }
        }
    }
}

```

`\\?\C:\Dev\Projects\YAPA-2-modern\YAPA\Properties\Resources.resx`:

```resx
﻿<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Windows.Forms" name="System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
  <data name="backward" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\Resources\backward.ico;System.Drawing.Icon, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="pause" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\Resources\pause.ico;System.Drawing.Icon, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="preferences" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\Resources\preferences.ico;System.Drawing.Icon, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="start" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\Resources\start.ico;System.Drawing.Icon, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="stop" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\Resources\stop.ico;System.Drawing.Icon, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
</root>
```

`\\?\C:\Dev\Projects\YAPA-2-modern\YAPA\Properties\Settings.Designer.cs`:

```cs
﻿//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace YAPA.Properties {
    
    
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.Editors.SettingsDesigner.SettingsSingleFileGenerator", "17.3.0.0")]
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        private static Settings defaultInstance = ((Settings)(global::System.Configuration.ApplicationSettingsBase.Synchronized(new Settings())));
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
    }
}

```

`\\?\C:\Dev\Projects\YAPA-2-modern\YAPA\Properties\Settings.settings`:

```settings
﻿<?xml version='1.0' encoding='utf-8'?>
<SettingsFile xmlns="http://schemas.microsoft.com/VisualStudio/2004/01/settings" CurrentProfile="(Default)">
  <Profiles />
  <Settings />
</SettingsFile>
```

`\\?\C:\Dev\Projects\YAPA-2-modern\YAPA\SingleInstance.cs`:

```cs
﻿//-----------------------------------------------------------------------
// <copyright file="SingleInstance.cs" company="Microsoft">
//     Copyright (c) Microsoft Corporation.  All rights reserved.
// </copyright>
// <summary>
//     This class checks to make sure that only one instance of 
//     this application is running at a time.
// </summary>
//-----------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.IO;
using System.Runtime.InteropServices;
using System.Runtime.Remoting;
using System.Runtime.Remoting.Channels;
using System.Runtime.Remoting.Channels.Ipc;
using System.Runtime.Serialization.Formatters;
using System.Security;
using System.Threading;
using System.Windows;
using System.Windows.Threading;

namespace YAPA
{
    internal enum WM
    {
        NULL = 0x0000,
        CREATE = 0x0001,
        DESTROY = 0x0002,
        MOVE = 0x0003,
        SIZE = 0x0005,
        ACTIVATE = 0x0006,
        SETFOCUS = 0x0007,
        KILLFOCUS = 0x0008,
        ENABLE = 0x000A,
        SETREDRAW = 0x000B,
        SETTEXT = 0x000C,
        GETTEXT = 0x000D,
        GETTEXTLENGTH = 0x000E,
        PAINT = 0x000F,
        CLOSE = 0x0010,
        QUERYENDSESSION = 0x0011,
        QUIT = 0x0012,
        QUERYOPEN = 0x0013,
        ERASEBKGND = 0x0014,
        SYSCOLORCHANGE = 0x0015,
        SHOWWINDOW = 0x0018,
        ACTIVATEAPP = 0x001C,
        SETCURSOR = 0x0020,
        MOUSEACTIVATE = 0x0021,
        CHILDACTIVATE = 0x0022,
        QUEUESYNC = 0x0023,
        GETMINMAXINFO = 0x0024,

        WINDOWPOSCHANGING = 0x0046,
        WINDOWPOSCHANGED = 0x0047,

        CONTEXTMENU = 0x007B,
        STYLECHANGING = 0x007C,
        STYLECHANGED = 0x007D,
        DISPLAYCHANGE = 0x007E,
        GETICON = 0x007F,
        SETICON = 0x0080,
        NCCREATE = 0x0081,
        NCDESTROY = 0x0082,
        NCCALCSIZE = 0x0083,
        NCHITTEST = 0x0084,
        NCPAINT = 0x0085,
        NCACTIVATE = 0x0086,
        GETDLGCODE = 0x0087,
        SYNCPAINT = 0x0088,
        NCMOUSEMOVE = 0x00A0,
        NCLBUTTONDOWN = 0x00A1,
        NCLBUTTONUP = 0x00A2,
        NCLBUTTONDBLCLK = 0x00A3,
        NCRBUTTONDOWN = 0x00A4,
        NCRBUTTONUP = 0x00A5,
        NCRBUTTONDBLCLK = 0x00A6,
        NCMBUTTONDOWN = 0x00A7,
        NCMBUTTONUP = 0x00A8,
        NCMBUTTONDBLCLK = 0x00A9,

        SYSKEYDOWN = 0x0104,
        SYSKEYUP = 0x0105,
        SYSCHAR = 0x0106,
        SYSDEADCHAR = 0x0107,
        COMMAND = 0x0111,
        SYSCOMMAND = 0x0112,

        MOUSEMOVE = 0x0200,
        LBUTTONDOWN = 0x0201,
        LBUTTONUP = 0x0202,
        LBUTTONDBLCLK = 0x0203,
        RBUTTONDOWN = 0x0204,
        RBUTTONUP = 0x0205,
        RBUTTONDBLCLK = 0x0206,
        MBUTTONDOWN = 0x0207,
        MBUTTONUP = 0x0208,
        MBUTTONDBLCLK = 0x0209,
        MOUSEWHEEL = 0x020A,
        XBUTTONDOWN = 0x020B,
        XBUTTONUP = 0x020C,
        XBUTTONDBLCLK = 0x020D,
        MOUSEHWHEEL = 0x020E,


        CAPTURECHANGED = 0x0215,

        ENTERSIZEMOVE = 0x0231,
        EXITSIZEMOVE = 0x0232,

        IME_SETCONTEXT = 0x0281,
        IME_NOTIFY = 0x0282,
        IME_CONTROL = 0x0283,
        IME_COMPOSITIONFULL = 0x0284,
        IME_SELECT = 0x0285,
        IME_CHAR = 0x0286,
        IME_REQUEST = 0x0288,
        IME_KEYDOWN = 0x0290,
        IME_KEYUP = 0x0291,

        NCMOUSELEAVE = 0x02A2,

        DWMCOMPOSITIONCHANGED = 0x031E,
        DWMNCRENDERINGCHANGED = 0x031F,
        DWMCOLORIZATIONCOLORCHANGED = 0x0320,
        DWMWINDOWMAXIMIZEDCHANGE = 0x0321,

        #region Windows 7
        DWMSENDICONICTHUMBNAIL = 0x0323,
        DWMSENDICONICLIVEPREVIEWBITMAP = 0x0326,
        #endregion

        USER = 0x0400,

        // This is the hard-coded message value used by WinForms for Shell_NotifyIcon.
        // It's relatively safe to reuse.
        TRAYMOUSEMESSAGE = 0x800, //WM_USER + 1024
        APP = 0x8000,
    }

    [SuppressUnmanagedCodeSecurity]
    internal static class NativeMethods
    {
        /// <summary>
        /// Delegate declaration that matches WndProc signatures.
        /// </summary>
        public delegate IntPtr MessageHandler(WM uMsg, IntPtr wParam, IntPtr lParam, out bool handled);

        [DllImport("shell32.dll", EntryPoint = "CommandLineToArgvW", CharSet = CharSet.Unicode)]
        private static extern IntPtr _CommandLineToArgvW([MarshalAs(UnmanagedType.LPWStr)] string cmdLine, out int numArgs);


        [DllImport("kernel32.dll", EntryPoint = "LocalFree", SetLastError = true)]
        private static extern IntPtr _LocalFree(IntPtr hMem);


        public static string[] CommandLineToArgvW(string cmdLine)
        {
            IntPtr argv = IntPtr.Zero;
            try
            {
                int numArgs = 0;

                argv = _CommandLineToArgvW(cmdLine, out numArgs);
                if (argv == IntPtr.Zero)
                {
                    throw new Win32Exception();
                }
                var result = new string[numArgs];

                for (int i = 0; i < numArgs; i++)
                {
                    IntPtr currArg = Marshal.ReadIntPtr(argv, i * Marshal.SizeOf(typeof(IntPtr)));
                    result[i] = Marshal.PtrToStringUni(currArg);
                }

                return result;
            }
            finally
            {

                IntPtr p = _LocalFree(argv);
                // Otherwise LocalFree failed.
                // Assert.AreEqual(IntPtr.Zero, p);
            }
        }

    }

    public interface ISingleInstanceApp
    {
        bool SignalExternalCommandLineArgs(IList<string> args);
    }

    /// <summary>
    /// This class checks to make sure that only one instance of 
    /// this application is running at a time.
    /// </summary>
    /// <remarks>
    /// Note: this class should be used with some caution, because it does no
    /// security checking. For example, if one instance of an app that uses this class
    /// is running as Administrator, any other instance, even if it is not
    /// running as Administrator, can activate it with command line arguments.
    /// For most apps, this will not be much of an issue.
    /// </remarks>
    public static class SingleInstance<TApplication>
                where TApplication : Application, ISingleInstanceApp
    {
        #region Private Fields

        /// <summary>
        /// String delimiter used in channel names.
        /// </summary>
        private const string Delimiter = ":";

        /// <summary>
        /// Suffix to the channel name.
        /// </summary>
        private const string ChannelNameSuffix = "SingeInstanceIPCChannel";

        /// <summary>
        /// Remote service name.
        /// </summary>
        private const string RemoteServiceName = "SingleInstanceApplicationService";

        /// <summary>
        /// IPC protocol used (string).
        /// </summary>
        private const string IpcProtocol = "ipc://";

        /// <summary>
        /// Application mutex.
        /// </summary>
        private static Mutex singleInstanceMutex;

        /// <summary>
        /// IPC channel for communications.
        /// </summary>
        private static IpcServerChannel channel;

        /// <summary>
        /// List of command line arguments for the application.
        /// </summary>
        private static IList<string> commandLineArgs;

        #endregion

        #region Public Properties

        /// <summary>
        /// Gets list of command line arguments for the application.
        /// </summary>
        public static IList<string> CommandLineArgs
        {
            get { return commandLineArgs; }
        }

        #endregion

        #region Public Methods

        /// <summary>
        /// Checks if the instance of the application attempting to start is the first instance. 
        /// If not, activates the first instance.
        /// </summary>
        /// <returns>True if this is the first instance of the application.</returns>
        public static bool InitializeAsFirstInstance(string uniqueName)
        {
            commandLineArgs = GetCommandLineArgs(uniqueName);

            // Build unique application Id and the IPC channel name.
            string applicationIdentifier = uniqueName + Environment.UserName;

            string channelName = String.Concat(applicationIdentifier, Delimiter, ChannelNameSuffix);

            // Create mutex based on unique application Id to check if this is the first instance of the application. 
            bool firstInstance;
            singleInstanceMutex = new Mutex(true, applicationIdentifier, out firstInstance);
            if (firstInstance)
            {
                CreateRemoteService(channelName);
            }
            else
            {
                SignalFirstInstance(channelName, commandLineArgs);
            }

            return firstInstance;
        }

        /// <summary>
        /// Cleans up single-instance code, clearing shared resources, mutexes, etc.
        /// </summary>
        public static void Cleanup()
        {
            if (singleInstanceMutex != null)
            {
                singleInstanceMutex.Close();
                singleInstanceMutex = null;
            }

            if (channel != null)
            {
                ChannelServices.UnregisterChannel(channel);
                channel = null;
            }
        }

        #endregion

        #region Private Methods

        /// <summary>
        /// Gets command line args - for ClickOnce deployed applications, command line args may not be passed directly, they have to be retrieved.
        /// </summary>
        /// <returns>List of command line arg strings.</returns>
        private static IList<string> GetCommandLineArgs(string uniqueApplicationName)
        {
            string[] args = null;
            if (AppDomain.CurrentDomain.ActivationContext == null)
            {
                // The application was not clickonce deployed, get args from standard API's
                args = Environment.GetCommandLineArgs();
            }
            else
            {
                // The application was clickonce deployed
                // Clickonce deployed apps cannot recieve traditional commandline arguments
                // As a workaround commandline arguments can be written to a shared location before 
                // the app is launched and the app can obtain its commandline arguments from the 
                // shared location               
                string appFolderPath = Path.Combine(
                    Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData), uniqueApplicationName);

                string cmdLinePath = Path.Combine(appFolderPath, "cmdline.txt");
                if (File.Exists(cmdLinePath))
                {
                    try
                    {
                        using (TextReader reader = new StreamReader(cmdLinePath, System.Text.Encoding.Unicode))
                        {
                            args = NativeMethods.CommandLineToArgvW(reader.ReadToEnd());
                        }

                        File.Delete(cmdLinePath);
                    }
                    catch (IOException)
                    {
                    }
                }
            }

            if (args == null)
            {
                args = new string[] { };
            }

            return new List<string>(args);
        }

        /// <summary>
        /// Creates a remote service for communication.
        /// </summary>
        /// <param name="channelName">Application's IPC channel name.</param>
        private static void CreateRemoteService(string channelName)
        {
            BinaryServerFormatterSinkProvider serverProvider = new BinaryServerFormatterSinkProvider();
            serverProvider.TypeFilterLevel = TypeFilterLevel.Full;
            IDictionary props = new Dictionary<string, string>();

            props["name"] = channelName;
            props["portName"] = channelName;
            props["exclusiveAddressUse"] = "false";

            // Create the IPC Server channel with the channel properties
            channel = new IpcServerChannel(props, serverProvider);

            // Register the channel with the channel services
            ChannelServices.RegisterChannel(channel, true);

            // Expose the remote service with the REMOTE_SERVICE_NAME
            IPCRemoteService remoteService = new IPCRemoteService();
            RemotingServices.Marshal(remoteService, RemoteServiceName);
        }

        /// <summary>
        /// Creates a client channel and obtains a reference to the remoting service exposed by the server - 
        /// in this case, the remoting service exposed by the first instance. Calls a function of the remoting service 
        /// class to pass on command line arguments from the second instance to the first and cause it to activate itself.
        /// </summary>
        /// <param name="channelName">Application's IPC channel name.</param>
        /// <param name="args">
        /// Command line arguments for the second instance, passed to the first instance to take appropriate action.
        /// </param>
        private static void SignalFirstInstance(string channelName, IList<string> args)
        {
            IpcClientChannel secondInstanceChannel = new IpcClientChannel();
            ChannelServices.RegisterChannel(secondInstanceChannel, true);

            string remotingServiceUrl = IpcProtocol + channelName + "/" + RemoteServiceName;

            // Obtain a reference to the remoting service exposed by the server i.e the first instance of the application
            IPCRemoteService firstInstanceRemoteServiceReference = (IPCRemoteService)RemotingServices.Connect(typeof(IPCRemoteService), remotingServiceUrl);

            // Check that the remote service exists, in some cases the first instance may not yet have created one, in which case
            // the second instance should just exit
            if (firstInstanceRemoteServiceReference != null)
            {
                // Invoke a method of the remote service exposed by the first instance passing on the command line
                // arguments and causing the first instance to activate itself
                firstInstanceRemoteServiceReference.InvokeFirstInstance(args);
            }
        }

        /// <summary>
        /// Callback for activating first instance of the application.
        /// </summary>
        /// <param name="arg">Callback argument.</param>
        /// <returns>Always null.</returns>
        private static object ActivateFirstInstanceCallback(object arg)
        {
            // Get command line args to be passed to first instance
            IList<string> args = arg as IList<string>;
            ActivateFirstInstance(args);
            return null;
        }

        /// <summary>
        /// Activates the first instance of the application with arguments from a second instance.
        /// </summary>
        /// <param name="args">List of arguments to supply the first instance of the application.</param>
        private static void ActivateFirstInstance(IList<string> args)
        {
            // Set main window state and process command line args
            if (Application.Current == null)
            {
                return;
            }

            ((TApplication)Application.Current).SignalExternalCommandLineArgs(args);
        }

        #endregion

        #region Private Classes

        /// <summary>
        /// Remoting service class which is exposed by the server i.e the first instance and called by the second instance
        /// to pass on the command line arguments to the first instance and cause it to activate itself.
        /// </summary>
        private class IPCRemoteService : MarshalByRefObject
        {
            /// <summary>
            /// Activates the first instance of the application.
            /// </summary>
            /// <param name="args">List of arguments to pass to the first instance.</param>
            public void InvokeFirstInstance(IList<string> args)
            {
                if (Application.Current != null)
                {
                    // Do an asynchronous call to ActivateFirstInstance function
                    Application.Current.Dispatcher.BeginInvoke(
                        DispatcherPriority.Normal, new DispatcherOperationCallback(SingleInstance<TApplication>.ActivateFirstInstanceCallback), args);
                }
            }

            /// <summary>
            /// Remoting Object's ease expires after every 5 minutes by default. We need to override the InitializeLifetimeService class
            /// to ensure that lease never expires.
            /// </summary>
            /// <returns>Always null.</returns>
            public override object InitializeLifetimeService()
            {
                return null;
            }
        }

        #endregion
    }
}

```

`\\?\C:\Dev\Projects\YAPA-2-modern\YAPA\WPF\AboutPage.xaml`:

```xaml
﻿<UserControl x:Class="YAPA.WPF.AboutPage"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:local="clr-namespace:YAPA.WPF"
             mc:Ignorable="d" 
             d:DesignHeight="300" d:DesignWidth="300">
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="*"></RowDefinition>
            <RowDefinition Height="Auto"></RowDefinition>
        </Grid.RowDefinitions>
        <StackPanel Grid.Row="0">
            <StackPanel>
                <Image Source="../Resources/Pomodoro.png" Height="90"></Image>
                <TextBlock Margin="0,5,0,0" TextWrapping="Wrap"  TextAlignment="Center"><Run Text="Yet Another Pomodoro Application 2 follow at:"/><LineBreak />
                    <Hyperlink Click="Hyperlink_Click" NavigateUri="https://github.com/YetAnotherPomodoroApp/YAPA-2" TextDecorations=""><Run Text="https://github.com/YetAnotherPomodoroApp/YAPA-2"/></Hyperlink>
                </TextBlock>
            </StackPanel>

            <StackPanel Orientation="Horizontal" Margin="0,20,0,0" HorizontalAlignment="Center">
                <TextBlock>           
                    <Hyperlink NavigateUri="mailto:pomodoroapp@outlook.com?subject=YAPA 2" RequestNavigate="OnNavigate">
                        pomodoroapp@outlook.com
                    </Hyperlink>
                </TextBlock>
            </StackPanel>
        </StackPanel>

        <Button Grid.Row="1" VerticalAlignment="Bottom"  Content="Import data from YAPA 1" Style="{DynamicResource MaterialDesignFlatButton}" Click="Import_OnClick"></Button>

    </Grid>
</UserControl>

```

`\\?\C:\Dev\Projects\YAPA-2-modern\YAPA\WPF\AboutPage.xaml.cs`:

```cs
﻿using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Windows;
using System.Windows.Documents;
using System.Windows.Navigation;
using YAPA.Shared.Contracts;

namespace YAPA.WPF
{
    public partial class AboutPage
    {
        private readonly IPomodoroRepository _pomodoroRepository;

        public AboutPage(IPomodoroRepository pomodoroRepository)
        {
            _pomodoroRepository = pomodoroRepository;
            InitializeComponent();
        }

        private void Hyperlink_Click(object sender, RoutedEventArgs e)
        {
            Process.Start(((Hyperlink)sender).NavigateUri.ToString());
        }


        private void Import_OnClick(object sender, RoutedEventArgs e)
        {
            var dlg = new Microsoft.Win32.OpenFileDialog
            {
                DefaultExt = ".csv",
                Filter = "CSV (*.csv)|*.csv"
            };

            var result = dlg.ShowDialog();


            if (result == null || result == false)
            {
                return;
            }

            //We expect csv
            //Date,int
            try
            {
                var pomodoros = new List<PomodoroEntity>();

                using (var input = new StreamReader(dlg.FileName))
                {
                    string line;
                    while ((line = input.ReadLine()) != null)
                    {
                        var parts = line.Split(',');
                        if (parts.Length != 2)
                        {
                            MessageBox.Show($"Invalid line in file:{line}", "Error while importing", MessageBoxButton.OK);

                            return;
                        }
                        var date = DateTime.Parse(parts[0]).Date;
                        var completed = Int32.Parse(parts[1]);

                        for (int i = 0; i < completed; i++)
                        {
                            pomodoros.Add(new PomodoroEntity { DateTime = date, Count = 1 });
                        }
                    }
                }

                foreach (var pomodoro in pomodoros)
                {
                    _pomodoroRepository.Add(pomodoro);
                }

                MessageBox.Show("Imported successfully", "Import", MessageBoxButton.OK);
            }

            catch (Exception ex)
            {
                MessageBox.Show(ex.Message, "Error while importing", MessageBoxButton.OK);
            }
        }

        private void OnNavigate(object sender, RequestNavigateEventArgs e)
        {
            Process.Start(e.Uri.AbsoluteUri);
            e.Handled = true;
        }

    }
}

```

`\\?\C:\Dev\Projects\YAPA-2-modern\YAPA\WPF\DatabaseContext.cs`:

```cs
﻿using System;
using Microsoft.EntityFrameworkCore;
using YAPA.Plugins.Dashboard;
using YAPA.Shared.Contracts;
using DbContext = Microsoft.EntityFrameworkCore.DbContext;
using YAPA.Shared.Common;

namespace YAPA.WPF
{
    public class DatabaseContext : DbContext
    {
        private readonly string _dbPath;

        public DatabaseContext()
        {
            
        }

        public DatabaseContext(string dbPath)
        {
            _dbPath = dbPath;
        }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            optionsBuilder.UseSqlite($"Filename={_dbPath}");
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            
            modelBuilder.Entity<PomodoroEntity>().HasKey(x => x.Id);
            base.OnModelCreating(modelBuilder);
        }

        public DbSet<PomodoroEntity> Pomodoros { get; set; }
    }

    public static class PomodoroExtensions
    {
        public static PomodoroViewModel ToPomodoroViewModel(this PomodoroGithubDashboardModel pomo, int week, PomodoroLevelEnum level = PomodoroLevelEnum.Level0)
        {
            return new PomodoroViewModel()
            {
                Count = pomo.Count,
                DateTime = pomo.DateTime.TryToLocalTime(),
                Week = week,
                Level = level
            };
        }
    }

    public class PomodoroViewModel
    {
        public DateTime DateTime { get; set; }

        public int Count { get; set; }

        public PomodoroLevelEnum Level { get; set; }
        public int Week { get; set; }
    }
}

```

`\\?\C:\Dev\Projects\YAPA-2-modern\YAPA\WPF\DependencyContainer.cs`:

```cs
﻿using Autofac;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Windows;
using Microsoft.Extensions.Logging;
using NLog;
using YAPA.Plugins.Dashboard;
using YAPA.Plugins.PomodoroEngine;
using YAPA.Shared.Common;
using YAPA.Shared.Contracts;
using YAPA.WPF.PluginManager;
using YAPA.WPF.SettingsMananger;
using YAPA.WPF.Specifics;
using YAPA.WPF.ThemeManager;
using ILogger = Microsoft.Extensions.Logging.ILogger;
using YAPA.WPF.Shared.Common;

namespace YAPA.WPF
{
    public class DependencyContainer
    {
        public IContainer Container { get; }
        public IPluginManager PluginManager { get; }
        public IThemeManager ThemeManager { get; }
        public Dashboard Dashboard { get; }
        public Window MainWindow { get; }

        public static Dictionary<string, bool> LoadedAssemblies { get; } = new Dictionary<string, bool>();

        public DependencyContainer()
        {
            Container = ConfigureContainer();

            var di = new DependencyInjector(Container);
            di.RegisterInstance(di, typeof(IDependencyInjector));

            AppDomain.CurrentDomain.AssemblyResolve += CurrentDomain_AssemblyResolve;

            //Themes
            ThemeManager = new ThemeManager.ThemeManager(di, GetThemeMetas(), (ThemeManagerSettings)Container.Resolve(typeof(ThemeManagerSettings)));
            var themeUpdater = new ContainerBuilder();
            themeUpdater.RegisterInstance(ThemeManager).As<IThemeManager>().SingleInstance();
            themeUpdater.RegisterType(ThemeManager.ActiveTheme.Theme).As<IApplication>().SingleInstance();
            themeUpdater.Update(Container);

            //Plugins
            PluginManager = new PluginManager.PluginManager(di, GetPluginMetas(), Container.Resolve<PluginManagerSettings>(), Container.Resolve<ISettings>());
            var updater = new ContainerBuilder();
            updater.RegisterInstance(PluginManager).As<IPluginManager>().SingleInstance();
            updater.Update(Container);

            PluginManager.InitPlugins();

            Dashboard = Container.Resolve<Dashboard>();

            MainWindow = (Window)Container.Resolve<IApplication>();
        }

        private static IContainer ConfigureContainer()
        {
            var builder = new ContainerBuilder();

            builder.RegisterInstance(LogManager.GetLogger("YAPA2")).As<NLog.ILogger>();

            builder.RegisterType<JsonYapaSettings>().As<ISettings>().AutoActivate().SingleInstance();

            builder.RegisterType<NewftonsJson>().As<IJson>().SingleInstance();

            builder.RegisterType(typeof(PomodoroEngine)).As<IPomodoroEngine>().SingleInstance();
            builder.RegisterType(typeof(PomodoroEngineSettings)).As<PomodoroEngineSettings>();

            builder.RegisterType(typeof(Timer)).As<ITimer>();
            builder.RegisterType(typeof(SoundPlayer)).As<IMusicPlayer>();

            builder.RegisterType(typeof(MainViewModel)).As<IMainViewModel>();

            builder.RegisterType(typeof(WpfThreading)).As<IThreading>();

            builder.RegisterType(typeof(ThemeManagerSettings));
            //builder.RegisterType(typeof(ThemeManagerSettingWindow));

            builder.RegisterType(typeof(PluginManagerSettings));
            builder.RegisterType(typeof(PluginManagerSettingWindow));

            builder.RegisterType(typeof(AboutPage));

            builder.RegisterType(typeof(GithubDashboard));
            builder.RegisterType(typeof(Dashboard)).SingleInstance();

            builder.RegisterType(typeof(WpfEnviroment)).As<IEnvironment>().SingleInstance();

            builder.RegisterType(typeof(ItemRepository)).As<IPomodoroRepository>().SingleInstance();

            builder.RegisterType(typeof(ShowSettingsCommand)).As<IShowSettingsCommand>();
            builder.RegisterType(typeof(DateTimeWrapper)).As<IDate>();

            builder.RegisterType(typeof(SettingManager)).As<ISettingManager>().SingleInstance();

            builder.RegisterType(typeof(PomodoroProfileSettings));

            builder.RegisterType(typeof(SettingsWindow)).As<SettingsWindow>().InstancePerDependency();

            builder.RegisterType(typeof(FontService)).As<IFontService>();


            var container = builder.Build();

            var updater = new ContainerBuilder();
            updater.RegisterInstance(container).As<IContainer>();
            updater.Update(container);

            return container;
        }

        private static IEnumerable<IPluginMeta> GetPluginMetas()
        {
            return GetTypes<IPluginMeta>("Plugins");
        }

        private static Assembly CurrentDomain_AssemblyResolve(object sender, ResolveEventArgs args)
        {
            var location = args?.RequestingAssembly?.Location;
            if (string.IsNullOrEmpty(location))
            {
                return null;
            }
            return Assembly.LoadFile(location);
        }

        private static IEnumerable<IThemeMeta> GetThemeMetas()
        {
            return GetTypes<IThemeMeta>("Themes");
        }

        private static IEnumerable<T> GetTypes<T>(params string[] folders)
        {
            var exePath = AppDomain.CurrentDomain.BaseDirectory;

            var assembliesInDirectory = folders
                .Select(x => Path.Combine(exePath, x))
                    .Where(Directory.Exists)
                    .SelectMany(x => Directory.GetFiles(x, "*.dll", SearchOption.AllDirectories))
                    .Distinct();

            var results = new List<T>();

            var loadedAssemblies = AppDomain.CurrentDomain.GetAssemblies().ToList();
            var loadedAssemblyPaths = loadedAssemblies.Where(x => !x.IsDynamic).Select(a => Path.GetFileName(a.Location)).ToArray();

            var assembliesToLoad = assembliesInDirectory.Where(r => !loadedAssemblyPaths.Contains(Path.GetFileName(r), StringComparer.InvariantCultureIgnoreCase)).ToList();
            assembliesToLoad.ForEach(path => loadedAssemblies.Add(AppDomain.CurrentDomain.Load(AssemblyName.GetAssemblyName(path))));

            foreach (var assembly in AppDomain.CurrentDomain.GetAssemblies().Where(x => !x.IsDynamic))
            {
                foreach (var t in assembly.GetExportedTypes())
                {
                    if (t.GetInterfaces().Contains(typeof(T)))
                    {
                        results.Add((T)Activator.CreateInstance(t));
                    }
                }
            }

            return results;
        }

    }
}

```

`\\?\C:\Dev\Projects\YAPA-2-modern\YAPA\WPF\InternalPluginAttribute.cs`:

```cs
﻿using System;

namespace YAPA.WPF
{
    [AttributeUsage(AttributeTargets.Class)]
    public class BuiltInPluginAttribute : Attribute
    {
        public int Order { get; set; }
        public bool Hide { get; set; }

        public BuiltInPluginAttribute()
        {
            Order = 999;
            Hide = false;
        }

    }
}

```

`\\?\C:\Dev\Projects\YAPA-2-modern\YAPA\WPF\PluginManager\PluginManager.cs`:

```cs
﻿using System;
using System.Collections.Generic;
using System.Linq;
using YAPA.Shared.Contracts;

namespace YAPA.WPF.PluginManager
{
    public class PluginManager : IPluginManager
    {
        private readonly IDependencyInjector _container;
        private readonly PluginManagerSettings _settings;
        private IEnumerable<IPlugin> _pluginInstances;
        private IEnumerable<string> _enabledPlugins;
        private bool _initialised = false;

        public PluginManager(IDependencyInjector container, IEnumerable<IPluginMeta> metas, PluginManagerSettings settings, ISettings gloabalSettings)
        {
            _container = container;
            _settings = settings;

            ApplyMigration(settings, gloabalSettings);

            _enabledPlugins = _settings.EnabledPlugins;
            Plugins = metas;
        }

        private static void ApplyMigration(PluginManagerSettings settings, ISettings gloabalSettings)
        {
            var migrations = new List<Tuple<string, string>> { Tuple.Create("Minimize to tray", "SystemTray") };
            var enabled = settings.EnabledPlugins;
            foreach (var migration in migrations)
            {
                if (enabled.Contains(migration.Item1))
                {
                    enabled.Remove(migration.Item1);
                    enabled.Add(migration.Item2);
                }
            }
            settings.EnabledPlugins = enabled;

            gloabalSettings.Save();
        }

        public IEnumerable<IPluginMeta> Plugins { get; }

        public IEnumerable<IPluginMeta> BuiltInPlugins
        {
            get
            {
                return Plugins
                .Where(x =>
                {
                    var attribute = x.GetType().GetCustomAttributes(typeof(BuiltInPluginAttribute), false).FirstOrDefault();
                    return attribute != null;
                })
                .OrderBy(x => ((BuiltInPluginAttribute)x.GetType().GetCustomAttributes(typeof(BuiltInPluginAttribute), false).FirstOrDefault()).Order);
            }
        }

        public IEnumerable<IPluginMeta> CustomPlugins
        {
            get
            {
                return Plugins.Where(_ => _.GetType().GetCustomAttributes(false).FirstOrDefault(y => y.GetType() == typeof(BuiltInPluginAttribute)) == null);
            }
        }

        public IEnumerable<IPluginMeta> ActivePlugins
        {
            get { return CustomPlugins.Where(x => _enabledPlugins.Contains(x.Id)); }
        }

        public object ResolveSettingWindow(IPluginMeta plugin)
        {
            if (plugin.SettingEditWindow == null)
            {
                return plugin.SettingEditWindow;
            }
            return _container.Resolve(plugin.SettingEditWindow);
        }

        public void InitPlugins()
        {
            if (_initialised)
            {
                return;
            }
            RegisterPluginSettings(_container);
            RegisterPluginSettingsWindows(_container);
            _pluginInstances = RegisterPlugins(_container);
            _initialised = true;
        }

        private IEnumerable<IPlugin> RegisterPlugins(IDependencyInjector container)
        {
            foreach (var plugin in Plugins.Union(BuiltInPlugins).Where(x => x.Plugin != null))
            {
                container.Register(plugin.Plugin, true);
            }

            return ActivePlugins.Union(BuiltInPlugins).Where(x => x.Plugin != null).Select(plugin => (IPlugin)container.Resolve(plugin.Plugin)).ToList();
        }

        private void RegisterPluginSettings(IDependencyInjector container)
        {
            foreach (var plugin in Plugins.Union(BuiltInPlugins).Where(x => x.Settings != null))
            {
                container.Register(plugin.Settings);
            }
        }

        private void RegisterPluginSettingsWindows(IDependencyInjector container)
        {
            foreach (var plugin in Plugins.Union(BuiltInPlugins).Where(x => x.SettingEditWindow != null))
            {
                container.Register(plugin.SettingEditWindow);
            }
        }
    }

    public static class PluginExtensions
    {
        public static bool IsHidden(this IPluginMeta plugin)
        {
            var attribute = plugin.GetType().GetCustomAttributes(typeof(BuiltInPluginAttribute), false).FirstOrDefault();
            return attribute != null && ((BuiltInPluginAttribute)attribute).Hide;
        }
    }

    public class PluginManagerSettings : IPluginSettings
    {
        private readonly ISettingsForComponent _settings;

        public List<string> EnabledPlugins
        {
            get { return _settings.Get(nameof(EnabledPlugins), new List<string>()); }
            set { _settings.Update(nameof(EnabledPlugins), value); }
        }

        public PluginManagerSettings(ISettings settings)
        {
            _settings = settings.GetSettingsForComponent(nameof(PluginManager));
        }

        public void DeferChanges()
        {
            _settings.DeferChanges();
        }
    }
}

```

`\\?\C:\Dev\Projects\YAPA-2-modern\YAPA\WPF\PluginManager\PluginManagerSettingWindow.xaml`:

```xaml
﻿<UserControl x:Class="YAPA.WPF.PluginManager.PluginManagerSettingWindow"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             mc:Ignorable="d" 
             d:DesignHeight="300" d:DesignWidth="300">

    <Grid>
        <ListBox x:Name="PluginList">
            <ListBox.ItemTemplate>
                <DataTemplate>
                    <CheckBox 
                        IsChecked="{Binding Enabled, Mode=TwoWay}"
                        Content="{Binding Title}" Checked="PluginChanged" Unchecked="PluginChanged"></CheckBox>
                </DataTemplate>
            </ListBox.ItemTemplate>
        </ListBox>
    </Grid>
</UserControl>

```

`\\?\C:\Dev\Projects\YAPA-2-modern\YAPA\WPF\PluginManager\PluginManagerSettingWindow.xaml.cs`:

```cs
﻿using System.Collections.Generic;
using System.Linq;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Input;
using YAPA.Shared.Contracts;

namespace YAPA.WPF.PluginManager
{
    public partial class PluginManagerSettingWindow : UserControl
    {
        private readonly PluginManagerSettings _settings;
        private readonly ISettingManager _settingManager;
        public List<PluginViewModel> Plugins { get; set; }
        public ICommand TogglePlugin { get; set; }
        private readonly List<string> _enabledPlugins;

        public PluginManagerSettingWindow(IPluginManager plugins, PluginManagerSettings settings, ISettings globalSettings, ISettingManager settingManager)
        {
            _settings = settings;
            _settings.DeferChanges();

            _settingManager = settingManager;
            globalSettings.PropertyChanged += _globalSettings_PropertyChanged;

            _enabledPlugins = _settings.EnabledPlugins;

            Plugins = new List<PluginViewModel>();
            foreach (var pluginMeta in plugins.CustomPlugins)
            {
                Plugins.Add(new PluginViewModel
                {
                    Title = pluginMeta.Title,
                    Enabled = _enabledPlugins.Contains(pluginMeta.Id),
                    Id = pluginMeta.Id
                });
            }

            InitializeComponent();

            PluginList.ItemsSource = Plugins;
            DataContext = this;
        }

        private void _globalSettings_PropertyChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e)
        {
            if (e.PropertyName == $"{nameof(PluginManager)}.{nameof(_settings.EnabledPlugins)}")
            {
                _settingManager.RestartNeeded = true;
            }
        }

        private void PluginChanged(object sender, RoutedEventArgs e)
        {
            var context = ((CheckBox)sender).DataContext as PluginViewModel;
            if (context == null)
            {
                return;
            }
            if (context.Enabled)
            {
                var existing = _enabledPlugins.FirstOrDefault(x => x == context.Id);
                if (string.IsNullOrEmpty(existing))
                {
                    _enabledPlugins.Add(context.Id);
                }
            }
            else
            {
                var existing = _enabledPlugins.FirstOrDefault(x => x == context.Id);
                if (existing != null)
                {
                    _enabledPlugins.Remove(existing);
                }
            }

            _settings.EnabledPlugins = _enabledPlugins.Any() ? _enabledPlugins : null;
        }
    }

    public class PluginViewModel
    {
        public string Title { get; set; }
        public string Id { get; set; }
        public bool Enabled { get; set; }
    }

}

```

`\\?\C:\Dev\Projects\YAPA-2-modern\YAPA\WPF\ReleaseNotesWindow.xaml`:

```xaml
﻿<Window x:Class="YAPA.WPF.ReleaseNotesWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        mc:Ignorable="d"
        Title="Release notes" Height="300" Width="450"
        WindowStartupLocation="CenterOwner"
        Topmost="True">
    <Window.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.Light.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.Defaults.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MaterialDesignColors;component/Themes/Recommended/Primary/MaterialDesignColor.DeepPurple.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MaterialDesignColors;component/Themes/Recommended/Accent/MaterialDesignColor.Lime.xaml" />
            </ResourceDictionary.MergedDictionaries>
        </ResourceDictionary>
    </Window.Resources>
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="*"></RowDefinition>
            <RowDefinition Height="Auto"></RowDefinition>
        </Grid.RowDefinitions>
        <WebBrowser Grid.Row="0" x:Name="Browser"></WebBrowser>
        <Button Content="Close" Width="100" Margin="0,5,0,5" x:Name="CloseButon" Grid.Row="1" Click="CloseButon_OnClick" Style="{DynamicResource MaterialDesignFlatButton}"></Button>
    </Grid>
</Window>

```

`\\?\C:\Dev\Projects\YAPA-2-modern\YAPA\WPF\ReleaseNotesWindow.xaml.cs`:

```cs
﻿using System.Windows;

namespace YAPA.WPF
{
    public partial class ReleaseNotesWindow
    {
        private readonly string _releaseNotes;

        public ReleaseNotesWindow(string releaseNotes)
        {
            _releaseNotes = releaseNotes;
            InitializeComponent();
            Loaded += ReleaseNotesWindow_Loaded;
        }

        private void ReleaseNotesWindow_Loaded(object sender, RoutedEventArgs e)
        {
            Browser.NavigateToString(_releaseNotes);
        }

        private void CloseButon_OnClick(object sender, RoutedEventArgs e)
        {
            Close();
        }
    }
}

```

`\\?\C:\Dev\Projects\YAPA-2-modern\YAPA\WPF\RssFeedNormalizer.cs`:

```cs
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.ServiceModel.Syndication;
using System.Text.RegularExpressions;
using System.Xml.Linq;
using SimpleFeedReader;

namespace YAPA.WPF
{
    /// <summary>
    /// https://github.com/RobThree/SimpleFeedReader/blob/master/SimpleFeedReader/DefaultFeedItemNormalizer.cs
    /// </summary>
    public class RssFeedNormalizer : IFeedItemNormalizer
    {
        private static Regex _controlCodesRegex = new Regex(@"[\x00-\x1F\x7f]", RegexOptions.Compiled);
        private static Regex _whiteSpaceRegex = new Regex(@"\s{2,}", RegexOptions.Compiled);

        /// <summary>
        /// Normalizes a SyndicationItem into a FeedItem.
        /// </summary>
        /// <param name="feed">The <see cref="SyndicationFeed"/> on which the item was retrieved.</param>
        /// <param name="item">A <see cref="SyndicationItem"/> to normalize into a <see cref="FeedItem"/>.</param>
        /// <returns>Returns a normalized <see cref="FeedItem"/>.</returns>
        public virtual FeedItem Normalize(SyndicationFeed feed, SyndicationItem item)
        {
            var alternatelink = item.Links.FirstOrDefault(l => l.RelationshipType == null || l.RelationshipType.Equals("alternate", StringComparison.OrdinalIgnoreCase));

            Uri itemuri = null;
            Uri parsed;
            if (alternatelink == null && !Uri.TryCreate(item.Id, UriKind.Absolute, out parsed))
            {
                itemuri = parsed;
            }
            else
            {
                itemuri = alternatelink.GetAbsoluteUri();
            }

            return new FeedItem
            {
                Title = item.Title == null ? null : Normalize(item.Title.Text),
                Content = item.Content == null ? null : Normalize(((TextSyndicationContent)item.Content).Text),
                Summary = item.Summary == null ? null : Normalize(item.Summary.Text),
                Uri = itemuri,
            };
        }

        private static IEnumerable<Uri> GetFeedItemImages(SyndicationItem item)
        {
            return item.ElementExtensions
                .Where(p => p.OuterName.Equals("image"))
                .Select(p => new Uri(p.GetObject<XElement>().Value));
        }

        private static string Normalize(string value)
        {
            if (!string.IsNullOrEmpty(value))
            {
                value = HtmlDecode(value);
                if (string.IsNullOrEmpty(value))
                    return value;

                value = StripDoubleOrMoreWhiteSpace(RemoveControlChars(value));
                value = value.Normalize().Trim();
            }
            return value;
        }

        private static string RemoveControlChars(string value)
        {
            return _controlCodesRegex.Replace(value, " ");
        }

        private static string StripDoubleOrMoreWhiteSpace(string value)
        {
            return _whiteSpaceRegex.Replace(value, " ");
        }


        private static string HtmlDecode(string value, int threshold = 5)
        {
            int c = 0;
            string newvalue = WebUtility.HtmlDecode(value);
            while (!newvalue.Equals(value) && c < threshold)    //Keep decoding (if a string is double/triple/... encoded; we want the original)
            {
                c++;
                value = newvalue;
                newvalue = WebUtility.HtmlDecode(value);
            }
            if (c >= threshold) //Decoding threshold exceeded?
                return null;

            return newvalue;
        }
    }
}

```

`\\?\C:\Dev\Projects\YAPA-2-modern\YAPA\WPF\SettingsMananger\SettingManager.cs`:

```cs
﻿using System.ComponentModel;
using System.Runtime.CompilerServices;
using YAPA.Shared.Contracts;

namespace YAPA.WPF.SettingsMananger
{
    public class SettingManager : ISettingManager
    {
        private bool _restartNeeded;
        private string _newVersion;

        public bool RestartNeeded
        {
            get => _restartNeeded;
            set
            {
                _restartNeeded = value;
                OnPropertyChanged();
            }
        }

        public string NewVersion
        {
            get => _newVersion;
            set
            {
                _newVersion = value;
                OnPropertyChanged();
            }
        }

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
    }
}

```

`\\?\C:\Dev\Projects\YAPA-2-modern\YAPA\WPF\SettingsMananger\SettingsWindow.xaml`:

```xaml
﻿<Window x:Class="YAPA.WPF.SettingsMananger.SettingsWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:YAPA"
        WindowStyle="None"
        TextElement.Foreground="{DynamicResource MaterialDesignBody}"
        Background="{DynamicResource MaterialDesignPaper}"
        MouseLeftButtonDown="Settings_OnMouseLeftButtonDown"
        FontFamily="pack://application:,,,/MaterialDesignThemes.Wpf;component/Resources/Roboto/#Roboto"
        mc:Ignorable="d"
        ResizeMode="NoResize"
        Title="Settings" Height="440" Width="800"
        Topmost="True">
    <Window.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.Light.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.Defaults.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MaterialDesignColors;component/Themes/Recommended/Primary/MaterialDesignColor.DeepPurple.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MaterialDesignColors;component/Themes/Recommended/Accent/MaterialDesignColor.Lime.xaml" />
            </ResourceDictionary.MergedDictionaries>
        </ResourceDictionary>
    </Window.Resources>
    <Grid Name="SettingGrid">
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="2*"></ColumnDefinition>
            <ColumnDefinition Width="5*"></ColumnDefinition>
        </Grid.ColumnDefinitions>
        <Grid.RowDefinitions>
            <RowDefinition Height="*"></RowDefinition>
            <RowDefinition Height="Auto"></RowDefinition>
        </Grid.RowDefinitions>

        <TreeView Grid.Column="0" Grid.Row="0" x:Name="SettingsTree">
            <TreeView.ItemTemplate>
                <DataTemplate>
                    <TextBlock HorizontalAlignment="Left" Text="{Binding Header}" Style="{DynamicResource MaterialDesignBody1TextBlock}"></TextBlock>
                </DataTemplate>
            </TreeView.ItemTemplate>
        </TreeView>

        <StackPanel Grid.Column="1" Grid.Row="1" Orientation="Horizontal" HorizontalAlignment="Right">
            <Button Command="{Binding CancelCommand}" Margin="5">Close</Button>
            <Button Command="{Binding SaveCommand}" Margin="5">Save</Button>
        </StackPanel>


        <TextBlock Grid.Column="0" Grid.Row="1" x:Name="Version" VerticalAlignment="Bottom" Margin="4"></TextBlock>
        
        <Border Visibility="Collapsed" x:Name="RestartAppNotification" Grid.Column="0" Grid.ColumnSpan="2" Width="300" Height="20" VerticalAlignment="Top" Grid.Row="0" Background="Gold" CornerRadius="8,8,8,8" >
            <TextBlock x:Name="NotificationMessage" Text="" HorizontalAlignment="Center" VerticalAlignment="Center"></TextBlock>
        </Border>

    </Grid>
</Window>

```

`\\?\C:\Dev\Projects\YAPA-2-modern\YAPA\WPF\SettingsMananger\SettingsWindow.xaml.cs`:

```cs
﻿using System.Linq;
using System.Reflection;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Input;
using YAPA.Commands;
using YAPA.Shared.Contracts;
using YAPA.WPF.PluginManager;

namespace YAPA.WPF.SettingsMananger
{
    public partial class SettingsWindow
    {
        private readonly ISettings _settings;
        private readonly ISettingManager _mananger;
        private readonly IPluginManager _pluginManager;
        private readonly IDependencyInjector _container;
        private readonly IEnvironment _environment;
        public ICommand SaveCommand { get; set; }
        public ICommand CancelCommand { get; set; }
        private UserControl _settingPage = null;

        public SettingsWindow(ISettings settings, ISettingManager mananger, IPluginManager pluginManager, IDependencyInjector container, IEnvironment environment)
        {
            _settings = settings;
            _mananger = mananger;
            _pluginManager = pluginManager;
            _container = container;
            _environment = environment;
            _mananger.PropertyChanged += _mananger_PropertyChanged;

            SaveCommand = new SaveSettingsCommand(_settings);
            CancelCommand = new CancelSettingsCommand(this, _settings);

            DataContext = this;
            InitializeComponent();

            SettingsTree.SelectedItemChanged += SettingsTree_SelectedItemChanged;

            foreach (var rootSetting in _pluginManager.BuiltInPlugins.Where(x => x.SettingEditWindow != null && !x.IsHidden()))
            {
                var builtinPlugin = new TreeViewItem
                {
                    Header = rootSetting.Title,
                    IsSelected = SettingsTree.Items.IsEmpty,
                    Tag = _container.Resolve(rootSetting.SettingEditWindow)
                };

                SettingsTree.Items.Add(builtinPlugin);
            }

            var pluginsTree = new TreeViewItem
            {
                Header = "Plugins",
                Tag = _container.Resolve(typeof(PluginManagerSettingWindow))
            };

            foreach (var customSettings in _pluginManager.ActivePlugins.Where(x => x.SettingEditWindow != null))
            {
                pluginsTree.Items.Add(new TreeViewItem
                {
                    Header = customSettings.Title,
                    Tag = _container.Resolve(customSettings.SettingEditWindow)
                });
            }

            SettingsTree.Items.Add(pluginsTree);

            var aboutPage = new TreeViewItem { Header = "About", Tag = _container.Resolve(typeof(AboutPage)) };
            SettingsTree.Items.Add(aboutPage);

            UpdateNotificationMessage();

            Loaded += Settings_Loaded;
            IsVisibleChanged += SettingsWindow_IsVisibleChanged;
        }

        private void SettingsWindow_IsVisibleChanged(object sender, DependencyPropertyChangedEventArgs e)
        {
            if (Visibility == Visibility.Visible)
            {
                RefreshSelectedMenuItem();
            }
        }

        private void UpdateNotificationMessage()
        {
            try
            {
                RestartAppNotification.Visibility = _mananger.RestartNeeded ? Visibility.Visible : Visibility.Collapsed;

                var settingsChanged = "Restart application to apply changes";
                var updatesInstalled = "Restart application to apply updates";

                var message = settingsChanged;

                if (!string.IsNullOrEmpty(_mananger.NewVersion))
                {
                    message = updatesInstalled;
                }

                NotificationMessage.Text = message;
            }
            catch
            {

            }
        }

        private void Settings_Loaded(object sender, RoutedEventArgs e)
        {
            var assembly = Assembly.GetExecutingAssembly();

            Version.Text = assembly.GetName().Version.ToString(3);

            if (_environment.PreRelease())
            {
                Version.Text += " pre-release";
            }
        }

        private void _mananger_PropertyChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e)
        {
            if (e.PropertyName == nameof(_mananger.RestartNeeded)
                || e.PropertyName == nameof(_mananger.NewVersion))
            {
                UpdateNotificationMessage();
            }
        }

        private void SettingsTree_SelectedItemChanged(object sender, RoutedPropertyChangedEventArgs<object> e)
        {
            RefreshSelectedMenuItem();
        }

        private void RefreshSelectedMenuItem()
        {
            if (_settingPage != null)
            {
                SettingGrid.Children.Remove(_settingPage);
            }

            _settingPage = null;

            if (!(SettingsTree.SelectedItem is TreeViewItem treeItem))
            {
                return;
            }

            if (treeItem.Tag is IPluginSettingWindow)
            {
                ((IPluginSettingWindow)treeItem.Tag).Refresh();
            }

            if (treeItem.Tag is UserControl)
            {
                _settingPage = (UserControl)treeItem.Tag;
                SettingGrid.Children.Add(_settingPage);
                Grid.SetColumn(_settingPage, 1);
                Grid.SetRow(_settingPage, 0);
                _settingPage.Margin = new Thickness(10, 20, 10, 10);
            }
        }

        private void Settings_OnMouseLeftButtonDown(object sender, MouseButtonEventArgs e)
        {
            try
            {
                OnMouseLeftButtonDown(e);
                DragMove();
                e.Handled = true;
            }
            catch
            {
            }
        }
    }
}

```

`\\?\C:\Dev\Projects\YAPA-2-modern\YAPA\WPF\Specifics\DependencyInjector.cs`:

```cs
﻿using System;
using Autofac;
using YAPA.Shared.Contracts;

namespace YAPA.WPF.Specifics
{
    public class DependencyInjector : IDependencyInjector
    {
        private readonly IContainer _autofac;

        public DependencyInjector(IContainer autofac)
        {
            _autofac = autofac;
        }

        public object Resolve(Type type)
        {
            return _autofac.Resolve(type);
        }

        public void Register(Type type, bool singleInsntace = false)
        {
            var updater = new ContainerBuilder();

            var registration = updater.RegisterType(type);


            if (singleInsntace)
            {
                registration.SingleInstance();
            }

            updater.Update(_autofac);
        }

        public void RegisterInstance(object instance, Type asType = null)
        {
            var updater = new ContainerBuilder();

            var registraction = updater.RegisterInstance(instance);

            if (asType != null)
            {
                registraction.As(asType);
            }
            updater.Update(_autofac);
        }
    }
}

```

`\\?\C:\Dev\Projects\YAPA-2-modern\YAPA\WPF\Specifics\NewftonsJson.cs`:

```cs
﻿using System;
using System.Collections;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using YAPA.Shared.Contracts;

namespace YAPA.WPF.Specifics
{
    public class NewftonsJson : IJson
    {
        public string Serialize(object obj)
        {
            return JsonConvert.SerializeObject(obj, Formatting.Indented);
        }

        public T Deserialize<T>(string obj)
        {
            return JsonConvert.DeserializeObject<T>(obj);
        }

        public T ConvertToType<T>(object value)
        {
            if (value == null)
            {
                return default(T);
            }
            else if (value.GetType() == typeof(T))
            {
                return (T)value;
            }
            else if (typeof(T).IsEnum)
            {
                return (T)Enum.ToObject(typeof(T), value);
            }
            else if (typeof(T).IsValueType || value is string)
            {
                return (T)Convert.ChangeType(value, typeof(T));
            }
            else if (value is JArray)
            {
                return ((JArray)value).ToObject<T>();
            }
            else
            {
                return ((JObject)value).ToObject<T>();
            }
        }

        public bool AreEqual(object valA, object valB)
        {
            if (valA == null && valB == null)
            {
                return true;
            }

            if (valA == null && valB != null
                || valA != null && valB == null)
            {
                return false;
            }

            if (valA.GetType().IsValueType || valA is string)
            {
                return valA.Equals(valB);
            }
            else if (valA.GetType().GetInterface(nameof(IEnumerable)) != null)
            {
                var listA = (IEnumerable)valA;
                IEnumerable listB = null;
                if (valB is JObject)
                {
                    listB = (IEnumerable)((JObject)valB).ToObject(valA.GetType());
                }
                else
                {
                    listB = (IEnumerable)valB;
                }


                if (Count(listA) != Count(listB))
                {
                    return false;
                }

                foreach (var b in listB)
                {
                    var contains = false;
                    foreach (var a in listA)
                    {
                        contains |= b.ToString().Equals(a);
                    }

                    if (contains == false)
                    {
                        return false;
                    }
                }
                return true;
            }

            return false;
        }

        public int Count(IEnumerable source)
        {
            int c = 0;
            var e = source.GetEnumerator();
            while (e.MoveNext())
                c++;
            return c;
        }
    }
}

```

`\\?\C:\Dev\Projects\YAPA-2-modern\YAPA\WPF\Specifics\ShowSettingsCommand.cs`:

```cs
﻿using System;
using System.Windows;
using YAPA.Shared.Contracts;
using YAPA.WPF.SettingsMananger;

namespace YAPA.WPF.Specifics
{
    public class ShowSettingsCommand : IShowSettingsCommand
    {
        private readonly SettingsWindow _settings;
        private readonly IDependencyInjector _container;

        public ShowSettingsCommand(SettingsWindow settings,  IDependencyInjector container)
        {
            _settings = settings;
            _container = container;
        }

        public bool CanExecute(object parameter)
        {
            return true;
        }

        public void Execute(object parameter)
        {
            _settings.Owner = (Window)_container.Resolve(typeof(IApplication));
            _settings.WindowStartupLocation = WindowStartupLocation.CenterOwner;
            _settings.ShowDialog();
        }

        public event EventHandler CanExecuteChanged;
    }
}

```

`\\?\C:\Dev\Projects\YAPA-2-modern\YAPA\WPF\Specifics\SoundPlayer.cs`:

```cs
﻿using System;
using System.IO;
using System.Windows.Media;
using YAPA.Shared.Contracts;
using LogLevel = NLog.LogLevel;

namespace YAPA.WPF.Specifics
{
    public class SoundPlayer : IMusicPlayer
    {
        private readonly NLog.ILogger _logger;
        private readonly MediaPlayer _musicPlayer;
        private bool _repeat;

        public SoundPlayer(NLog.ILogger logger)
        {
            _logger = logger;
            _musicPlayer = new MediaPlayer();
            _musicPlayer.MediaEnded += MusicPlayer_MediaEnded;
            _repeat = false;
        }

        private void MusicPlayer_MediaEnded(object sender, System.EventArgs e)
        {
            if (_musicPlayer.Source == null)
            {
                _logger.Log(LogLevel.Info, $"Audio file not specified");
                return;
            }

            if (!File.Exists(_musicPlayer.Source.LocalPath))
            {
                _logger.Log(LogLevel.Info, $"Audio file not found '{_musicPlayer.Source.LocalPath}'");
                return;
            }

            if (!_repeat) return;
            _musicPlayer.Position = TimeSpan.Zero;
            _musicPlayer.Play();
        }

        public void Load(string path)
        {
            if (IsPlaying)
            {
                _logger.Log(LogLevel.Info, $"Can't load new song '{path}' while old is playing '{_musicPlayer.Source.LocalPath}'");
                return;
            }

            if (!File.Exists(path))
            {
                _logger.Log(LogLevel.Info, $"Can't load new song '{path}' while old is playing '{_musicPlayer.Source.LocalPath}'");
                return;
            }

            _musicPlayer.Open(new Uri(path));
        }

        public void Play(bool repeat = false, double volume = 0.5)
        {
            if (_musicPlayer.Source == null)
            {
                _logger.Log(LogLevel.Info, "Song not specified");
                return;
            }

            if (!File.Exists(_musicPlayer.Source.LocalPath))
            {
                _logger.Log(LogLevel.Info, $"Audio file not found '{_musicPlayer.Source.LocalPath}'");
                return;
            }

            if (IsPlaying)
            {
                _logger.Log(LogLevel.Info, $"Song already playing '{_musicPlayer.Source.LocalPath}'");
                return;
            }

            _repeat = repeat;

            _musicPlayer.Volume = volume;
            _musicPlayer.Play();
            IsPlaying = true;
        }

        public void Stop()
        {
            _musicPlayer.Stop();
            IsPlaying = false;
        }

        public bool IsPlaying { get; private set; }
    }
}

```

`\\?\C:\Dev\Projects\YAPA-2-modern\YAPA\WPF\Specifics\Timer.cs`:

```cs
﻿using System;
using System.Windows.Threading;
using YAPA.Shared.Contracts;

namespace YAPA.WPF.Specifics
{
    public class Timer : ITimer
    {
        private readonly DispatcherTimer _timer;

        public Timer()
        {
            _timer = new DispatcherTimer
            {
                Interval = TimeSpan.FromSeconds(1)
            };

            _timer.Tick += _timer_Tick;
        }


        private void _timer_Tick(object sender, EventArgs e)
        {
            Tick?.Invoke();
        }

        public event Action Tick;

        public void Start()
        {
            _timer.Start();
        }

        public void Stop()
        {
            _timer.Stop();
        }
    }
}

```

`\\?\C:\Dev\Projects\YAPA-2-modern\YAPA\WPF\Specifics\WpfEnviroment.cs`:

```cs
﻿using System;
using System.IO;
using YAPA.Shared.Contracts;

namespace YAPA.WPF.Specifics
{
    public class WpfEnviroment : IEnvironment
    {
        static readonly string BaseDir = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments), @"YAPA2");
        readonly string _settingsFileLocation = Path.Combine(BaseDir, @"settings.json");
        readonly string _localSettingsFileLocation = Path.Combine(BaseDir, @"localSettings.json");
        readonly string _themeLocation = Path.Combine(BaseDir, @"settings.json");

        public WpfEnviroment()
        {
            if (!Directory.Exists(BaseDir))
            {
                Directory.CreateDirectory(BaseDir);
            }
        }

        public string GetSettings()
        {
            if (!File.Exists(_settingsFileLocation))
            {
                return "{}";
            }
            using (var file = new StreamReader(_settingsFileLocation))
            {
                return file.ReadToEnd();
            }
        }

        public void SaveSettings(string settings)
        {
            var settingDir = Path.GetDirectoryName(_settingsFileLocation);
            if (!Directory.Exists(settingDir))
            {
                Directory.CreateDirectory(settingDir);
            }

            using (var file = new StreamWriter(_settingsFileLocation))
            {
                file.Write(settings);
            }
        }

        public string GetPluginDirectory()
        {
            return Path.Combine(BaseDir, @"Plugins");
        }

        public string GetThemeDirectory()
        {
            return Path.Combine(BaseDir, @"Themes");
        }

        public bool PreRelease()
        {
            return File.Exists(Path.Combine(BaseDir, "PreRelease.txt"));
        }

        public string GetLocalSettings()
        {
            if (!File.Exists(_localSettingsFileLocation))
            {
                return "{}";
            }
            using (var file = new StreamReader(_localSettingsFileLocation))
            {
                return file.ReadToEnd();
            }
        }

        public void SaveLocalSettings(string settings)
        {
            var settingDir = Path.GetDirectoryName(_localSettingsFileLocation);
            if (!Directory.Exists(settingDir))
            {
                Directory.CreateDirectory(settingDir);
            }

            using (var file = new StreamWriter(_localSettingsFileLocation))
            {
                file.Write(settings);
            }
        }
    }
}

```

`\\?\C:\Dev\Projects\YAPA-2-modern\YAPA\WPF\Specifics\WpfThreading.cs`:

```cs
﻿using System;
using System.Windows;
using YAPA.Shared.Contracts;

namespace YAPA.WPF.Specifics
{
    public class WpfThreading : IThreading
    {
        public void RunOnUiThread(Action action)
        {
            Application.Current.Dispatcher.Invoke(action);
        }
    }
}

```

`\\?\C:\Dev\Projects\YAPA-2-modern\YAPA\WPF\ThemeManager\ThemeManager.cs`:

```cs
﻿using System;
using System.Collections.Generic;
using System.Linq;
using YAPA.Shared.Contracts;

namespace YAPA.WPF.ThemeManager
{
    [BuiltInPlugin(Order = 4)]
    public class ThemeManagerPlugin : IPluginMeta
    {
        public string Title => "Themes";
        public string Id => "ThemeManager";

        public Type Plugin => null;

        public Type Settings => null;

        public Type SettingEditWindow => typeof(ThemeManagerSettingWindow);
    }

    public class ThemeManager : IThemeManager
    {
        public IEnumerable<IThemeMeta> Themes { get; }

        public IThemeMeta ActiveTheme { get; }

        private IThemeMeta GetActiveTheme()
        {
            var theme = Themes.FirstOrDefault(x => x.Title == _settings.SelectedTheme) ?? Themes.First();

            return theme;
        }

        private readonly IDependencyInjector _container;
        private readonly ThemeManagerSettings _settings;

        public ThemeManager(IDependencyInjector container, IEnumerable<IThemeMeta> metas, ThemeManagerSettings settings)
        {
            _container = container;
            _settings = settings;
            Themes = metas;
            RegisterThemes(container);
            RegisterThemeSettings(container);
            RegisterThemeSettingsWindows(container);
            ActiveTheme = GetActiveTheme();
        }

        public object ResolveSettingWindow(IThemeMeta theme)
        {
            if (theme.SettingEditWindow == null)
            {
                return theme.SettingEditWindow;
            }
            return _container.Resolve(theme.SettingEditWindow);
        }

        private void RegisterThemes(IDependencyInjector container)
        {
            foreach (var theme in Themes.Where(x => x.Theme != null))
            {
                container.Register(theme.Theme, true);
            }
        }

        private void RegisterThemeSettings(IDependencyInjector container)
        {
            foreach (var theme in Themes.Where(x => x.Settings != null))
            {
                container.Register(theme.Settings);
            }
        }

        private void RegisterThemeSettingsWindows(IDependencyInjector container)
        {

            foreach (var theme in Themes.Where(x => x.SettingEditWindow != null))
            {
                container.Register(theme.SettingEditWindow);
            }
        }
    }

    public class ThemeManagerSettings : IPluginSettings
    {
        private readonly ISettingsForComponent _settings;

        public string SelectedTheme
        {
            get => _settings.Get(nameof(SelectedTheme), "YAPA 1.0");
            set => _settings.Update(nameof(SelectedTheme), value);
        }

        public ThemeManagerSettings(ISettings settings)
        {
            _settings = settings.GetSettingsForComponent(new ThemeManagerPlugin().Id);
        }

        public void DeferChanges()
        {
            _settings.DeferChanges();
        }
    }
}

```

`\\?\C:\Dev\Projects\YAPA-2-modern\YAPA\WPF\ThemeManager\ThemeManagerSettingWindow.xaml`:

```xaml
﻿<UserControl x:Class="YAPA.WPF.ThemeManager.ThemeManagerSettingWindow"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:local="clr-namespace:YAPA.WPF"
             mc:Ignorable="d" 
             d:DesignHeight="300" d:DesignWidth="300">
    <Grid>
        <Grid>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto"></ColumnDefinition>
                <ColumnDefinition Width="*"></ColumnDefinition>
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto"></RowDefinition>
                <RowDefinition Height="Auto"></RowDefinition>
            </Grid.RowDefinitions>
            <ComboBox Grid.Column="1"  Grid.Row="0" x:Name="ThemeList" HorizontalAlignment="Right" Margin="10,5,10,5"></ComboBox>
            <StackPanel Grid.Column="0" Grid.ColumnSpan="2" Grid.Row="1" x:Name="SettingPage">
                
            </StackPanel>
        </Grid>
    </Grid>
</UserControl>

```

`\\?\C:\Dev\Projects\YAPA-2-modern\YAPA\WPF\ThemeManager\ThemeManagerSettingWindow.xaml.cs`:

```cs
﻿using System.Windows.Controls;
using YAPA.Shared.Contracts;

namespace YAPA.WPF.ThemeManager
{
    public partial class ThemeManagerSettingWindow
    {
        private readonly ThemeManagerSettings _settings;
        private readonly ISettingManager _manager;
        private readonly ISettings _globalSettings;

        public ThemeManagerSettingWindow(IThemeManager themeManager, ThemeManagerSettings settings, ISettingManager manager, ISettings globalSettings)
        {
            var themes = themeManager;
            _settings = settings;
            _manager = manager;
            _globalSettings = globalSettings;

            _globalSettings.PropertyChanged += GlobalSettings_PropertyChanged;

            _settings.DeferChanges();

            InitializeComponent();

            foreach (var themeMeta in themes.Themes)
            {
                var selectedTheme = settings.SelectedTheme == themeMeta.Title;
                var cb = new ComboBoxItem
                {
                    IsSelected = selectedTheme,
                    Content = themeMeta.Title
                };

                ThemeList.Items.Add(cb);
            }

            if (themes.ActiveTheme.SettingEditWindow != null)
            {
                SettingPage.Children.Clear();
                SettingPage.Children.Add((UserControl)themes.ResolveSettingWindow(themes.ActiveTheme));
            }

            ThemeList.SelectionChanged += ThemeList_SelectionChanged;

            Unloaded += ThemeManagerSettingWindow_Unloaded;
        }

        private void ThemeManagerSettingWindow_Unloaded(object sender, System.Windows.RoutedEventArgs e)
        {
            _globalSettings.PropertyChanged -= GlobalSettings_PropertyChanged;
        }

        private void GlobalSettings_PropertyChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e)
        {
            if (e.PropertyName == $"{nameof(ThemeManager)}.{nameof(_settings.SelectedTheme)}")
            {
                _manager.RestartNeeded = true;
            }
        }

        private void ThemeList_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            _settings.SelectedTheme = (string)((ComboBoxItem)ThemeList.SelectedItem).Content;
        }

    }
}

```

`\\?\C:\Dev\Projects\YAPA-2-modern\YAPA\YAPA.csproj`:

```csproj
﻿<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="12.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <Import Project="..\packages\GitVersion.MsBuild.5.8.1\build\GitVersion.MsBuild.props" Condition="Exists('..\packages\GitVersion.MsBuild.5.8.1\build\GitVersion.MsBuild.props')" />
  <Import Project="..\packages\UtilPack.NuGet.MSBuild.2.9.1\build\UtilPack.NuGet.MSBuild.props" Condition="Exists('..\packages\UtilPack.NuGet.MSBuild.2.9.1\build\UtilPack.NuGet.MSBuild.props')" />
  <Import Project="..\packages\SQLite.3.13.0\build\net45\SQLite.props" Condition="Exists('..\packages\SQLite.3.13.0\build\net45\SQLite.props')" />
  <Import Project="$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props" Condition="Exists('$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props')" />
  <PropertyGroup>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProjectGuid>{D6C90A63-BF09-4BD8-B86C-92CBBC1EB917}</ProjectGuid>
    <OutputType>WinExe</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>YAPA</RootNamespace>
    <AssemblyName>YAPA</AssemblyName>
    <TargetFrameworkVersion>v4.8</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
    <ProjectTypeGuids>{60dc8134-eba5-43b8-bcc9-bb4bc16c2548};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <WarningLevel>4</WarningLevel>
    <SolutionDir Condition="$(SolutionDir) == '' Or $(SolutionDir) == '*Undefined*'">..\</SolutionDir>
    <RestorePackages>true</RestorePackages>
    <IsWebBootstrapper>true</IsWebBootstrapper>
    <TargetFrameworkProfile />
    <NuGetPackageImportStamp>
    </NuGetPackageImportStamp>
    <PublishUrl>publish\</PublishUrl>
    <Install>true</Install>
    <InstallFrom>Web</InstallFrom>
    <UpdateEnabled>true</UpdateEnabled>
    <UpdateMode>Foreground</UpdateMode>
    <UpdateInterval>7</UpdateInterval>
    <UpdateIntervalUnits>Days</UpdateIntervalUnits>
    <UpdatePeriodically>false</UpdatePeriodically>
    <UpdateRequired>false</UpdateRequired>
    <MapFileExtensions>true</MapFileExtensions>
    <InstallUrl>http://s1.floatas.net/intallers/yapa/</InstallUrl>
    <CreateWebPageOnPublish>true</CreateWebPageOnPublish>
    <WebPage>publish.htm</WebPage>
    <ApplicationRevision>0</ApplicationRevision>
    <ApplicationVersion>1.0.0.0</ApplicationVersion>
    <UseApplicationTrust>false</UseApplicationTrust>
    <PublishWizardCompleted>true</PublishWizardCompleted>
    <BootstrapperEnabled>true</BootstrapperEnabled>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|AnyCPU' ">
    <PlatformTarget>AnyCPU</PlatformTarget>
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>..\Debug\</OutputPath>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|AnyCPU' ">
    <PlatformTarget>AnyCPU</PlatformTarget>
    <DebugType>pdbonly</DebugType>
    <Optimize>true</Optimize>
    <OutputPath>..\Release\</OutputPath>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <PropertyGroup />
  <PropertyGroup>
    <ApplicationIcon>Resources\pomo.ico</ApplicationIcon>
  </PropertyGroup>
  <PropertyGroup />
  <PropertyGroup>
    <Win32Resource>
    </Win32Resource>
  </PropertyGroup>
  <PropertyGroup>
    <Win32Resource>
    </Win32Resource>
  </PropertyGroup>
  <PropertyGroup>
    <ManifestCertificateThumbprint>A281C455581651B73B00AA333AA2B0768A07C1E2</ManifestCertificateThumbprint>
  </PropertyGroup>
  <PropertyGroup>
    <ManifestKeyFile>YAPA_TemporaryKey.pfx</ManifestKeyFile>
  </PropertyGroup>
  <PropertyGroup>
    <GenerateManifests>true</GenerateManifests>
  </PropertyGroup>
  <PropertyGroup>
    <SignManifests>false</SignManifests>
  </PropertyGroup>
  <PropertyGroup>
    <GenerateManifests>true</GenerateManifests>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="Autofac, Version=4.1.1.0, Culture=neutral, PublicKeyToken=17863af14b0044da, processorArchitecture=MSIL">
      <HintPath>..\packages\Autofac.4.1.1\lib\net45\Autofac.dll</HintPath>
      <Private>True</Private>
    </Reference>
    <Reference Include="DeltaCompressionDotNet, Version=1.0.0.0, Culture=neutral, PublicKeyToken=1d14d6e5194e7f4a, processorArchitecture=MSIL">
      <HintPath>..\packages\DeltaCompressionDotNet.1.0.0\lib\net45\DeltaCompressionDotNet.dll</HintPath>
      <Private>True</Private>
    </Reference>
    <Reference Include="DeltaCompressionDotNet.MsDelta, Version=1.0.0.0, Culture=neutral, PublicKeyToken=46b2138a390abf55, processorArchitecture=MSIL">
      <HintPath>..\packages\DeltaCompressionDotNet.1.0.0\lib\net45\DeltaCompressionDotNet.MsDelta.dll</HintPath>
      <Private>True</Private>
    </Reference>
    <Reference Include="DeltaCompressionDotNet.PatchApi, Version=1.0.0.0, Culture=neutral, PublicKeyToken=3e8888ee913ed789, processorArchitecture=MSIL">
      <HintPath>..\packages\DeltaCompressionDotNet.1.0.0\lib\net45\DeltaCompressionDotNet.PatchApi.dll</HintPath>
      <Private>True</Private>
    </Reference>
    <Reference Include="LiveCharts, Version=0.9.7.0, Culture=neutral, PublicKeyToken=0bc1f845d1ebb8df, processorArchitecture=MSIL">
      <HintPath>..\packages\LiveCharts.0.9.7\lib\net45\LiveCharts.dll</HintPath>
    </Reference>
    <Reference Include="LiveCharts.Wpf, Version=0.9.7.0, Culture=neutral, PublicKeyToken=0bc1f845d1ebb8df, processorArchitecture=MSIL">
      <HintPath>..\packages\LiveCharts.Wpf.0.9.7\lib\net45\LiveCharts.Wpf.dll</HintPath>
    </Reference>
    <Reference Include="MaterialDesignColors, Version=2.0.6.0, Culture=neutral, PublicKeyToken=df2a72020bd7962a, processorArchitecture=MSIL">
      <HintPath>..\packages\MaterialDesignColors.2.0.6\lib\net452\MaterialDesignColors.dll</HintPath>
    </Reference>
    <Reference Include="MaterialDesignThemes.Wpf, Version=4.5.0.0, Culture=neutral, PublicKeyToken=df2a72020bd7962a, processorArchitecture=MSIL">
      <HintPath>..\packages\MaterialDesignThemes.4.5.0\lib\net452\MaterialDesignThemes.Wpf.dll</HintPath>
    </Reference>
    <Reference Include="Microsoft.AspNetCore.Hosting.Abstractions, Version=1.1.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60, processorArchitecture=MSIL">
      <HintPath>..\packages\Microsoft.AspNetCore.Hosting.Abstractions.1.1.0\lib\net451\Microsoft.AspNetCore.Hosting.Abstractions.dll</HintPath>
      <Private>True</Private>
    </Reference>
    <Reference Include="Microsoft.AspNetCore.Hosting.Server.Abstractions, Version=1.1.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60, processorArchitecture=MSIL">
      <HintPath>..\packages\Microsoft.AspNetCore.Hosting.Server.Abstractions.1.1.0\lib\net451\Microsoft.AspNetCore.Hosting.Server.Abstractions.dll</HintPath>
      <Private>True</Private>
    </Reference>
    <Reference Include="Microsoft.AspNetCore.Http.Abstractions, Version=1.1.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60, processorArchitecture=MSIL">
      <HintPath>..\packages\Microsoft.AspNetCore.Http.Abstractions.1.1.0\lib\net451\Microsoft.AspNetCore.Http.Abstractions.dll</HintPath>
      <Private>True</Private>
    </Reference>
    <Reference Include="Microsoft.AspNetCore.Http.Features, Version=1.1.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60, processorArchitecture=MSIL">
      <HintPath>..\packages\Microsoft.AspNetCore.Http.Features.1.1.0\lib\net451\Microsoft.AspNetCore.Http.Features.dll</HintPath>
      <Private>True</Private>
    </Reference>
    <Reference Include="Microsoft.Data.Sqlite, Version=1.1.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60, processorArchitecture=MSIL">
      <HintPath>..\packages\Microsoft.Data.Sqlite.1.1.0\lib\net451\Microsoft.Data.Sqlite.dll</HintPath>
      <Private>True</Private>
    </Reference>
    <Reference Include="Microsoft.EntityFrameworkCore, Version=1.1.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60, processorArchitecture=MSIL">
      <HintPath>..\packages\Microsoft.EntityFrameworkCore.1.1.0\lib\net451\Microsoft.EntityFrameworkCore.dll</HintPath>
      <Private>True</Private>
    </Reference>
    <Reference Include="Microsoft.EntityFrameworkCore.Design, Version=1.1.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60, processorArchitecture=MSIL">
      <HintPath>..\packages\Microsoft.EntityFrameworkCore.Design.1.1.0\lib\net451\Microsoft.EntityFrameworkCore.Design.dll</HintPath>
      <Private>True</Private>
    </Reference>
    <Reference Include="Microsoft.EntityFrameworkCore.Relational, Version=1.1.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60, processorArchitecture=MSIL">
      <HintPath>..\packages\Microsoft.EntityFrameworkCore.Relational.1.1.0\lib\net451\Microsoft.EntityFrameworkCore.Relational.dll</HintPath>
      <Private>True</Private>
    </Reference>
    <Reference Include="Microsoft.EntityFrameworkCore.Relational.Design, Version=1.1.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60, processorArchitecture=MSIL">
      <HintPath>..\packages\Microsoft.EntityFrameworkCore.Relational.Design.1.1.0\lib\net451\Microsoft.EntityFrameworkCore.Relational.Design.dll</HintPath>
      <Private>True</Private>
    </Reference>
    <Reference Include="Microsoft.EntityFrameworkCore.Sqlite, Version=1.1.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60, processorArchitecture=MSIL">
      <HintPath>..\packages\Microsoft.EntityFrameworkCore.Sqlite.1.1.0\lib\net451\Microsoft.EntityFrameworkCore.Sqlite.dll</HintPath>
      <Private>True</Private>
    </Reference>
    <Reference Include="Microsoft.EntityFrameworkCore.Tools">
      <HintPath>..\packages\Microsoft.EntityFrameworkCore.Tools.1.1.0-preview4-final\tools\Microsoft.EntityFrameworkCore.Tools.dll</HintPath>
    </Reference>
    <Reference Include="Microsoft.Extensions.Caching.Abstractions, Version=1.1.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60, processorArchitecture=MSIL">
      <HintPath>..\packages\Microsoft.Extensions.Caching.Abstractions.1.1.0\lib\netstandard1.0\Microsoft.Extensions.Caching.Abstractions.dll</HintPath>
      <Private>True</Private>
    </Reference>
    <Reference Include="Microsoft.Extensions.Caching.Memory, Version=1.1.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60, processorArchitecture=MSIL">
      <HintPath>..\packages\Microsoft.Extensions.Caching.Memory.1.1.0\lib\net451\Microsoft.Extensions.Caching.Memory.dll</HintPath>
      <Private>True</Private>
    </Reference>
    <Reference Include="Microsoft.Extensions.Configuration.Abstractions, Version=1.1.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60, processorArchitecture=MSIL">
      <HintPath>..\packages\Microsoft.Extensions.Configuration.Abstractions.1.1.0\lib\netstandard1.0\Microsoft.Extensions.Configuration.Abstractions.dll</HintPath>
      <Private>True</Private>
    </Reference>
    <Reference Include="Microsoft.Extensions.DependencyInjection, Version=1.1.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60, processorArchitecture=MSIL">
      <HintPath>..\packages\Microsoft.Extensions.DependencyInjection.1.1.0\lib\netstandard1.1\Microsoft.Extensions.DependencyInjection.dll</HintPath>
      <Private>True</Private>
    </Reference>
    <Reference Include="Microsoft.Extensions.DependencyInjection.Abstractions, Version=1.1.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60, processorArchitecture=MSIL">
      <HintPath>..\packages\Microsoft.Extensions.DependencyInjection.Abstractions.1.1.0\lib\netstandard1.0\Microsoft.Extensions.DependencyInjection.Abstractions.dll</HintPath>
      <Private>True</Private>
    </Reference>
    <Reference Include="Microsoft.Extensions.FileProviders.Abstractions, Version=1.1.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60, processorArchitecture=MSIL">
      <HintPath>..\packages\Microsoft.Extensions.FileProviders.Abstractions.1.1.0\lib\netstandard1.0\Microsoft.Extensions.FileProviders.Abstractions.dll</HintPath>
      <Private>True</Private>
    </Reference>
    <Reference Include="Microsoft.Extensions.Logging, Version=1.1.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60, processorArchitecture=MSIL">
      <HintPath>..\packages\Microsoft.Extensions.Logging.1.1.0\lib\netstandard1.1\Microsoft.Extensions.Logging.dll</HintPath>
      <Private>True</Private>
    </Reference>
    <Reference Include="Microsoft.Extensions.Logging.Abstractions, Version=1.1.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60, processorArchitecture=MSIL">
      <HintPath>..\packages\Microsoft.Extensions.Logging.Abstractions.1.1.0\lib\netstandard1.1\Microsoft.Extensions.Logging.Abstractions.dll</HintPath>
      <Private>True</Private>
    </Reference>
    <Reference Include="Microsoft.Extensions.Options, Version=1.1.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60, processorArchitecture=MSIL">
      <HintPath>..\packages\Microsoft.Extensions.Options.1.1.0\lib\netstandard1.0\Microsoft.Extensions.Options.dll</HintPath>
      <Private>True</Private>
    </Reference>
    <Reference Include="Microsoft.Extensions.Primitives, Version=1.1.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60, processorArchitecture=MSIL">
      <HintPath>..\packages\Microsoft.Extensions.Primitives.1.1.0\lib\netstandard1.0\Microsoft.Extensions.Primitives.dll</HintPath>
      <Private>True</Private>
    </Reference>
    <Reference Include="Mono.Cecil, Version=0.9.6.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756, processorArchitecture=MSIL">
      <HintPath>..\packages\Mono.Cecil.0.9.6.1\lib\net45\Mono.Cecil.dll</HintPath>
      <Private>True</Private>
    </Reference>
    <Reference Include="Mono.Cecil.Mdb, Version=0.9.6.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756, processorArchitecture=MSIL">
      <HintPath>..\packages\Mono.Cecil.0.9.6.1\lib\net45\Mono.Cecil.Mdb.dll</HintPath>
      <Private>True</Private>
    </Reference>
    <Reference Include="Mono.Cecil.Pdb, Version=0.9.6.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756, processorArchitecture=MSIL">
      <HintPath>..\packages\Mono.Cecil.0.9.6.1\lib\net45\Mono.Cecil.Pdb.dll</HintPath>
      <Private>True</Private>
    </Reference>
    <Reference Include="Mono.Cecil.Rocks, Version=0.9.6.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756, processorArchitecture=MSIL">
      <HintPath>..\packages\Mono.Cecil.0.9.6.1\lib\net45\Mono.Cecil.Rocks.dll</HintPath>
      <Private>True</Private>
    </Reference>
    <Reference Include="Newtonsoft.Json, Version=10.0.0.0, Culture=neutral, PublicKeyToken=30ad4fe6b2a6aeed, processorArchitecture=MSIL">
      <HintPath>..\packages\Newtonsoft.Json.10.0.3\lib\net45\Newtonsoft.Json.dll</HintPath>
    </Reference>
    <Reference Include="NLog, Version=4.0.0.0, Culture=neutral, PublicKeyToken=5120e14c03d0593c, processorArchitecture=MSIL">
      <HintPath>..\packages\NLog.4.4.10\lib\net45\NLog.dll</HintPath>
    </Reference>
    <Reference Include="NuGet.Squirrel, Version=3.0.0.0, Culture=neutral, processorArchitecture=MSIL">
      <HintPath>..\packages\squirrel.windows.1.5.2\lib\Net45\NuGet.Squirrel.dll</HintPath>
      <Private>True</Private>
    </Reference>
    <Reference Include="Remotion.Linq, Version=2.1.0.0, Culture=neutral, PublicKeyToken=fee00910d6e5f53b, processorArchitecture=MSIL">
      <HintPath>..\packages\Remotion.Linq.2.1.1\lib\net45\Remotion.Linq.dll</HintPath>
      <Private>True</Private>
    </Reference>
    <Reference Include="SimpleFeedReader, Version=1.0.0.0, Culture=neutral, processorArchitecture=MSIL">
      <HintPath>..\packages\SimpleFeedReader.1.0.7\lib\net40-client\SimpleFeedReader.dll</HintPath>
    </Reference>
    <Reference Include="Splat, Version=1.6.2.0, Culture=neutral, processorArchitecture=MSIL">
      <SpecificVersion>False</SpecificVersion>
      <HintPath>..\packages\Splat.1.6.2\lib\Net45\Splat.dll</HintPath>
    </Reference>
    <Reference Include="Squirrel, Version=1.5.2.0, Culture=neutral, processorArchitecture=MSIL">
      <SpecificVersion>False</SpecificVersion>
      <HintPath>..\packages\squirrel.windows.1.5.28\lib\Net45\Squirrel.dll</HintPath>
    </Reference>
    <Reference Include="System" />
    <Reference Include="System.Collections.Immutable, Version=1.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a, processorArchitecture=MSIL">
      <HintPath>..\packages\System.Collections.Immutable.1.3.0\lib\portable-net45+win8+wp8+wpa81\System.Collections.Immutable.dll</HintPath>
      <Private>True</Private>
    </Reference>
    <Reference Include="System.Data" />
    <Reference Include="System.Data.SqlServerCe, Version=4.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91, processorArchitecture=MSIL">
      <HintPath>..\packages\Microsoft.SqlServer.Compact.4.0.8854.1\lib\net40\System.Data.SqlServerCe.dll</HintPath>
      <Private>True</Private>
    </Reference>
    <Reference Include="System.Data.SqlServerCe.Entity, Version=4.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91, processorArchitecture=MSIL">
      <HintPath>..\packages\Microsoft.SqlServer.Compact.4.0.8854.1\lib\net40\System.Data.SqlServerCe.Entity.dll</HintPath>
      <Private>True</Private>
    </Reference>
    <Reference Include="System.Diagnostics.DiagnosticSource, Version=4.0.1.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51, processorArchitecture=MSIL">
      <HintPath>..\packages\System.Diagnostics.DiagnosticSource.4.3.0\lib\net46\System.Diagnostics.DiagnosticSource.dll</HintPath>
      <Private>True</Private>
    </Reference>
    <Reference Include="System.Drawing" />
    <Reference Include="System.Interactive.Async, Version=3.0.0.0, Culture=neutral, PublicKeyToken=94bc3704cddfc263, processorArchitecture=MSIL">
      <HintPath>..\packages\System.Interactive.Async.3.0.0\lib\net45\System.Interactive.Async.dll</HintPath>
      <Private>True</Private>
    </Reference>
    <Reference Include="System.IO.Compression, Version=4.1.2.0, Culture=neutral, PublicKeyToken=b77a5c561934e089, processorArchitecture=MSIL">
      <HintPath>..\packages\System.IO.Compression.4.3.0\lib\net46\System.IO.Compression.dll</HintPath>
      <Private>True</Private>
    </Reference>
    <Reference Include="System.Net.Sockets, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a, processorArchitecture=MSIL">
      <HintPath>..\packages\System.Net.Sockets.4.3.0\lib\net46\System.Net.Sockets.dll</HintPath>
      <Private>True</Private>
    </Reference>
    <Reference Include="System.Runtime.CompilerServices.Unsafe, Version=4.0.4.1, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a, processorArchitecture=MSIL">
      <HintPath>..\packages\System.Runtime.CompilerServices.Unsafe.4.5.3\lib\net461\System.Runtime.CompilerServices.Unsafe.dll</HintPath>
    </Reference>
    <Reference Include="System.Runtime.Remoting" />
    <Reference Include="System.ServiceModel" />
    <Reference Include="System.Text.Encodings.Web, Version=4.0.3.1, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51, processorArchitecture=MSIL">
      <HintPath>..\packages\System.Text.Encodings.Web.4.5.1\lib\netstandard2.0\System.Text.Encodings.Web.dll</HintPath>
    </Reference>
    <Reference Include="System.Threading.Tasks.Extensions, Version=4.2.0.1, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51, processorArchitecture=MSIL">
      <HintPath>..\packages\System.Threading.Tasks.Extensions.4.5.4\lib\net461\System.Threading.Tasks.Extensions.dll</HintPath>
    </Reference>
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
    <Reference Include="System.Core" />
    <Reference Include="System.Xml.Linq" />
    <Reference Include="System.Xaml">
      <RequiredTargetFramework>4.0</RequiredTargetFramework>
    </Reference>
    <Reference Include="System.Xml.ReaderWriter, Version=4.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a, processorArchitecture=MSIL">
      <HintPath>..\packages\System.Xml.ReaderWriter.4.3.0\lib\net46\System.Xml.ReaderWriter.dll</HintPath>
      <Private>True</Private>
    </Reference>
    <Reference Include="WindowsBase" />
    <Reference Include="PresentationCore" />
    <Reference Include="PresentationFramework" />
    <Reference Include="WpfAnimatedGif, Version=1.4.4.0, Culture=neutral, processorArchitecture=MSIL">
      <HintPath>..\packages\WpfAnimatedGif.1.4.4\lib\net\WpfAnimatedGif.dll</HintPath>
      <Private>True</Private>
    </Reference>
    <Reference Include="Xceed.Wpf.Toolkit">
      <HintPath>..\Libraries\Xceed.Wpf.Toolkit.dll</HintPath>
    </Reference>
  </ItemGroup>
  <ItemGroup>
    <Compile Include="..\CommonAssemblyInfo.cs">
      <Link>Properties\CommonAssemblyInfo.cs</Link>
    </Compile>
    <Compile Include="Commands\CancelSettingsCommand.cs" />
    <Compile Include="Commands\SaveSettingsCommand.cs" />
    <Compile Include="Migrations\20170204162935_Initial.cs" />
    <Compile Include="Migrations\20170204162935_Initial.designer.cs">
      <DependentUpon>20170204162935_Initial.cs</DependentUpon>
    </Compile>
    <Compile Include="Migrations\20171011164113_Duration min.cs" />
    <Compile Include="Migrations\20171011164113_Duration min.designer.cs">
      <DependentUpon>20171011164113_Duration min.cs</DependentUpon>
    </Compile>
    <Compile Include="Migrations\20171016181624_profile name.cs" />
    <Compile Include="Migrations\20171016181624_profile name.designer.cs">
      <DependentUpon>20171016181624_profile name.cs</DependentUpon>
    </Compile>
    <Compile Include="Migrations\DatabaseContextModelSnapshot.cs" />
    <Compile Include="Plugins\Dashboard\DashboardPluginMeta.cs" />
    <Compile Include="Plugins\Dashboard\GithubDashboard.xaml.cs">
      <DependentUpon>GithubDashboard.xaml</DependentUpon>
    </Compile>
    <Compile Include="Plugins\Dashboard\ItemRepository.cs" />
    <Compile Include="Plugins\Dashboard\PomodoroMonth.xaml.cs">
      <DependentUpon>PomodoroMonth.xaml</DependentUpon>
    </Compile>
    <Compile Include="Plugins\Dashboard\PomodorosPerTimeModel.cs" />
    <Compile Include="Plugins\Dashboard\PomodoroWeek.xaml.cs">
      <DependentUpon>PomodoroWeek.xaml</DependentUpon>
    </Compile>
    <Compile Include="Plugins\MinimizeToTray\SystemTray.cs" />
    <Compile Include="Plugins\MinimizeToTray\MinimizeToTraySettingWindow.xaml.cs">
      <DependentUpon>MinimizeToTraySettingWindow.xaml</DependentUpon>
    </Compile>
    <Compile Include="Plugins\PomodoroEngine\CreatePomodoroProfile.xaml.cs">
      <DependentUpon>CreatePomodoroProfile.xaml</DependentUpon>
    </Compile>
    <Compile Include="Plugins\PomodoroEngine\PomodoroProfileSettings.xaml.cs">
      <DependentUpon>PomodoroProfileSettings.xaml</DependentUpon>
    </Compile>
    <Compile Include="Plugins\ReleaseNotes\ReleaseNotesPlugin.cs" />
    <Compile Include="Plugins\ReleaseNotes\ReleaseNotesWindow.xaml.cs">
      <DependentUpon>ReleaseNotesWindow.xaml</DependentUpon>
    </Compile>
    <Compile Include="Plugins\SaveApplicationPossitionOnScreen\WindowPlacement.cs" />
    <Compile Include="Plugins\SoundSettings\MusicPlayer\MusicPlayerPluginSettingWindow.xaml.cs">
      <DependentUpon>MusicPlayerPluginSettingWindow.xaml</DependentUpon>
    </Compile>
    <Compile Include="Plugins\PomodoroEngine\PomodoroEnginePluginMeta.cs" />
    <Compile Include="Plugins\PomodoroEngine\PomodoroEngineSettingWindow.xaml.cs">
      <DependentUpon>PomodoroEngineSettingWindow.xaml</DependentUpon>
    </Compile>
    <Compile Include="Plugins\SaveApplicationPossitionOnScreen\SaveApplicationPositionOnScreen.cs" />
    <Compile Include="Plugins\SoundSettings\SoundNotifications\SoundNotificationSettingWindow.xaml.cs">
      <DependentUpon>SoundNotificationSettingWindow.xaml</DependentUpon>
    </Compile>
    <Compile Include="Plugins\SoundSettings\SoundSettingsPlugin.cs" />
    <Compile Include="Plugins\SoundSettings\SoundSettingWindow.xaml.cs">
      <DependentUpon>SoundSettingWindow.xaml</DependentUpon>
    </Compile>
    <Compile Include="Plugins\Unclickable\UnclickableMeta.cs" />
    <Compile Include="Plugins\Unclickable\UnclickableSettingWindow.xaml.cs">
      <DependentUpon>UnclickableSettingWindow.xaml</DependentUpon>
    </Compile>
    <Compile Include="WPF\AboutPage.xaml.cs">
      <DependentUpon>AboutPage.xaml</DependentUpon>
    </Compile>
    <Compile Include="WPF\DependencyContainer.cs" />
    <Compile Include="WPF\InternalPluginAttribute.cs" />
    <Compile Include="WPF\ReleaseNotesWindow.xaml.cs">
      <DependentUpon>ReleaseNotesWindow.xaml</DependentUpon>
    </Compile>
    <Compile Include="WPF\RssFeedNormalizer.cs" />
    <Compile Include="WPF\Specifics\DependencyInjector.cs" />
    <Compile Include="Plugins\SoundSettings\MusicPlayer\MusicPlayer.cs" />
    <Compile Include="WPF\Specifics\NewftonsJson.cs" />
    <Compile Include="WPF\SettingsMananger\SettingManager.cs" />
    <Compile Include="WPF\DatabaseContext.cs" />
    <Compile Include="WPF\Specifics\SoundPlayer.cs" />
    <Compile Include="WPF\PluginManager\PluginManager.cs" />
    <Compile Include="WPF\PluginManager\PluginManagerSettingWindow.xaml.cs">
      <DependentUpon>PluginManagerSettingWindow.xaml</DependentUpon>
    </Compile>
    <Compile Include="WPF\SettingsMananger\SettingsWindow.xaml.cs">
      <DependentUpon>SettingsWindow.xaml</DependentUpon>
    </Compile>
    <Compile Include="WPF\Specifics\ShowSettingsCommand.cs" />
    <Compile Include="Plugins\SoundSettings\SoundNotifications\SoundNotifications.cs" />
    <Compile Include="WPF\Specifics\WpfThreading.cs" />
    <Compile Include="WPF\ThemeManager\ThemeManager.cs" />
    <Compile Include="WPF\ThemeManager\ThemeManagerSettingWindow.xaml.cs">
      <DependentUpon>ThemeManagerSettingWindow.xaml</DependentUpon>
    </Compile>
    <Compile Include="WPF\Specifics\Timer.cs" />
    <Compile Include="WPF\Specifics\WpfEnviroment.cs" />
    <Page Include="App.xaml">
      <Generator>MSBuild:Compile</Generator>
      <SubType>Designer</SubType>
    </Page>
    <Compile Include="SingleInstance.cs" />
    <Compile Include="App.xaml.cs">
      <DependentUpon>App.xaml</DependentUpon>
      <SubType>Code</SubType>
    </Compile>
    <Page Include="Plugins\Dashboard\GithubDashboard.xaml">
      <Generator>MSBuild:Compile</Generator>
      <SubType>Designer</SubType>
    </Page>
    <Page Include="Plugins\Dashboard\PomodoroMonth.xaml">
      <SubType>Designer</SubType>
      <Generator>MSBuild:Compile</Generator>
    </Page>
    <Page Include="Plugins\Dashboard\PomodoroWeek.xaml">
      <Generator>MSBuild:Compile</Generator>
      <SubType>Designer</SubType>
    </Page>
    <Page Include="Plugins\MinimizeToTray\MinimizeToTraySettingWindow.xaml">
      <Generator>MSBuild:Compile</Generator>
      <SubType>Designer</SubType>
    </Page>
    <Page Include="Plugins\PomodoroEngine\CreatePomodoroProfile.xaml">
      <SubType>Designer</SubType>
      <Generator>MSBuild:Compile</Generator>
    </Page>
    <Page Include="Plugins\PomodoroEngine\PomodoroProfileSettings.xaml">
      <SubType>Designer</SubType>
      <Generator>MSBuild:Compile</Generator>
    </Page>
    <Page Include="Plugins\ReleaseNotes\ReleaseNotesWindow.xaml">
      <SubType>Designer</SubType>
      <Generator>MSBuild:Compile</Generator>
    </Page>
    <Page Include="Plugins\SoundSettings\MusicPlayer\MusicPlayerPluginSettingWindow.xaml">
      <SubType>Designer</SubType>
      <Generator>MSBuild:Compile</Generator>
    </Page>
    <Page Include="Plugins\PomodoroEngine\PomodoroEngineSettingWindow.xaml">
      <Generator>MSBuild:Compile</Generator>
      <SubType>Designer</SubType>
    </Page>
    <Page Include="Plugins\SoundSettings\SoundNotifications\SoundNotificationSettingWindow.xaml">
      <Generator>MSBuild:Compile</Generator>
      <SubType>Designer</SubType>
    </Page>
    <Page Include="Plugins\SoundSettings\SoundSettingWindow.xaml">
      <SubType>Designer</SubType>
      <Generator>MSBuild:Compile</Generator>
    </Page>
    <Page Include="Plugins\Unclickable\UnclickableSettingWindow.xaml">
      <SubType>Designer</SubType>
      <Generator>MSBuild:Compile</Generator>
    </Page>
    <Page Include="WPF\AboutPage.xaml">
      <SubType>Designer</SubType>
      <Generator>MSBuild:Compile</Generator>
    </Page>
    <Page Include="WPF\PluginManager\PluginManagerSettingWindow.xaml">
      <Generator>MSBuild:Compile</Generator>
      <SubType>Designer</SubType>
    </Page>
    <Page Include="WPF\ReleaseNotesWindow.xaml">
      <SubType>Designer</SubType>
      <Generator>MSBuild:Compile</Generator>
    </Page>
    <Page Include="WPF\SettingsMananger\SettingsWindow.xaml">
      <Generator>MSBuild:Compile</Generator>
      <SubType>Designer</SubType>
    </Page>
    <Page Include="WPF\ThemeManager\ThemeManagerSettingWindow.xaml">
      <Generator>MSBuild:Compile</Generator>
      <SubType>Designer</SubType>
    </Page>
  </ItemGroup>
  <ItemGroup>
    <Compile Include="Properties\Resources.Designer.cs">
      <AutoGen>True</AutoGen>
      <DesignTime>True</DesignTime>
      <DependentUpon>Resources.resx</DependentUpon>
    </Compile>
    <Compile Include="Properties\Settings.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Settings.settings</DependentUpon>
      <DesignTimeSharedInput>True</DesignTimeSharedInput>
    </Compile>
    <EmbeddedResource Include="Properties\Resources.resx">
      <Generator>PublicResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
    <Content Include="NLog.config">
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </Content>
    <None Include="NLog.xsd">
      <SubType>Designer</SubType>
    </None>
    <None Include="packages.config" />
    <None Include="Properties\Settings.settings">
      <Generator>SettingsSingleFileGenerator</Generator>
      <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
    <AppDesigner Include="Properties\" />
    <None Include="Resources\Fonts\Segoe UI Light.ttf">
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </None>
    <None Include="Resources\Fonts\Solid-Mono.ttf">
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </None>
    <None Include="Resources\Fonts\XanhMono-Regular.ttf">
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </None>
    <None Include="Resources\Fonts\Zoika.ttf">
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </None>
  </ItemGroup>
  <ItemGroup>
    <None Include="App.config">
      <SubType>Designer</SubType>
    </None>
  </ItemGroup>
  <ItemGroup>
    <Resource Include="Resources\pomo.ico">
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </Resource>
  </ItemGroup>
  <ItemGroup>
    <Resource Include="Resources\backward.ico">
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </Resource>
    <Content Include="Resources\ding.wav">
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </Content>
    <Resource Include="Resources\pause.ico">
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </Resource>
    <Resource Include="Resources\preferences.ico">
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </Resource>
    <EmbeddedResource Include="Resources\start.ico">
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </EmbeddedResource>
    <Resource Include="Resources\stop.ico">
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </Resource>
    <Resource Include="Resources\loader.gif">
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </Resource>
    <Content Include="Resources\Pomodoro.png">
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </Content>
    <Content Include="Resources\pomoTray.ico">
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </Content>
    <Content Include="Resources\tick.wav">
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </Content>
  </ItemGroup>
  <ItemGroup>
    <BootstrapperPackage Include=".NETFramework,Version=v4.5">
      <Visible>False</Visible>
      <ProductName>Microsoft .NET Framework 4.5 %28x86 and x64%29</ProductName>
      <Install>true</Install>
    </BootstrapperPackage>
    <BootstrapperPackage Include="Microsoft.Net.Framework.3.5.SP1">
      <Visible>False</Visible>
      <ProductName>.NET Framework 3.5 SP1</ProductName>
      <Install>false</Install>
    </BootstrapperPackage>
  </ItemGroup>
  <ItemGroup>
    <ProjectReference Include="..\Yapa.Shared\YAPA.Shared.csproj">
      <Project>{e7b67cdc-3d67-40db-8ba8-6b3d0d99ebfc}</Project>
      <Name>YAPA.Shared</Name>
    </ProjectReference>
    <ProjectReference Include="..\YAPA.WPF.Shared\YAPA.WPF.Shared.csproj">
      <Project>{3c26fd01-08d3-4192-bbb3-778d9d7692d4}</Project>
      <Name>YAPA.WPF.Shared</Name>
    </ProjectReference>
  </ItemGroup>
  <ItemGroup />
  <Import Project="$(MSBuildToolsPath)\Microsoft.CSharp.targets" />
  <PropertyGroup>
    <PostBuildEvent>
    </PostBuildEvent>
  </PropertyGroup>
  <Import Project="$(SolutionDir)\.nuget\NuGet.targets" Condition="Exists('$(SolutionDir)\.nuget\NuGet.targets')" />
  <Target Name="EnsureNuGetPackageBuildImports" BeforeTargets="PrepareForBuild">
    <PropertyGroup>
      <ErrorText>This project references NuGet package(s) that are missing on this computer. Enable NuGet Package Restore to download them.  For more information, see http://go.microsoft.com/fwlink/?LinkID=322105. The missing file is {0}.</ErrorText>
    </PropertyGroup>
    <Error Condition="!Exists('$(SolutionDir)\.nuget\NuGet.targets')" Text="$([System.String]::Format('$(ErrorText)', '$(SolutionDir)\.nuget\NuGet.targets'))" />
    <Error Condition="!Exists('..\packages\SQLite.3.13.0\build\net45\SQLite.props')" Text="$([System.String]::Format('$(ErrorText)', '..\packages\SQLite.3.13.0\build\net45\SQLite.props'))" />
    <Error Condition="!Exists('..\packages\UtilPack.NuGet.MSBuild.2.9.1\build\UtilPack.NuGet.MSBuild.props')" Text="$([System.String]::Format('$(ErrorText)', '..\packages\UtilPack.NuGet.MSBuild.2.9.1\build\UtilPack.NuGet.MSBuild.props'))" />
    <Error Condition="!Exists('..\packages\GitVersion.MsBuild.5.8.1\build\GitVersion.MsBuild.props')" Text="$([System.String]::Format('$(ErrorText)', '..\packages\GitVersion.MsBuild.5.8.1\build\GitVersion.MsBuild.props'))" />
    <Error Condition="!Exists('..\packages\GitVersion.MsBuild.5.8.1\build\GitVersion.MsBuild.targets')" Text="$([System.String]::Format('$(ErrorText)', '..\packages\GitVersion.MsBuild.5.8.1\build\GitVersion.MsBuild.targets'))" />
    <Error Condition="!Exists('..\packages\MaterialDesignThemes.4.5.0\build\MaterialDesignThemes.targets')" Text="$([System.String]::Format('$(ErrorText)', '..\packages\MaterialDesignThemes.4.5.0\build\MaterialDesignThemes.targets'))" />
  </Target>
  <Import Project="..\packages\GitVersion.MsBuild.5.8.1\build\GitVersion.MsBuild.targets" Condition="Exists('..\packages\GitVersion.MsBuild.5.8.1\build\GitVersion.MsBuild.targets')" />
  <Import Project="..\packages\MaterialDesignThemes.4.5.0\build\MaterialDesignThemes.targets" Condition="Exists('..\packages\MaterialDesignThemes.4.5.0\build\MaterialDesignThemes.targets')" />
  <!-- To modify your build process, add your task inside one of the targets below and uncomment it. 
       Other similar extension points exist, see Microsoft.Common.targets.
  <Target Name="BeforeBuild">
  </Target>
  <Target Name="AfterBuild">
  </Target>
  -->
</Project>
```

`\\?\C:\Dev\Projects\YAPA-2-modern\YAPA.Shared\Common\DashboardPlugin.cs`:

```cs
﻿using System;
using System.Linq;
using System.Threading.Tasks;
using YAPA.Shared.Contracts;

namespace YAPA.Shared.Common
{
    public class Dashboard : IPlugin
    {
        private readonly IPomodoroRepository _itemRepository;
        private readonly PomodoroEngineSettings _engineSettings;
        private readonly IPomodoroEngine _engine;

        public Dashboard(IPomodoroEngine engine, IPomodoroRepository itemRepository, PomodoroEngineSettings engineSettings)
        {
            _itemRepository = itemRepository;
            _engineSettings = engineSettings;
            _engine = engine;

            _engine.OnPomodoroCompleted += _engine_OnPomodoroCompleted;
        }

        public PomodoroDashboardModel GetPomodoros(int numberOfMonths, string profileFilter)
        {
            var today = DateTime.Now.Date;

            var date = today.Date.AddMonths(numberOfMonths * -1);
            var fromDate = new DateTime(date.Year, date.Month, 1, 0, 0, 0, 0, DateTimeKind.Utc);

            var totalDays = (int)Math.Truncate((today - fromDate).TotalDays);
            var emptyPomodoros = Enumerable.Range(0, totalDays).Select(x => new PomodoroEntity { Count = 0, DateTime = fromDate.AddDays(x) }).ToList();
            var capturedPomodoros = _itemRepository.After(fromDate);

            var distinctProfiles = capturedPomodoros.Select(_ => _.ProfileName).Distinct().ToList();

            if (string.IsNullOrEmpty(profileFilter) == false)
            {
                capturedPomodoros = capturedPomodoros.Where(_ => _.ProfileName == profileFilter).ToList();
            }

            var joinedPomodoros = capturedPomodoros.ToList().Union(emptyPomodoros)
                .GroupBy(c =>
                {
                    var local = c.DateTime.TryToLocalTime();
                    return new Tuple<int, int, int>(local.Year, local.Month, local.Day);
                },
                    c => new { c.Count, WorkTime = c.DurationMin },
                    (time, ints) =>
                    new PomodoroGithubDashboardModel
                    {
                        DateTime = new DateTime(time.Item1, time.Item2, time.Item3, 0, 0, 0, DateTimeKind.Local),
                        Count = ints.Sum(x => x.Count),
                        DurationMin = ints.Sum(x => x.WorkTime)
                    });

            var result = new PomodoroDashboardModel
            {
                DashboardItems = joinedPomodoros.OrderBy(x => x.DateTime.Date),
                Profiles = distinctProfiles
            };

            return result;
        }

        private void _engine_OnPomodoroCompleted()
        {
            _itemRepository.Add(new PomodoroEntity
            {
                Count = 1,
                DateTime = DateTime.UtcNow,
                DurationMin = _engine.WorkTime / 60,
                ProfileName = _engineSettings.ActiveProfile
            });
        }
    }

    public class DashboardSettings : IPluginSettings
    {
        private readonly ISettingsForComponent _settings;

        public DashboardSettings(ISettings settings)
        {
            _settings = settings.GetSettingsForComponent(nameof(Dashboard));
        }

        public int NumberOfMonths
        {
            get => _settings.Get(nameof(NumberOfMonths), 6);
            set => _settings.Update(nameof(NumberOfMonths), value);
        }

        public string ProfileFilter
        {
            get => _settings.Get<string>(nameof(ProfileFilter), null);
            set => _settings.Update(nameof(ProfileFilter), value);
        }

        public void DeferChanges()
        {
            _settings.DeferChanges();
        }
    }
}

```

`\\?\C:\Dev\Projects\YAPA-2-modern\YAPA.Shared\Common\DateTimeExtensions.cs`:

```cs
﻿using System;

namespace YAPA.Shared.Common
{
    public static class DateTimeExtensions
    {
        public static DateTime TryToLocalTime(this DateTime date)
        {
            try
            {
                if(date.Kind == DateTimeKind.Local)
                {
                    return date;
                }
                var specified = DateTime.SpecifyKind(date, DateTimeKind.Utc);
                var local = specified.ToLocalTime();
                return local;
            }
            catch
            {
                return date;
            }
        }
    }
}

```

`\\?\C:\Dev\Projects\YAPA-2-modern\YAPA.Shared\Common\DateTimeWrapper.cs`:

```cs
﻿using System;
using YAPA.Shared.Contracts;

namespace YAPA.Shared.Common
{
    public class DateTimeWrapper : IDate
    {
        public DateTime DateTimeUtc()
        {
            return DateTime.UtcNow;
        }
    }
}

```

`\\?\C:\Dev\Projects\YAPA-2-modern\YAPA.Shared\Common\JsonYapaSettings.cs`:

```cs
﻿using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Runtime.CompilerServices;
using YAPA.Shared.Contracts;

namespace YAPA.Shared.Common
{
    public class JsonYapaSettings : ISettings
    {
        private readonly IEnvironment _enviroment;

        private readonly YapaSettingFile _settings;
        private readonly YapaSettingFile _localSettings;

        public JsonYapaSettings(IEnvironment enviroment, IJson json)
        {
            _enviroment = enviroment;

            _settings = new YapaSettingFile(json);
            _localSettings = new YapaSettingFile(json);

            _settings.PropertyChanged += _settings_PropertyChanged;
            _localSettings.PropertyChanged += _settings_PropertyChanged;
            Load();
        }

        public void Load()
        {
            _settings.Load(_enviroment.GetSettings());
            _localSettings.Load(_enviroment.GetLocalSettings());

            HasUnsavedChanges = false;
        }

        private void _settings_PropertyChanged(object sender, PropertyChangedEventArgs e)
        {
            if (e.PropertyName == nameof(HasUnsavedChanges))
            {
                HasUnsavedChanges = _settings.HasUnsavedChanges || _localSettings.HasUnsavedChanges;
            }
            else
            {
                // ReSharper disable once ExplicitCallerInfoArgument
                OnPropertyChanged(e.PropertyName);
            }
        }

        public T Get<T>(string name, T defaultValue, string plugin, bool defer, bool local = false)
        {
            var settingStore = local ? _localSettings : _settings;

            return settingStore.Get(name, defaultValue, plugin, defer);
        }

        public void Update(string name, object value, string plugin, bool defer, bool local = false)
        {
            var settingStore = local ? _localSettings : _settings;

            settingStore.Update(name, value, plugin, defer);

            if (defer == false)
            {
                if (local)
                {
                    SaveLocalSettings();
                }
                else
                {
                    SaveSettings();
                }
            }
        }

        public string GetRawSettingsForComponent(string plugin)
        {
            return _settings.GetRawSettingsForComponent(plugin);
        }

        public void SetRawSettingsForComponent(string plugin, string setting)
        {
            var current = _settings.SetRawSettingsForComponent(plugin, setting);

            _enviroment.SaveSettings(current);
        }

        public ISettingsForComponent GetSettingsForComponent(string plugin)
        {
            return new SettingForPlugin(this, plugin);
        }

        public void Save()
        {
            SaveSettings();
            SaveLocalSettings();

            Load();
        }

        private void SaveSettings()
        {
            var settings = _settings.Commit();

            _enviroment.SaveSettings(settings);
        }

        private void SaveLocalSettings()
        {
            var localSettings = _localSettings.Commit();

            _enviroment.SaveLocalSettings(localSettings);
        }

        private bool _hasUnsavedChanges;
        public bool HasUnsavedChanges
        {
            get => _hasUnsavedChanges;
            set
            {
                if (_hasUnsavedChanges == value)
                {
                    return;
                }
                _hasUnsavedChanges = value;
                OnPropertyChanged();
            }
        }

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public class SettingForPlugin : ISettingsForComponent
        {
            private readonly ISettings _settings;
            private readonly string _plugin;
            private bool _defer;

            public SettingForPlugin(ISettings settings, string plugin)
            {
                _settings = settings;
                _plugin = plugin;
                _defer = false;
            }

            public T Get<T>(string name, T defaultValue, bool local = false)
            {
                return _settings.Get(name, defaultValue, _plugin, _defer, local);
            }

            public void Update(string name, object value, bool local = false)
            {
                _settings.Update(name, value, _plugin, _defer, local);
            }

            public void DeferChanges()
            {
                _defer = true;
            }
        }

    }

    public class SettingsDictionary : Dictionary<string, Dictionary<string, object>>
    {
        public Dictionary<string, object> GetSettingsFor(string plugin)
        {
            Dictionary<string, object> settings;
            if (ContainsKey(plugin) == false)
            {
                settings = new Dictionary<string, object>();
                this[plugin] = settings;
            }
            else
            {
                settings = this[plugin];
            }

            return settings;
        }

        public object GetValue(string name, string plugin, object defaultValue)
        {
            if (ContainsKey(plugin) == false)
            {
                return defaultValue;
            }

            var settings = GetSettingsFor(plugin);
            var val = defaultValue;

            if (settings.ContainsKey(name))
            {
                val = settings[name];
            }

            return val;
        }

        public void SetValue(string name, string plugin, object value)
        {
            var settings = GetSettingsFor(plugin);
            settings[name] = value;
        }

        public void RemoveKey(string name, string plugin)
        {
            var settings = GetSettingsFor(plugin);
            if (settings.ContainsKey(name))
            {
                settings.Remove(name);
            }

            if (settings.Count == 0)
            {
                Remove(plugin);
            }
        }

        public void RemoveKey(string plugin)
        {
            if (ContainsKey(plugin))
            {
                Remove(plugin);
            }
        }

    }

    public class YapaSettingFile : INotifyPropertyChanged
    {
        private readonly IJson _json;
        private SettingsDictionary _settings;
        private readonly SettingsDictionary _modifiedSettings;

        public YapaSettingFile(IJson json)
        {
            _json = json;
            _settings = new SettingsDictionary();
            _modifiedSettings = new SettingsDictionary();
        }

        public string GetRawSettingsForComponent(string plugin)
        {
            if (!_settings.ContainsKey(plugin))
            {
                return string.Empty;
            }
            return _json.Serialize(_settings[plugin]);
        }

        public string SetRawSettingsForComponent(string plugin, string settings)
        {
            if (!_settings.ContainsKey(plugin))
            {
                return string.Empty;
            }

            _settings[plugin] = _json.Deserialize<Dictionary<string, object>>(settings);

            foreach (var pair in _settings[plugin])
            {
                OnPropertyChanged($"{plugin}.{pair.Key}");
            }

            return _json.Serialize(_settings);
        }

        public T Get<T>(string name, T defaultValue, string plugin, bool defer)
        {
            object value;
            var modValue = _modifiedSettings.GetValue(name, plugin, null);
            var settingValue = _settings.GetValue(name, plugin, null);

            if (defer)
            {
                value = modValue ?? settingValue ?? defaultValue;
            }
            else
            {
                value = settingValue ?? defaultValue;
            }

            if (value != null && value.Equals(defaultValue))
            {
                return (T)value;
            }

            return _json.ConvertToType<T>(value);
        }


        public void Update(string name, object value, string plugin, bool defer)
        {
            if (defer)
            {
                //if value is changed back to original value, just remove modification
                if (_json.AreEqual(value, _settings.GetValue(name, plugin, null)))
                {
                    _modifiedSettings.RemoveKey(name, plugin);
                }
                else
                {
                    _modifiedSettings.SetValue(name, plugin, value);
                }

                HasUnsavedChanges = _modifiedSettings.Any();
            }
            else
            {
                _settings.SetValue(name, plugin, value);
                // ReSharper disable once ExplicitCallerInfoArgument
                OnPropertyChanged($"{plugin}.{name}");
            }
        }

        public string Commit()
        {
            var settings = SaveToFile();
            _modifiedSettings.Clear();
            HasUnsavedChanges = false;
            return settings;
        }

        private string SaveToFile()
        {
            if (HasUnsavedChanges)
            {
                var changedProperties = new List<string>();
                foreach (var setting in _modifiedSettings)
                {
                    foreach (var value in setting.Value)
                    {
                        _settings.SetValue(value.Key, setting.Key, value.Value);
                        // ReSharper disable once ExplicitCallerInfoArgument
                        changedProperties.Add($"{setting.Key}.{value.Key}");
                    }
                }

                foreach (var item in changedProperties)
                {
                    OnPropertyChanged(item);
                }
            }

            var serialized = _json.Serialize(_settings);
            return serialized;
        }

        public void Load(string settings)
        {
            _modifiedSettings.Clear();
            HasUnsavedChanges = false;

            try
            {
                if (!string.IsNullOrEmpty(settings))
                {
                    _settings = _json.Deserialize<SettingsDictionary>(settings);
                    ApplyMigration();
                }
            }
            catch
            {
                //Ignore
            }

            _settings = _settings ?? new SettingsDictionary();
        }

        private bool _hasUnsavedChanges;

        public event PropertyChangedEventHandler PropertyChanged;

        public bool HasUnsavedChanges
        {
            get => _hasUnsavedChanges;
            set
            {
                if (_hasUnsavedChanges == value)
                {
                    return;
                }
                _hasUnsavedChanges = value;
                OnPropertyChanged();
            }
        }

        public void ApplyMigration()
        {
            var migrations = new List<Tuple<string, string>> { Tuple.Create("MinimizeToTray", "SystemTray") };
            var anyMigrationApplied = false;

            foreach (var migration in migrations)
            {
                if (!_settings.ContainsKey(migration.Item1))
                {
                    continue;
                }
                _settings[migration.Item2] = _settings[migration.Item1];
                _settings.RemoveKey(migration.Item1);
                anyMigrationApplied = true;
            }

            if (anyMigrationApplied)
            {
                Commit();
            }
        }

        protected virtual void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
    }

}
```

`\\?\C:\Dev\Projects\YAPA-2-modern\YAPA.Shared\Common\MainViewModel.cs`:

```cs
﻿using System.Windows.Input;
using YAPA.Shared.Contracts;

namespace YAPA.Shared.Common
{
    public class MainViewModel : IMainViewModel
    {
        public IPomodoroEngine Engine { get; set; }

        public ICommand StopCommand { get; set; }
        public ICommand StartCommand { get; set; }
        public ICommand ResetCommand { get; set; }
        public ICommand PauseCommand { get; set; }
        public ICommand SkipCommand { get; set; }

        public ICommand ShowSettingsCommand { get; set; }

        public MainViewModel(IPomodoroEngine engine, IShowSettingsCommand showSettings)
        {
            Engine = engine;
            StopCommand = new StopCommand(Engine);
            StartCommand = new StartCommand(Engine);
            ResetCommand = new ResetCommand(Engine);
            PauseCommand = new PauseCommand(Engine);
            SkipCommand = new SkipCommand(Engine);

            ShowSettingsCommand = showSettings;
        }
    }
}

```

`\\?\C:\Dev\Projects\YAPA-2-modern\YAPA.Shared\Common\NewftonsJson.cs`:

```cs
﻿using System;
using System.Collections;
using System.Linq;
using System.Reflection;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using YAPA.Shared.Contracts;

namespace Yapa.Shared.Common
{
    public class NewftonsJson : IJson
    {
        public string Serialize(object obj)
        {
            return JsonConvert.SerializeObject(obj);
        }

        public T Deserialize<T>(string obj)
        {
            return JsonConvert.DeserializeObject<T>(obj);
        }

        public T ConvertToType<T>(object value)
        {
            if (value == null)
            {
                return default(T);
            }
            else if (value.GetType() == typeof(T))
            {
                return (T)value;
            }
            else if (typeof(T).GetTypeInfo().IsEnum)
            {
                return (T)Enum.ToObject(typeof(T), value);
            }
            else if (typeof(T).GetTypeInfo().IsValueType || value is string)
            {
                return (T)Convert.ChangeType(value, typeof(T));
            }
            else if (value is JArray)
            {
                return ((JArray)value).ToObject<T>();
            }
            else
            {
                return ((JObject)value).ToObject<T>();
            }
        }

        public bool AreEqual(object valA, object valB)
        {
            if (valA == null && valB == null)
            {
                return true;
            }

            if (valA == null && valB != null
                || valA != null && valB == null)
            {
                return false;
            }

            if (valA.GetType().GetTypeInfo().IsValueType || valA is string)
            {
                return valA.Equals(valB);
            }
            else if (valA.GetType().GetTypeInfo().ImplementedInterfaces.FirstOrDefault(x => x == typeof(IEnumerable)) != null)
            {
                var listA = (IEnumerable)valA;
                var listB = (IEnumerable)((JObject)valB).ToObject(valA.GetType());


                if (Count(listA) != Count(listB))
                {
                    return false;
                }

                foreach (var b in listB)
                {
                    var contains = false;
                    foreach (var a in listA)
                    {
                        contains |= b.ToString().Equals(a);
                    }

                    if (contains == false)
                    {
                        return false;
                    }
                }
                return true;
            }

            return false;
        }

        public int Count(IEnumerable source)
        {
            int c = 0;
            var e = source.GetEnumerator();
            while (e.MoveNext())
                c++;
            return c;
        }
    }
}

```

`\\?\C:\Dev\Projects\YAPA-2-modern\YAPA.Shared\Common\PauseCommand.cs`:

```cs
﻿using System;
using System.Windows.Input;
using YAPA.Shared.Contracts;

namespace YAPA.Shared.Common
{
    public class PauseCommand : ICommand
    {
        private readonly IPomodoroEngine _engine;
        public PauseCommand(IPomodoroEngine engine)
        {
            _engine = engine;
            _engine.PropertyChanged += _engine_PropertyChanged;
        }

        private void _engine_PropertyChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e)
        {
            if (e.PropertyName == nameof(_engine.Phase))
            {
                CanExecuteChanged?.Invoke(this, EventArgs.Empty);
            }
        }

        public bool CanExecute(object parameter)
        {
            return _engine.Phase == PomodoroPhase.Work;
        }

        public void Execute(object parameter)
        {
            _engine.Pause();
        }

        public event EventHandler CanExecuteChanged;
    }
}

```

`\\?\C:\Dev\Projects\YAPA-2-modern\YAPA.Shared\Common\PomodoroEngine.cs`:

```cs
﻿using System;
using System.ComponentModel;
using System.Linq;
using System.Threading.Tasks;
using YAPA.Shared.Contracts;
using System.Collections.Generic;

namespace YAPA.Shared.Common
{
    public class PomodoroEngineSnapshot
    {
        public PomodoroProfile PomodoroProfile { get; set; }
        public string ProfileName { get; set; }
        public int PausedTime { get; set; }
        public DateTime StartDate { get; set; }
        public PomodoroPhase Phase { get; set; }
        public int PomodoroIndex { get; set; }
    }

    public class PomodoroEngine : IPomodoroEngine, IPlugin
    {
        private readonly PomodoroEngineSettings _settings;
        private readonly ITimer _timer;
        private readonly IDate _dateTime;
        private readonly IThreading _threading;
        private readonly IPomodoroRepository _repository;

        public int Index => Current.Index;

        private int _completedPomodorosThisSession;
        public int Counter
        {
            get
            {
                int counter;
                switch (_settings.Counter)
                {
                    case CounterEnum.PomodoroIndex:
                        counter = Index;
                        break;
                    case CounterEnum.CompletedToday:
                        counter = _repository.CompletedToday();
                        break;
                    case CounterEnum.CompletedThisSession:
                        counter = _completedPomodorosThisSession;
                        break;
                    default:
                        throw new ArgumentOutOfRangeException();
                }

                return counter;
            }
        }

        private int _elapsedInPause;
        public int Elapsed => Math.Min(_elapsedInPause + (int)(_endDate - _startDate).TotalSeconds, CurrentIntervalLength);
        public int Remaining => CurrentIntervalLength - Elapsed;

        public int CurrentIntervalLength
        {
            get
            {
                var length = 0;
                switch (Phase)
                {
                    case PomodoroPhase.NotStarted:
                    case PomodoroPhase.WorkEnded:
                    case PomodoroPhase.Work:
                    case PomodoroPhase.Pause:
                        length = WorkTime;
                        break;
                    case PomodoroPhase.Break:
                    case PomodoroPhase.BreakEnded:
                        length = BreakTime;
                        break;
                }
                return length;
            }
        }

        public int DisplayValue => _settings.CountBackwards ? Remaining : Elapsed;

        public int WorkTime => Current.WorkTime;

        public int BreakTime => Current.BreakTime;

        private PomodoroPhase _phase;
        public PomodoroPhase Phase
        {
            get => _phase;
            private set
            {
                if (_phase == value)
                {
                    return;
                }
                _phase = value;
                NotifyPropertyChanged(nameof(Phase));
                NotifyPropertyChanged(nameof(Counter));
                NotifyPropertyChanged(nameof(IsRunning));
            }
        }

        public event Func<bool> OnStarting;
        public event Action OnStarted;
        public event Action OnStopped;
        public event Action OnPaused;

        /// <summary>
        /// Invoked when pomodoro work is completed
        /// </summary>
        public event Action OnPomodoroCompleted;

        public bool IsRunning => Phase == PomodoroPhase.Break || Phase == PomodoroPhase.Work;

        private DateTime _startDate;
        private DateTime _endDate;

        public void Start()
        {
            var cancelStart = OnStarting?.Invoke();
            if (cancelStart.HasValue && cancelStart.Value)
            {
                return;
            }

            switch (Phase)
            {
                case PomodoroPhase.Pause:
                case PomodoroPhase.NotStarted:
                    Phase = PomodoroPhase.Work;
                    break;
                case PomodoroPhase.BreakEnded:
                    Phase = PomodoroPhase.Work;
                    Current = Current.NextPomodoro;
                    _elapsedInPause = 0;
                    break;
                case PomodoroPhase.WorkEnded:
                    Phase = PomodoroPhase.Break;
                    _elapsedInPause = 0;
                    break;
                default:
                    throw new InvalidOperationException($"Can't start pomodoro from phase: {Phase}");
            }

            _startDate = _endDate = _dateTime.DateTimeUtc();
            _timer.Start();

            OnStarted?.Invoke();
        }

        public void Stop()
        {
            ResetTo(Phase == PomodoroPhase.Break || Phase == PomodoroPhase.WorkEnded ? Current.NextPomodoro : Current);

            OnStopped?.Invoke();
        }

        public void Pause()
        {
            _timer.Stop();
            Phase = PomodoroPhase.Pause;
            _elapsedInPause = Elapsed;
            _startDate = _endDate = _dateTime.DateTimeUtc();
            OnPaused?.Invoke();
        }

        public void Reset()
        {
            ResetTo(_pom1);
        }

        private void ResetTo(Pomodoro pom)
        {
            _timer.Stop();

            switch (Phase)
            {
                case PomodoroPhase.Work:
                    Phase = PomodoroPhase.WorkEnded;
                    break;
                case PomodoroPhase.Break:
                    Phase = PomodoroPhase.BreakEnded;
                    break;
            }
            Phase = PomodoroPhase.NotStarted;
            _elapsedInPause = 0;

            _startDate = _endDate = _dateTime.DateTimeUtc();

            if (Current.Index != pom.Index)
            {
                Current = pom;
            }

            EverythingChanged();
        }

        private readonly Pomodoro _pom1;

        private Pomodoro _current;

        private Pomodoro Current
        {
            get => _current;
            set
            {
                if (_current?.Index == value.Index)
                {
                    return;
                }
                _current = value;
                NotifyPropertyChanged(nameof(Index));
                NotifyPropertyChanged(nameof(WorkTime));
                NotifyPropertyChanged(nameof(BreakTime));
            }
        }

        public PomodoroEngine(PomodoroEngineSettings settings, ITimer timer, IDate dateTime, IThreading threading, ISettings globalSettings, IPomodoroRepository repository)
        {
            _settings = settings;
            _timer = timer;
            _dateTime = dateTime;
            _threading = threading;
            _repository = repository;
            _timer.Tick += _timer_Tick;

            var pomodoros = new List<Pomodoro>();

            Pomodoro prev = null;
            for (int i = 1; i <= Math.Max(_settings.PomodorosBeforeLongBreak, 2); i++)
            {
                var current = new Pomodoro(_settings) { Index = i };
                if (prev != null)
                {
                    prev.NextPomodoro = current;
                }

                pomodoros.Add(current);
                prev = current;
            }

            _pom1 = pomodoros.First();
            var last = pomodoros.Last();
            last.NextPomodoro = _pom1;

            _startDate = _endDate = _dateTime.DateTimeUtc();

            OnPomodoroCompleted += PomodoroEngine_OnPomodoroCompleted;

            Current = _pom1;

            globalSettings.PropertyChanged += _globalSettings_PropertyChanged;

            var todayStart = _dateTime.DateTimeUtc().Date;
            var todayEnd = _dateTime.DateTimeUtc().Date.AddDays(1).AddSeconds(-1);
        }

        private void _globalSettings_PropertyChanged(object sender, PropertyChangedEventArgs e)
        {
            if (e.PropertyName == $"{nameof(PomodoroEngine)}.{nameof(_settings.WorkTime)}"
                || e.PropertyName == $"{nameof(PomodoroEngine)}.{nameof(_settings.BreakTime)}"
                || e.PropertyName == $"{nameof(PomodoroEngine)}.{nameof(_settings.LongBreakTime)}"
                || e.PropertyName == $"{nameof(PomodoroEngine)}.{nameof(_settings.CountBackwards)}"
                || e.PropertyName == $"{nameof(PomodoroEngine)}.{nameof(_settings.ActiveProfile)}"
                || e.PropertyName == $"{nameof(PomodoroEngine)}.{nameof(_settings.Profiles)}")
            {
                NotifyPropertyChanged(nameof(DisplayValue));
                NotifyPropertyChanged(nameof(WorkTime));
                NotifyPropertyChanged(nameof(BreakTime));
            }
            else if (e.PropertyName == $"{nameof(PomodoroEngine)}.{nameof(_settings.Counter)}")
            {
                NotifyPropertyChanged(nameof(Counter));
            }

        }

        private async void PomodoroEngine_OnPomodoroCompleted()
        {
            _completedPomodorosThisSession++;
            NotifyPropertyChanged(nameof(Counter));

            var delayBeforeStarting = 1.5;
            if (!_settings.AutoStartBreak)
            {
                return;
            }
            await Task.Delay(TimeSpan.FromSeconds(delayBeforeStarting));
            if (IsRunning == false)
            {
                var expectedWorkEndTime = _startDate.AddSeconds(WorkTime - _elapsedInPause);
                Start();
                _startDate = expectedWorkEndTime;
            }
        }
        private async void PomodoroEngine_OnPomodoroBreakCompleted()
        {
            var delayBeforeStarting = 1.5;
            if (!_settings.AutoStartWork)
            {
                return;
            }
            await Task.Delay(TimeSpan.FromSeconds(delayBeforeStarting));

            Start();
        }

        private void _timer_Tick()
        {
            _endDate = _dateTime.DateTimeUtc();
            NotifyPropertyChanged(nameof(Elapsed));
            NotifyPropertyChanged(nameof(Remaining));
            NotifyPropertyChanged(nameof(DisplayValue));

            if (Phase == PomodoroPhase.Work && Elapsed >= WorkTime)
            {
                _timer.Stop();
                Phase = PomodoroPhase.WorkEnded;
                OnPomodoroCompleted?.Invoke();
                NotifyPropertyChanged(nameof(Counter));
            }
            else if (Phase == PomodoroPhase.Break && Elapsed >= BreakTime)
            {
                _timer.Stop();
                Phase = PomodoroPhase.BreakEnded;
                PomodoroEngine_OnPomodoroBreakCompleted();
            }
        }

        public PomodoroEngineSnapshot GetSnapshot()
        {
            var snapshot = new PomodoroEngineSnapshot
            {
                PomodoroProfile = _settings.Profiles[_settings.ActiveProfile],
                ProfileName = _settings.ActiveProfile,
                PausedTime = Elapsed,
                Phase = Phase,
                StartDate = _dateTime.DateTimeUtc(),
                PomodoroIndex = Index
            };

            return snapshot;
        }

        public void LoadSnapshot(PomodoroEngineSnapshot snapshot)
        {
            _timer.Stop();

            if (string.IsNullOrEmpty(snapshot.ProfileName))
            {
                var standartProfile = "Snapshot";

                var currentProfiles = _settings.Profiles;
                currentProfiles[standartProfile] = snapshot.PomodoroProfile;

                _settings.Profiles = currentProfiles;
                _settings.ActiveProfile = standartProfile;
            }
            else
            {
                var currentProfiles = _settings.Profiles;
                currentProfiles[snapshot.ProfileName] = snapshot.PomodoroProfile;

                _settings.Profiles = currentProfiles;
                _settings.ActiveProfile = snapshot.ProfileName;
            }

            _elapsedInPause = snapshot.PausedTime;

            if (snapshot.Phase == PomodoroPhase.Work ||
                snapshot.Phase == PomodoroPhase.Break ||
                (snapshot.Phase == PomodoroPhase.WorkEnded && _settings.AutoStartBreak))
            {
                _startDate = _endDate = snapshot.StartDate;
                _timer.Start();
            }

            Phase = snapshot.Phase;

            EverythingChanged();
        }

        private void EverythingChanged()
        {
            NotifyPropertyChanged(nameof(Phase));
            NotifyPropertyChanged(nameof(Counter));
            NotifyPropertyChanged(nameof(IsRunning));
            NotifyPropertyChanged(nameof(Elapsed));
            NotifyPropertyChanged(nameof(Remaining));
            NotifyPropertyChanged(nameof(DisplayValue));
            NotifyPropertyChanged(nameof(Index));
            NotifyPropertyChanged(nameof(WorkTime));
            NotifyPropertyChanged(nameof(BreakTime));
            NotifyPropertyChanged(nameof(DisplayValue));
        }

        public event PropertyChangedEventHandler PropertyChanged;

        private void NotifyPropertyChanged(string property)
        {
            _threading.RunOnUiThread(() =>
            {
                PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(property));
            });
        }
    }

    public class PomodoroEngineSettings : IPluginSettings
    {
        private readonly ISettingsForComponent _settings;

        private static readonly Dictionary<string, PomodoroProfile> DefaultProfile;
        private static string DefaultProfileName = "Pomodoro";

        static PomodoroEngineSettings()
        {
            DefaultProfile = new Dictionary<string, PomodoroProfile>
            {
                [DefaultProfileName] = new PomodoroProfile
                {
                    AutoStartBreak = false,
                    BreakTime = 5 * 60,
                    LongBreakTime = 15 * 60,
                    WorkTime = 25 * 60,
                    PomodorosBeforeLongBreak = 4
                }
            };
        }

        public Dictionary<string, PomodoroProfile> Profiles
        {
            get => _settings.Get(nameof(Profiles), DefaultProfile);
            set => _settings.Update(nameof(Profiles), value);
        }

        public string ActiveProfile
        {
            get => _settings.Get(nameof(ActiveProfile), DefaultProfileName);
            set => _settings.Update(nameof(ActiveProfile), value);
        }

        public int WorkTime
        {
            get => Profiles[ActiveProfile].WorkTime;
            set
            {
                var temp = new Dictionary<string, PomodoroProfile>(Profiles);
                var profile = temp[ActiveProfile];
                profile.WorkTime = value;
                Profiles = temp;
            }
        }

        public int BreakTime
        {
            get => Profiles[ActiveProfile].BreakTime;
            set
            {
                var temp = new Dictionary<string, PomodoroProfile>(Profiles);
                var profile = temp[ActiveProfile];
                profile.BreakTime = value;
                Profiles = temp;
            }
        }

        public int LongBreakTime
        {
            get => Profiles[ActiveProfile].LongBreakTime;
            set
            {
                var temp = new Dictionary<string, PomodoroProfile>(Profiles);
                var profile = temp[ActiveProfile];
                profile.LongBreakTime = value;
                Profiles = temp;
            }
        }

        public bool AutoStartBreak
        {
            get => Profiles[ActiveProfile].AutoStartBreak;
            set
            {
                var temp = new Dictionary<string, PomodoroProfile>(Profiles);
                var profile = temp[ActiveProfile];
                profile.AutoStartBreak = value;
                Profiles = temp;
            }
        }

        public bool AutoStartWork
        {
            get => Profiles[ActiveProfile].AutoStartWork;
            set
            {
                var temp = new Dictionary<string, PomodoroProfile>(Profiles);
                var profile = temp[ActiveProfile];
                profile.AutoStartWork = value;
                Profiles = temp;
            }
        }

        public int PomodorosBeforeLongBreak
        {
            get => Profiles[ActiveProfile].PomodorosBeforeLongBreak;
            set
            {
                var temp = new Dictionary<string, PomodoroProfile>(Profiles);
                var profile = temp[ActiveProfile];
                profile.PomodorosBeforeLongBreak = value;
                Profiles = temp;
            }
        }

        public string FontFamily
        {
            get => _settings.Get(nameof(FontFamily), "Segoe UI Light.ttf");
            set => _settings.Update(nameof(FontFamily), value);
        }

        public bool CountBackwards
        {
            get => _settings.Get(nameof(CountBackwards), false);
            set => _settings.Update(nameof(CountBackwards), value);
        }

        public bool DisableSoundNotifications
        {
            get => _settings.Get(nameof(DisableSoundNotifications), false);
            set => _settings.Update(nameof(DisableSoundNotifications), value);
        }

        public double Volume
        {
            get => _settings.Get(nameof(Volume), 0.5);
            set => _settings.Update(nameof(Volume), value);
        }

        public CounterEnum Counter
        {
            get => _settings.Get(nameof(Counter), CounterEnum.PomodoroIndex);
            set => _settings.Update(nameof(Counter), value);
        }

        public string ReleaseNotes
        {
            get => _settings.Get(nameof(ReleaseNotes), string.Empty, true);
            set => _settings.Update(nameof(ReleaseNotes), value, true);
        }

        public PomodoroEngineSettings(ISettings settings)
        {
            _settings = settings.GetSettingsForComponent(nameof(PomodoroEngine));
        }

        public void DeferChanges()
        {
            _settings.DeferChanges();
        }
    }

    public class PomodoroProfile
    {
        public int WorkTime { get; set; }
        public int BreakTime { get; set; }
        public int LongBreakTime { get; set; }
        public bool AutoStartBreak { get; set; }
        public bool AutoStartWork { get; set; }
        public int PomodorosBeforeLongBreak { get; set; }
    }

    internal class Pomodoro
    {
        private readonly PomodoroEngineSettings _settings;

        public int Index { get; set; }

        public int WorkTime => _settings.WorkTime;

        public int BreakTime => Index == _settings.PomodorosBeforeLongBreak ? _settings.LongBreakTime : _settings.BreakTime;

        public Pomodoro NextPomodoro { get; set; }

        public Pomodoro(PomodoroEngineSettings settings)
        {
            _settings = settings;
        }
    }
}

```

`\\?\C:\Dev\Projects\YAPA-2-modern\YAPA.Shared\Common\ResetCommand.cs`:

```cs
﻿using System;
using System.Windows.Input;
using YAPA.Shared.Contracts;

namespace YAPA.Shared.Common
{
    public class ResetCommand : ICommand
    {
        private readonly IPomodoroEngine _engine;
        public ResetCommand(IPomodoroEngine engine)
        {
            _engine = engine;
            _engine.PropertyChanged += _engine_PropertyChanged;
        }

        private void _engine_PropertyChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e)
        {
            if (e.PropertyName == nameof(_engine.Phase))
            {
                CanExecuteChanged?.Invoke(this, EventArgs.Empty);
            }
        }

        public bool CanExecute(object parameter)
        {
            //Can't reset if we haven't started any pomodoro
            return !(_engine.Index == 1 && _engine.Phase == PomodoroPhase.NotStarted);
        }

        public void Execute(object parameter)
        {
            _engine.Reset();
        }

        public event EventHandler CanExecuteChanged;
    }
}

```

`\\?\C:\Dev\Projects\YAPA-2-modern\YAPA.Shared\Common\SkipCommand.cs`:

```cs
﻿using System;
using System.Windows.Input;
using YAPA.Shared.Contracts;

namespace YAPA.Shared.Common
{
   public class SkipCommand:ICommand
    {
        private readonly IPomodoroEngine _engine;
        public SkipCommand(IPomodoroEngine engine)
        {
            _engine = engine;
            _engine.PropertyChanged += _engine_PropertyChanged;
        }

        private void _engine_PropertyChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e)
        {
            if (e.PropertyName == nameof(_engine.Phase))
            {
                CanExecuteChanged?.Invoke(this, EventArgs.Empty);
            }
        }

        public bool CanExecute(object parameter)
        {
            return _engine.Phase == PomodoroPhase.WorkEnded;
        }

        public event EventHandler CanExecuteChanged;

        public void Execute(object parameter)
        {
            _engine.Stop();
            _engine.Start();
        }

    }
}

```

`\\?\C:\Dev\Projects\YAPA-2-modern\YAPA.Shared\Common\StartCommand.cs`:

```cs
﻿using System;
using System.Windows.Input;
using YAPA.Shared.Contracts;

namespace YAPA.Shared.Common
{
    public class StartCommand : ICommand
    {
        private readonly IPomodoroEngine _engine;
        public StartCommand(IPomodoroEngine engine)
        {
            _engine = engine;
            _engine.PropertyChanged += _engine_PropertyChanged;
        }

        private void _engine_PropertyChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e)
        {
            if (e.PropertyName == nameof(_engine.Phase))
            {
                CanExecuteChanged?.Invoke(this, EventArgs.Empty);
            }
        }

        public bool CanExecute(object parameter)
        {
            return _engine.Phase != PomodoroPhase.Work && _engine.Phase != PomodoroPhase.Break;
        }

        public event EventHandler CanExecuteChanged;

        public void Execute(object parameter)
        {
            _engine.Start();
        }

    }
}

```

`\\?\C:\Dev\Projects\YAPA-2-modern\YAPA.Shared\Common\StopCommand.cs`:

```cs
﻿using System;
using System.Windows.Input;
using YAPA.Shared.Contracts;

namespace YAPA.Shared.Common
{
    public class StopCommand : ICommand
    {
        private readonly IPomodoroEngine _engine;
        public StopCommand(IPomodoroEngine engine)
        {
            _engine = engine;
            _engine.PropertyChanged += _engine_PropertyChanged;
        }

        private void _engine_PropertyChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e)
        {
            if (e.PropertyName == nameof(_engine.Phase))
            {
                CanExecuteChanged?.Invoke(this, EventArgs.Empty);
            }
        }

        public bool CanExecute(object parameter)
        {
            return _engine.Phase == PomodoroPhase.Work || _engine.Phase == PomodoroPhase.Break || _engine.Phase == PomodoroPhase.Pause || _engine.Phase == PomodoroPhase.WorkEnded;
        }

        public void Execute(object parameter)
        {
            _engine.Stop();
        }

        public event EventHandler CanExecuteChanged;
    }
}

```

`\\?\C:\Dev\Projects\YAPA-2-modern\YAPA.Shared\Contracts\IApplication.cs`:

```cs
﻿using System;

namespace YAPA.Shared.Contracts
{
    public enum ApplicationState
    {
        Normal,
        Minimized,
        Maximized,
    }

    public interface IApplication
    {
        bool ShowInTaskbar { get; set; }
        void Show();
        void Hide();
        void CloseApp();

        event Action<ApplicationState> StateChanged;
        event Action Closing;
        event Action Loaded;

        IntPtr WindowHandle { get; }
        double Left { get; set; }
        double Top { get; set; }
        double Width { get; set; }
        double Height { get; set; }
        ApplicationState AppState { get; set; }

        bool ProcessCommandLineArg(string args);
    }
}

```

`\\?\C:\Dev\Projects\YAPA-2-modern\YAPA.Shared\Contracts\IDate.cs`:

```cs
﻿using System;

namespace YAPA.Shared.Contracts
{
    public interface IDate
    {
        DateTime DateTimeUtc();
    }
}

```

`\\?\C:\Dev\Projects\YAPA-2-modern\YAPA.Shared\Contracts\IDependencyInjector.cs`:

```cs
﻿using System;

namespace YAPA.Shared.Contracts
{
    public interface IDependencyInjector
    {
        object Resolve(Type type);
        void Register(Type type, bool singleInsntace = false);
        void RegisterInstance(object instance, Type asType = null);
    }
}

```

`\\?\C:\Dev\Projects\YAPA-2-modern\YAPA.Shared\Contracts\IEnviroment.cs`:

```cs
﻿namespace YAPA.Shared.Contracts
{
    public interface IEnvironment
    {
        string GetSettings();
        void SaveSettings(string settings);

        string GetLocalSettings();
        void SaveLocalSettings(string settings);

        string GetPluginDirectory();
        string GetThemeDirectory();

        bool PreRelease();
    }
}

```

`\\?\C:\Dev\Projects\YAPA-2-modern\YAPA.Shared\Contracts\IFontService.cs`:

```cs
﻿using System.Collections.Generic;

namespace YAPA.Shared.Contracts
{
    public interface IFontService
    {
        Dictionary<string, string> GetAllFonts();
        string GetFontPath(string name);
    }
}

```

`\\?\C:\Dev\Projects\YAPA-2-modern\YAPA.Shared\Contracts\IJson.cs`:

```cs
﻿namespace YAPA.Shared.Contracts
{
    public interface IJson
    {
        string Serialize(object obj);

        T Deserialize<T>(string obj);

        T ConvertToType<T>(object obj);

        bool AreEqual(object a, object b);
    }
}

```

`\\?\C:\Dev\Projects\YAPA-2-modern\YAPA.Shared\Contracts\IMainViewModel.cs`:

```cs
﻿using System.Windows.Input;

namespace YAPA.Shared.Contracts
{
    public interface IMainViewModel
    {
        IPomodoroEngine Engine { get; set; }
        ICommand StopCommand { get; set; }
        ICommand StartCommand { get; set; }
        ICommand ResetCommand { get; set; }
        ICommand PauseCommand { get; set; }
        ICommand ShowSettingsCommand { get; set; }
        ICommand SkipCommand { get; set; }
    }
}

```

`\\?\C:\Dev\Projects\YAPA-2-modern\YAPA.Shared\Contracts\IMusicPlayer.cs`:

```cs
﻿namespace YAPA.Shared.Contracts
{
    public interface IMusicPlayer
    {
        void Load(string path);
        void Play(bool repeat = false, double volume = 0.5);
        void Stop();
        bool IsPlaying { get; }
    }
}

```

`\\?\C:\Dev\Projects\YAPA-2-modern\YAPA.Shared\Contracts\IPlugin.cs`:

```cs
﻿namespace YAPA.Shared.Contracts
{
    public interface IPlugin
    {
    }
}

```

`\\?\C:\Dev\Projects\YAPA-2-modern\YAPA.Shared\Contracts\IPluginManager.cs`:

```cs
﻿using System.Collections.Generic;

namespace YAPA.Shared.Contracts
{
    public interface IPluginManager
    {
        IEnumerable<IPluginMeta> Plugins { get; }
        IEnumerable<IPluginMeta> BuiltInPlugins { get; }
        IEnumerable<IPluginMeta> CustomPlugins { get; }
        IEnumerable<IPluginMeta> ActivePlugins { get; }
        object ResolveSettingWindow(IPluginMeta plugin);
        void InitPlugins();
    }
}

```

`\\?\C:\Dev\Projects\YAPA-2-modern\YAPA.Shared\Contracts\IPluginMeta.cs`:

```cs
﻿using System;

namespace YAPA.Shared.Contracts
{
    public interface IPluginMeta
    {
        string Title { get; }
        string Id { get; }
        Type Plugin { get; }
        Type Settings { get; }
        Type SettingEditWindow { get; }
    }

    public interface IPluginSettingWindow
    {
        void Refresh();
    }
}

```

`\\?\C:\Dev\Projects\YAPA-2-modern\YAPA.Shared\Contracts\IPluginSettings.cs`:

```cs
﻿namespace YAPA.Shared.Contracts
{
    public interface IPluginSettings
    {
        void DeferChanges();
    }
}

```

`\\?\C:\Dev\Projects\YAPA-2-modern\YAPA.Shared\Contracts\IPomodoroEngine.cs`:

```cs
﻿using System;
using System.ComponentModel;
using YAPA.Shared.Common;

namespace YAPA.Shared.Contracts
{
    public interface IPomodoroEngine : INotifyPropertyChanged
    {
        int Index { get; }
        int Counter { get; }
        PomodoroPhase Phase { get; }
        int Elapsed { get; }
        int Remaining { get; }
        int DisplayValue { get; }
        int CurrentIntervalLength { get; }
        int WorkTime { get; }
        int BreakTime { get; }

        event Func<bool> OnStarting;
        event Action OnStarted;
        event Action OnStopped;
        event Action OnPaused;
        event Action OnPomodoroCompleted;

        void Start();
        void Stop();
        void Pause();
        void Reset();

        bool IsRunning { get; }

        PomodoroEngineSnapshot GetSnapshot();
        void LoadSnapshot(PomodoroEngineSnapshot snapshot);
    }

    public enum PomodoroPhase
    {
        NotStarted,
        Work,
        WorkEnded,
        Break,
        BreakEnded,
        Pause
    }
    
    public enum CounterEnum
    {
        PomodoroIndex,
        CompletedToday,
        CompletedThisSession
    }
}

```

`\\?\C:\Dev\Projects\YAPA-2-modern\YAPA.Shared\Contracts\IPomodoroRepository.cs`:

```cs
﻿using System;
using System.Collections.Generic;

namespace YAPA.Shared.Contracts
{
    public interface IPomodoroRepository
    {
        void Delete(int id);
        void Add(PomodoroEntity pomo);
        int CompletedToday();
        IEnumerable<PomodoroEntity> After(DateTime date);
    }

    public class PomodoroEntity
    {
        public int Id { get; set; }
        public string ProfileName { get; set; }

        public DateTime DateTime { get; set; }
        public int Count { get; set; }
        public int DurationMin { get; set; }
    }

    public class PomodoroGithubDashboardModel
    {
        public DateTime DateTime { get; set; }
        public int Count { get; set; }
        public int DurationMin { get; set; }
    }

    public class PomodoroDashboardModel
    {
        public IEnumerable<PomodoroGithubDashboardModel> DashboardItems { get; set; }
        public IEnumerable<string> Profiles { get; set; }
    }
}

```

`\\?\C:\Dev\Projects\YAPA-2-modern\YAPA.Shared\Contracts\ISettingManager.cs`:

```cs
﻿using System.ComponentModel;

namespace YAPA.Shared.Contracts
{
    public interface ISettingManager : INotifyPropertyChanged
    {
        bool RestartNeeded { get; set; }
        string NewVersion { get; set; }
    }
}

```

`\\?\C:\Dev\Projects\YAPA-2-modern\YAPA.Shared\Contracts\ISettings.cs`:

```cs
﻿using System.ComponentModel;

namespace YAPA.Shared.Contracts
{
    public interface ISettings : INotifyPropertyChanged
    {
        T Get<T>(string name, T defaultValue, string plugin, bool defer, bool local = false);

        bool HasUnsavedChanges { get; }

        void Update(string name, object value, string plugin, bool defer, bool local = false);

        ISettingsForComponent GetSettingsForComponent(string plugin);

        void SetRawSettingsForComponent(string plugin, string settings);
        string GetRawSettingsForComponent(string plugin);

        void Save();
        void Load();
    }

    public interface ISettingsForComponent
    {
        T Get<T>(string name, T defaultValue, bool local = false);

        void Update(string name, object value, bool local = false);

        void DeferChanges();
    }
}

```

`\\?\C:\Dev\Projects\YAPA-2-modern\YAPA.Shared\Contracts\IShowSettingsCommand.cs`:

```cs
﻿using System.Windows.Input;

namespace YAPA.Shared.Contracts
{
    public interface IShowSettingsCommand : ICommand
    {
    }
}

```

`\\?\C:\Dev\Projects\YAPA-2-modern\YAPA.Shared\Contracts\IThemeManager.cs`:

```cs
﻿using System.Collections.Generic;

namespace YAPA.Shared.Contracts
{
    public interface IThemeManager
    {
        IEnumerable<IThemeMeta> Themes { get; }
        object ResolveSettingWindow(IThemeMeta theme);
        IThemeMeta ActiveTheme { get; }
    }
}

```

`\\?\C:\Dev\Projects\YAPA-2-modern\YAPA.Shared\Contracts\IThemeMeta.cs`:

```cs
﻿using System;

namespace YAPA.Shared.Contracts
{
    public interface IThemeMeta
    {
        string Title { get; }
        Type Theme { get; }
        Type Settings { get; }
        Type SettingEditWindow { get; }
    }
}

```

`\\?\C:\Dev\Projects\YAPA-2-modern\YAPA.Shared\Contracts\IThreading.cs`:

```cs
﻿using System;

namespace YAPA.Shared.Contracts
{
    public interface IThreading
    {
        void RunOnUiThread(Action action);
    }
}

```

`\\?\C:\Dev\Projects\YAPA-2-modern\YAPA.Shared\Contracts\ITimer.cs`:

```cs
﻿using System;

namespace YAPA.Shared.Contracts
{
    public interface ITimer
    {
        event Action Tick;
        void Start();
        void Stop();
    }
}

```

`\\?\C:\Dev\Projects\YAPA-2-modern\YAPA.Shared\YAPA.Shared.csproj`:

```csproj
<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFramework>netstandard1.4</TargetFramework>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="Newtonsoft.Json" Version="10.0.3" />
  </ItemGroup>

</Project>

```

`\\?\C:\Dev\Projects\YAPA-2-modern\YAPA.Shared.Tests\SimpleWorkFlow.cs`:

```cs
using System;
using System.Collections.Generic;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using NSubstitute;
using YAPA.Shared.Common;
using YAPA.Shared.Contracts;

namespace YAPA.Shared.Tests
{
    [TestClass]
    public class SimpleWorkflow
    {
        [TestMethod]
        public void SimpleWorkflowThroughAllPomodoros()
        {
            var timerSub = new TimerMock();
            var engineSettings = new PomodoroEngineSettings(Substitute.For<ISettings>());
            var threading = Substitute.For<IThreading>();
            var globalSettings = Substitute.For<ISettings>();
            var repository = Substitute.For<IPomodoroRepository>();
            var dateTime = new DateMock();

            var baseDate = new DateTime(2017, 6, 1, 12, 0, 0);
            var workTime = 25 * 60;
            var breakTime = 5 * 60;
            var longBreakTime = 10 * 60;

            var profileName = "test";
            var profile = new PomodoroProfile
            {
                AutoStartBreak = false,
                BreakTime = breakTime,
                WorkTime = workTime,
                LongBreakTime = longBreakTime
            };

            var profiles = new Dictionary<string, PomodoroProfile> {[profileName] = profile};

            engineSettings.Profiles.Returns(profiles);
            engineSettings.ActiveProfile.Returns(profileName);
            engineSettings.CountBackwards.Returns(false);

            dateTime.DateToReturn = baseDate;

            var engine = new PomodoroEngine(engineSettings, timerSub, dateTime, threading, globalSettings, repository);

            //----First pomodoro
            Assert.AreEqual(PomodoroPhase.NotStarted, engine.Phase);
            engine.Start();
            timerSub.PerformTick();
            Assert.AreEqual(PomodoroPhase.Work, engine.Phase);
            Assert.AreEqual(workTime, engine.Remaining);
            Assert.AreEqual(0, engine.DisplayValue);
            Assert.AreEqual(0, engine.Elapsed);
            Assert.AreEqual(1, engine.Index);

            baseDate = baseDate.AddMinutes(1);
            dateTime.DateToReturn = baseDate;
            timerSub.PerformTick();

            Assert.AreEqual(PomodoroPhase.Work, engine.Phase);
            Assert.AreEqual(workTime - 60, engine.Remaining);
            Assert.AreEqual(60, engine.DisplayValue);
            Assert.AreEqual(60, engine.Elapsed);
            Assert.AreEqual(1, engine.Index);

            baseDate = baseDate.AddMinutes(24);
            dateTime.DateToReturn = baseDate;
            timerSub.PerformTick();

            Assert.AreEqual(PomodoroPhase.WorkEnded, engine.Phase);
            Assert.AreEqual(0, engine.Remaining);
            Assert.AreEqual(workTime, engine.DisplayValue);
            Assert.AreEqual(workTime, engine.Elapsed);
            Assert.AreEqual(1, engine.Index);

            engine.Start();
            timerSub.PerformTick();
            Assert.AreEqual(PomodoroPhase.Break, engine.Phase);
            Assert.AreEqual(breakTime, engine.Remaining);
            Assert.AreEqual(0, engine.DisplayValue);
            Assert.AreEqual(0, engine.Elapsed);
            Assert.AreEqual(1, engine.Index);

            baseDate = baseDate.AddMinutes(1);
            dateTime.DateToReturn = baseDate;
            timerSub.PerformTick();

            Assert.AreEqual(PomodoroPhase.Break, engine.Phase);
            Assert.AreEqual(breakTime - 60, engine.Remaining);
            Assert.AreEqual(60, engine.DisplayValue);
            Assert.AreEqual(60, engine.Elapsed);
            Assert.AreEqual(1, engine.Index);

            baseDate = baseDate.AddMinutes(4);
            dateTime.DateToReturn = baseDate;
            timerSub.PerformTick();

            Assert.AreEqual(PomodoroPhase.BreakEnded, engine.Phase);
            Assert.AreEqual(0, engine.Remaining);
            Assert.AreEqual(breakTime, engine.DisplayValue);
            Assert.AreEqual(breakTime, engine.Elapsed);
            Assert.AreEqual(1, engine.Index);

            //----Second pomodoro
            Assert.AreEqual(PomodoroPhase.BreakEnded, engine.Phase);
            engine.Start();
            timerSub.PerformTick();
            Assert.AreEqual(PomodoroPhase.Work, engine.Phase);
            Assert.AreEqual(workTime, engine.Remaining);
            Assert.AreEqual(0, engine.DisplayValue);
            Assert.AreEqual(0, engine.Elapsed);
            Assert.AreEqual(2, engine.Index);

            baseDate = baseDate.AddMinutes(1);
            dateTime.DateToReturn = baseDate;
            timerSub.PerformTick();

            Assert.AreEqual(PomodoroPhase.Work, engine.Phase);
            Assert.AreEqual(workTime - 60, engine.Remaining);
            Assert.AreEqual(60, engine.DisplayValue);
            Assert.AreEqual(60, engine.Elapsed);
            Assert.AreEqual(2, engine.Index);

            baseDate = baseDate.AddMinutes(24);
            dateTime.DateToReturn = baseDate;
            timerSub.PerformTick();

            Assert.AreEqual(PomodoroPhase.WorkEnded, engine.Phase);
            Assert.AreEqual(0, engine.Remaining);
            Assert.AreEqual(workTime, engine.DisplayValue);
            Assert.AreEqual(workTime, engine.Elapsed);
            Assert.AreEqual(2, engine.Index);

            engine.Start();
            timerSub.PerformTick();
            Assert.AreEqual(PomodoroPhase.Break, engine.Phase);
            Assert.AreEqual(breakTime, engine.Remaining);
            Assert.AreEqual(0, engine.DisplayValue);
            Assert.AreEqual(0, engine.Elapsed);
            Assert.AreEqual(2, engine.Index);

            baseDate = baseDate.AddMinutes(1);
            dateTime.DateToReturn = baseDate;
            timerSub.PerformTick();

            Assert.AreEqual(PomodoroPhase.Break, engine.Phase);
            Assert.AreEqual(breakTime - 60, engine.Remaining);
            Assert.AreEqual(60, engine.DisplayValue);
            Assert.AreEqual(60, engine.Elapsed);
            Assert.AreEqual(2, engine.Index);

            baseDate = baseDate.AddMinutes(4);
            dateTime.DateToReturn = baseDate;
            timerSub.PerformTick();

            Assert.AreEqual(PomodoroPhase.BreakEnded, engine.Phase);
            Assert.AreEqual(0, engine.Remaining);
            Assert.AreEqual(breakTime, engine.DisplayValue);
            Assert.AreEqual(breakTime, engine.Elapsed);
            Assert.AreEqual(2, engine.Index);

            //----Third pomodoro
            Assert.AreEqual(PomodoroPhase.BreakEnded, engine.Phase);
            engine.Start();
            timerSub.PerformTick();
            Assert.AreEqual(PomodoroPhase.Work, engine.Phase);
            Assert.AreEqual(workTime, engine.Remaining);
            Assert.AreEqual(0, engine.DisplayValue);
            Assert.AreEqual(0, engine.Elapsed);
            Assert.AreEqual(3, engine.Index);

            baseDate = baseDate.AddMinutes(1);
            dateTime.DateToReturn = baseDate;
            timerSub.PerformTick();

            Assert.AreEqual(PomodoroPhase.Work, engine.Phase);
            Assert.AreEqual(workTime - 60, engine.Remaining);
            Assert.AreEqual(60, engine.DisplayValue);
            Assert.AreEqual(60, engine.Elapsed);
            Assert.AreEqual(3, engine.Index);

            baseDate = baseDate.AddMinutes(24);
            dateTime.DateToReturn = baseDate;
            timerSub.PerformTick();

            Assert.AreEqual(PomodoroPhase.WorkEnded, engine.Phase);
            Assert.AreEqual(0, engine.Remaining);
            Assert.AreEqual(workTime, engine.DisplayValue);
            Assert.AreEqual(workTime, engine.Elapsed);
            Assert.AreEqual(3, engine.Index);

            engine.Start();
            timerSub.PerformTick();
            Assert.AreEqual(PomodoroPhase.Break, engine.Phase);
            Assert.AreEqual(breakTime, engine.Remaining);
            Assert.AreEqual(0, engine.DisplayValue);
            Assert.AreEqual(0, engine.Elapsed);
            Assert.AreEqual(3, engine.Index);

            baseDate = baseDate.AddMinutes(1);
            dateTime.DateToReturn = baseDate;
            timerSub.PerformTick();

            Assert.AreEqual(PomodoroPhase.Break, engine.Phase);
            Assert.AreEqual(breakTime - 60, engine.Remaining);
            Assert.AreEqual(60, engine.DisplayValue);
            Assert.AreEqual(60, engine.Elapsed);
            Assert.AreEqual(3, engine.Index);

            baseDate = baseDate.AddMinutes(4);
            dateTime.DateToReturn = baseDate;
            timerSub.PerformTick();

            Assert.AreEqual(PomodoroPhase.BreakEnded, engine.Phase);
            Assert.AreEqual(0, engine.Remaining);
            Assert.AreEqual(breakTime, engine.DisplayValue);
            Assert.AreEqual(breakTime, engine.Elapsed);
            Assert.AreEqual(3, engine.Index);

            //----Fourth pomodoro (long break)
            Assert.AreEqual(PomodoroPhase.BreakEnded, engine.Phase);
            engine.Start();
            timerSub.PerformTick();
            Assert.AreEqual(PomodoroPhase.Work, engine.Phase);
            Assert.AreEqual(workTime, engine.Remaining);
            Assert.AreEqual(0, engine.DisplayValue);
            Assert.AreEqual(0, engine.Elapsed);
            Assert.AreEqual(4, engine.Index);

            baseDate = baseDate.AddMinutes(1);
            dateTime.DateToReturn = baseDate;
            timerSub.PerformTick();

            Assert.AreEqual(PomodoroPhase.Work, engine.Phase);
            Assert.AreEqual(workTime - 60, engine.Remaining);
            Assert.AreEqual(60, engine.DisplayValue);
            Assert.AreEqual(60, engine.Elapsed);
            Assert.AreEqual(4, engine.Index);

            baseDate = baseDate.AddMinutes(24);
            dateTime.DateToReturn = baseDate;
            timerSub.PerformTick();

            Assert.AreEqual(PomodoroPhase.WorkEnded, engine.Phase);
            Assert.AreEqual(0, engine.Remaining);
            Assert.AreEqual(workTime, engine.DisplayValue);
            Assert.AreEqual(workTime, engine.Elapsed);
            Assert.AreEqual(4, engine.Index);

            engine.Start();
            timerSub.PerformTick();
            Assert.AreEqual(PomodoroPhase.Break, engine.Phase);
            Assert.AreEqual(longBreakTime, engine.Remaining);
            Assert.AreEqual(0, engine.DisplayValue);
            Assert.AreEqual(0, engine.Elapsed);
            Assert.AreEqual(4, engine.Index);

            baseDate = baseDate.AddMinutes(1);
            dateTime.DateToReturn = baseDate;
            timerSub.PerformTick();

            Assert.AreEqual(PomodoroPhase.Break, engine.Phase);
            Assert.AreEqual(longBreakTime - 60, engine.Remaining);
            Assert.AreEqual(60, engine.DisplayValue);
            Assert.AreEqual(60, engine.Elapsed);
            Assert.AreEqual(4, engine.Index);

            baseDate = baseDate.AddMinutes(9);
            dateTime.DateToReturn = baseDate;
            timerSub.PerformTick();

            Assert.AreEqual(PomodoroPhase.BreakEnded, engine.Phase);
            Assert.AreEqual(0, engine.Remaining);
            Assert.AreEqual(longBreakTime, engine.DisplayValue);
            Assert.AreEqual(longBreakTime, engine.Elapsed);
            Assert.AreEqual(4, engine.Index);


            //----Fifth pomodoro (return to first
            Assert.AreEqual(PomodoroPhase.BreakEnded, engine.Phase);
            engine.Start();
            timerSub.PerformTick();
            Assert.AreEqual(PomodoroPhase.Work, engine.Phase);
            Assert.AreEqual(workTime, engine.Remaining);
            Assert.AreEqual(0, engine.DisplayValue);
            Assert.AreEqual(0, engine.Elapsed);
            Assert.AreEqual(1, engine.Index);

            baseDate = baseDate.AddMinutes(1);
            dateTime.DateToReturn = baseDate;
            timerSub.PerformTick();

            Assert.AreEqual(PomodoroPhase.Work, engine.Phase);
            Assert.AreEqual(workTime - 60, engine.Remaining);
            Assert.AreEqual(60, engine.DisplayValue);
            Assert.AreEqual(60, engine.Elapsed);
            Assert.AreEqual(1, engine.Index);

            baseDate = baseDate.AddMinutes(24);
            dateTime.DateToReturn = baseDate;
            timerSub.PerformTick();

            Assert.AreEqual(PomodoroPhase.WorkEnded, engine.Phase);
            Assert.AreEqual(0, engine.Remaining);
            Assert.AreEqual(workTime, engine.DisplayValue);
            Assert.AreEqual(workTime, engine.Elapsed);
            Assert.AreEqual(1, engine.Index);

            engine.Start();
            timerSub.PerformTick();
            Assert.AreEqual(PomodoroPhase.Break, engine.Phase);
            Assert.AreEqual(breakTime, engine.Remaining);
            Assert.AreEqual(0, engine.DisplayValue);
            Assert.AreEqual(0, engine.Elapsed);
            Assert.AreEqual(1, engine.Index);

            baseDate = baseDate.AddMinutes(1);
            dateTime.DateToReturn = baseDate;
            timerSub.PerformTick();

            Assert.AreEqual(PomodoroPhase.Break, engine.Phase);
            Assert.AreEqual(breakTime - 60, engine.Remaining);
            Assert.AreEqual(60, engine.DisplayValue);
            Assert.AreEqual(60, engine.Elapsed);
            Assert.AreEqual(1, engine.Index);

            baseDate = baseDate.AddMinutes(4);
            dateTime.DateToReturn = baseDate;
            timerSub.PerformTick();

            Assert.AreEqual(PomodoroPhase.BreakEnded, engine.Phase);
            Assert.AreEqual(0, engine.Remaining);
            Assert.AreEqual(breakTime, engine.DisplayValue);
            Assert.AreEqual(breakTime, engine.Elapsed);
            Assert.AreEqual(1, engine.Index);
        }

        [TestMethod]
        public void SimpleWorkflowThroughAllPomodoros_CountBackwards()
        {
            var timerSub = new TimerMock();
            var engineSettings = new PomodoroEngineSettings(Substitute.For<ISettings>());
            var dateTime = new DateMock();
            var globalSettings = Substitute.For<ISettings>();
            var threading = Substitute.For<IThreading>();
            var repository = Substitute.For<IPomodoroRepository>();

            var baseDate = new DateTime(2017, 6, 1, 12, 0, 0);
            var workTime = 25 * 60;
            var breakTime = 5 * 60;
            var longBreakTime = 10 * 60;

            var profileName = "test";
            var profile = new PomodoroProfile
            {
                AutoStartBreak = false,
                BreakTime = breakTime,
                WorkTime = workTime,
                LongBreakTime = longBreakTime
            };

            var profiles = new Dictionary<string, PomodoroProfile> { [profileName] = profile };

            engineSettings.Profiles.Returns(profiles);
            engineSettings.ActiveProfile.Returns(profileName);

            engineSettings.CountBackwards.Returns(true);

            dateTime.DateToReturn = baseDate;

            var engine = new PomodoroEngine(engineSettings, timerSub, dateTime, threading, globalSettings, repository);

            //----First pomodoro
            Assert.AreEqual(PomodoroPhase.NotStarted, engine.Phase);
            engine.Start();
            timerSub.PerformTick();
            Assert.AreEqual(PomodoroPhase.Work, engine.Phase);
            Assert.AreEqual(workTime, engine.Remaining);
            Assert.AreEqual(workTime, engine.DisplayValue);
            Assert.AreEqual(0, engine.Elapsed);
            Assert.AreEqual(1, engine.Index);

            baseDate = baseDate.AddMinutes(1);
            dateTime.DateToReturn = baseDate;
            timerSub.PerformTick();

            Assert.AreEqual(PomodoroPhase.Work, engine.Phase);
            Assert.AreEqual(workTime - 60, engine.Remaining);
            Assert.AreEqual(workTime - 60, engine.DisplayValue);
            Assert.AreEqual(60, engine.Elapsed);
            Assert.AreEqual(1, engine.Index);

            baseDate = baseDate.AddMinutes(24);
            dateTime.DateToReturn = baseDate;
            timerSub.PerformTick();

            Assert.AreEqual(PomodoroPhase.WorkEnded, engine.Phase);
            Assert.AreEqual(0, engine.Remaining);
            Assert.AreEqual(0, engine.DisplayValue);
            Assert.AreEqual(workTime, engine.Elapsed);
            Assert.AreEqual(1, engine.Index);

            engine.Start();
            timerSub.PerformTick();
            Assert.AreEqual(PomodoroPhase.Break, engine.Phase);
            Assert.AreEqual(breakTime, engine.Remaining);
            Assert.AreEqual(breakTime, engine.DisplayValue);
            Assert.AreEqual(0, engine.Elapsed);
            Assert.AreEqual(1, engine.Index);

            baseDate = baseDate.AddMinutes(1);
            dateTime.DateToReturn = baseDate;
            timerSub.PerformTick();

            Assert.AreEqual(PomodoroPhase.Break, engine.Phase);
            Assert.AreEqual(breakTime - 60, engine.Remaining);
            Assert.AreEqual(breakTime - 60, engine.DisplayValue);
            Assert.AreEqual(60, engine.Elapsed);
            Assert.AreEqual(1, engine.Index);

            baseDate = baseDate.AddMinutes(4);
            dateTime.DateToReturn = baseDate;
            timerSub.PerformTick();

            Assert.AreEqual(PomodoroPhase.BreakEnded, engine.Phase);
            Assert.AreEqual(0, engine.Remaining);
            Assert.AreEqual(0, engine.DisplayValue);
            Assert.AreEqual(breakTime, engine.Elapsed);
            Assert.AreEqual(1, engine.Index);

            //----Second pomodoro
            Assert.AreEqual(PomodoroPhase.BreakEnded, engine.Phase);
            engine.Start();
            timerSub.PerformTick();
            Assert.AreEqual(PomodoroPhase.Work, engine.Phase);
            Assert.AreEqual(workTime, engine.Remaining);
            Assert.AreEqual(workTime, engine.DisplayValue);
            Assert.AreEqual(0, engine.Elapsed);
            Assert.AreEqual(2, engine.Index);

            baseDate = baseDate.AddMinutes(1);
            dateTime.DateToReturn = baseDate;
            timerSub.PerformTick();

            Assert.AreEqual(PomodoroPhase.Work, engine.Phase);
            Assert.AreEqual(workTime - 60, engine.Remaining);
            Assert.AreEqual(workTime - 60, engine.DisplayValue);
            Assert.AreEqual(60, engine.Elapsed);
            Assert.AreEqual(2, engine.Index);

            baseDate = baseDate.AddMinutes(24);
            dateTime.DateToReturn = baseDate;
            timerSub.PerformTick();

            Assert.AreEqual(PomodoroPhase.WorkEnded, engine.Phase);
            Assert.AreEqual(0, engine.Remaining);
            Assert.AreEqual(0, engine.DisplayValue);
            Assert.AreEqual(workTime, engine.Elapsed);
            Assert.AreEqual(2, engine.Index);

            engine.Start();
            timerSub.PerformTick();
            Assert.AreEqual(PomodoroPhase.Break, engine.Phase);
            Assert.AreEqual(breakTime, engine.Remaining);
            Assert.AreEqual(breakTime, engine.DisplayValue);
            Assert.AreEqual(0, engine.Elapsed);
            Assert.AreEqual(2, engine.Index);

            baseDate = baseDate.AddMinutes(1);
            dateTime.DateToReturn = baseDate;
            timerSub.PerformTick();

            Assert.AreEqual(PomodoroPhase.Break, engine.Phase);
            Assert.AreEqual(breakTime - 60, engine.Remaining);
            Assert.AreEqual(breakTime - 60, engine.DisplayValue);
            Assert.AreEqual(60, engine.Elapsed);
            Assert.AreEqual(2, engine.Index);

            baseDate = baseDate.AddMinutes(4);
            dateTime.DateToReturn = baseDate;
            timerSub.PerformTick();

            Assert.AreEqual(PomodoroPhase.BreakEnded, engine.Phase);
            Assert.AreEqual(0, engine.Remaining);
            Assert.AreEqual(0, engine.DisplayValue);
            Assert.AreEqual(breakTime, engine.Elapsed);
            Assert.AreEqual(2, engine.Index);

            //----Third pomodoro
            Assert.AreEqual(PomodoroPhase.BreakEnded, engine.Phase);
            engine.Start();
            timerSub.PerformTick();
            Assert.AreEqual(PomodoroPhase.Work, engine.Phase);
            Assert.AreEqual(workTime, engine.Remaining);
            Assert.AreEqual(workTime, engine.DisplayValue);
            Assert.AreEqual(0, engine.Elapsed);
            Assert.AreEqual(3, engine.Index);

            baseDate = baseDate.AddMinutes(1);
            dateTime.DateToReturn = baseDate;
            timerSub.PerformTick();

            Assert.AreEqual(PomodoroPhase.Work, engine.Phase);
            Assert.AreEqual(workTime - 60, engine.Remaining);
            Assert.AreEqual(workTime - 60, engine.DisplayValue);
            Assert.AreEqual(60, engine.Elapsed);
            Assert.AreEqual(3, engine.Index);

            baseDate = baseDate.AddMinutes(24);
            dateTime.DateToReturn = baseDate;
            timerSub.PerformTick();

            Assert.AreEqual(PomodoroPhase.WorkEnded, engine.Phase);
            Assert.AreEqual(0, engine.Remaining);
            Assert.AreEqual(0, engine.DisplayValue);
            Assert.AreEqual(workTime, engine.Elapsed);
            Assert.AreEqual(3, engine.Index);

            engine.Start();
            timerSub.PerformTick();
            Assert.AreEqual(PomodoroPhase.Break, engine.Phase);
            Assert.AreEqual(breakTime, engine.Remaining);
            Assert.AreEqual(breakTime, engine.DisplayValue);
            Assert.AreEqual(0, engine.Elapsed);
            Assert.AreEqual(3, engine.Index);

            baseDate = baseDate.AddMinutes(1);
            dateTime.DateToReturn = baseDate;
            timerSub.PerformTick();

            Assert.AreEqual(PomodoroPhase.Break, engine.Phase);
            Assert.AreEqual(breakTime - 60, engine.Remaining);
            Assert.AreEqual(breakTime - 60, engine.DisplayValue);
            Assert.AreEqual(60, engine.Elapsed);
            Assert.AreEqual(3, engine.Index);

            baseDate = baseDate.AddMinutes(4);
            dateTime.DateToReturn = baseDate;
            timerSub.PerformTick();

            Assert.AreEqual(PomodoroPhase.BreakEnded, engine.Phase);
            Assert.AreEqual(0, engine.Remaining);
            Assert.AreEqual(0, engine.DisplayValue);
            Assert.AreEqual(breakTime, engine.Elapsed);
            Assert.AreEqual(3, engine.Index);

            //----Fourth pomodoro (long break)
            Assert.AreEqual(PomodoroPhase.BreakEnded, engine.Phase);
            engine.Start();
            timerSub.PerformTick();
            Assert.AreEqual(PomodoroPhase.Work, engine.Phase);
            Assert.AreEqual(workTime, engine.Remaining);
            Assert.AreEqual(workTime, engine.DisplayValue);
            Assert.AreEqual(0, engine.Elapsed);
            Assert.AreEqual(4, engine.Index);

            baseDate = baseDate.AddMinutes(1);
            dateTime.DateToReturn = baseDate;
            timerSub.PerformTick();

            Assert.AreEqual(PomodoroPhase.Work, engine.Phase);
            Assert.AreEqual(workTime - 60, engine.Remaining);
            Assert.AreEqual(workTime - 60, engine.DisplayValue);
            Assert.AreEqual(60, engine.Elapsed);
            Assert.AreEqual(4, engine.Index);

            baseDate = baseDate.AddMinutes(24);
            dateTime.DateToReturn = baseDate;
            timerSub.PerformTick();

            Assert.AreEqual(PomodoroPhase.WorkEnded, engine.Phase);
            Assert.AreEqual(0, engine.Remaining);
            Assert.AreEqual(0, engine.DisplayValue);
            Assert.AreEqual(workTime, engine.Elapsed);
            Assert.AreEqual(4, engine.Index);

            engine.Start();
            timerSub.PerformTick();
            Assert.AreEqual(PomodoroPhase.Break, engine.Phase);
            Assert.AreEqual(longBreakTime, engine.Remaining);
            Assert.AreEqual(longBreakTime, engine.DisplayValue);
            Assert.AreEqual(0, engine.Elapsed);
            Assert.AreEqual(4, engine.Index);

            baseDate = baseDate.AddMinutes(1);
            dateTime.DateToReturn = baseDate;
            timerSub.PerformTick();

            Assert.AreEqual(PomodoroPhase.Break, engine.Phase);
            Assert.AreEqual(longBreakTime - 60, engine.Remaining);
            Assert.AreEqual(longBreakTime - 60, engine.DisplayValue);
            Assert.AreEqual(60, engine.Elapsed);
            Assert.AreEqual(4, engine.Index);

            baseDate = baseDate.AddMinutes(9);
            dateTime.DateToReturn = baseDate;
            timerSub.PerformTick();

            Assert.AreEqual(PomodoroPhase.BreakEnded, engine.Phase);
            Assert.AreEqual(0, engine.Remaining);
            Assert.AreEqual(0, engine.DisplayValue);
            Assert.AreEqual(longBreakTime, engine.Elapsed);
            Assert.AreEqual(4, engine.Index);


            //----Fifth pomodoro (return to first
            Assert.AreEqual(PomodoroPhase.BreakEnded, engine.Phase);
            engine.Start();
            timerSub.PerformTick();
            Assert.AreEqual(PomodoroPhase.Work, engine.Phase);
            Assert.AreEqual(workTime, engine.Remaining);
            Assert.AreEqual(workTime, engine.DisplayValue);
            Assert.AreEqual(0, engine.Elapsed);
            Assert.AreEqual(1, engine.Index);

            baseDate = baseDate.AddMinutes(1);
            dateTime.DateToReturn = baseDate;
            timerSub.PerformTick();

            Assert.AreEqual(PomodoroPhase.Work, engine.Phase);
            Assert.AreEqual(workTime - 60, engine.Remaining);
            Assert.AreEqual(workTime - 60, engine.DisplayValue);
            Assert.AreEqual(60, engine.Elapsed);
            Assert.AreEqual(1, engine.Index);

            baseDate = baseDate.AddMinutes(24);
            dateTime.DateToReturn = baseDate;
            timerSub.PerformTick();

            Assert.AreEqual(PomodoroPhase.WorkEnded, engine.Phase);
            Assert.AreEqual(0, engine.Remaining);
            Assert.AreEqual(0, engine.DisplayValue);
            Assert.AreEqual(workTime, engine.Elapsed);
            Assert.AreEqual(1, engine.Index);

            engine.Start();
            timerSub.PerformTick();
            Assert.AreEqual(PomodoroPhase.Break, engine.Phase);
            Assert.AreEqual(breakTime, engine.Remaining);
            Assert.AreEqual(breakTime, engine.DisplayValue);
            Assert.AreEqual(0, engine.Elapsed);
            Assert.AreEqual(1, engine.Index);

            baseDate = baseDate.AddMinutes(1);
            dateTime.DateToReturn = baseDate;
            timerSub.PerformTick();

            Assert.AreEqual(PomodoroPhase.Break, engine.Phase);
            Assert.AreEqual(breakTime - 60, engine.Remaining);
            Assert.AreEqual(breakTime - 60, engine.DisplayValue);
            Assert.AreEqual(60, engine.Elapsed);
            Assert.AreEqual(1, engine.Index);

            baseDate = baseDate.AddMinutes(4);
            dateTime.DateToReturn = baseDate;
            timerSub.PerformTick();

            Assert.AreEqual(PomodoroPhase.BreakEnded, engine.Phase);
            Assert.AreEqual(0, engine.Remaining);
            Assert.AreEqual(0, engine.DisplayValue);
            Assert.AreEqual(breakTime, engine.Elapsed);
            Assert.AreEqual(1, engine.Index);
        }

        [TestMethod]
        public void SimpleWorkflowThroughAllPomodoros_AutoStartBreak()
        {
            var timerSub = new TimerMock();
            var engineSettings = new PomodoroEngineSettings(Substitute.For<ISettings>());
            var globalSettings = Substitute.For<ISettings>();
            var dateTime = new DateMock();
            var threading = Substitute.For<IThreading>();
            var repository = Substitute.For<IPomodoroRepository>();

            var baseDate = new DateTime(2017, 6, 1, 12, 0, 0);
            var workTime = 25 * 60;
            var breakTime = 5 * 60;
            var longBreakTime = 10 * 60;


            var profileName = "test";
            var profile = new PomodoroProfile
            {
                AutoStartBreak = true,
                BreakTime = breakTime,
                WorkTime = workTime,
                LongBreakTime = longBreakTime
            };

            var profiles = new Dictionary<string, PomodoroProfile> { [profileName] = profile };

            engineSettings.Profiles.Returns(profiles);
            engineSettings.ActiveProfile.Returns(profileName);

            engineSettings.CountBackwards.Returns(false);

            dateTime.DateToReturn = baseDate;

            var engine = new PomodoroEngine(engineSettings, timerSub, dateTime, threading, globalSettings, repository);

            //----First pomodoro
            Assert.AreEqual(PomodoroPhase.NotStarted, engine.Phase);
            engine.Start();
            timerSub.PerformTick();
            Assert.AreEqual(PomodoroPhase.Work, engine.Phase);
            Assert.AreEqual(workTime, engine.Remaining);
            Assert.AreEqual(0, engine.DisplayValue);
            Assert.AreEqual(0, engine.Elapsed);
            Assert.AreEqual(1, engine.Index);

            baseDate = baseDate.AddMinutes(1);
            dateTime.DateToReturn = baseDate;
            timerSub.PerformTick();

            Assert.AreEqual(PomodoroPhase.Work, engine.Phase);
            Assert.AreEqual(workTime - 60, engine.Remaining);
            Assert.AreEqual(60, engine.DisplayValue);
            Assert.AreEqual(60, engine.Elapsed);
            Assert.AreEqual(1, engine.Index);

            baseDate = baseDate.AddMinutes(24);
            dateTime.DateToReturn = baseDate;
            timerSub.PerformTick();

            Assert.AreEqual(PomodoroPhase.WorkEnded, engine.Phase);
            Assert.AreEqual(0, engine.Remaining);
            Assert.AreEqual(workTime, engine.DisplayValue);
            Assert.AreEqual(workTime, engine.Elapsed);
            Assert.AreEqual(1, engine.Index);

            timerSub.PerformTick();
            Timeout.WaitPhaseChange(engine, PomodoroPhase.Break).Wait();

            Assert.AreEqual(PomodoroPhase.Break, engine.Phase);
            Assert.AreEqual(breakTime, engine.Remaining);
            Assert.AreEqual(0, engine.DisplayValue);
            Assert.AreEqual(0, engine.Elapsed);
            Assert.AreEqual(1, engine.Index);

            baseDate = baseDate.AddMinutes(1);
            dateTime.DateToReturn = baseDate;
            timerSub.PerformTick();

            Assert.AreEqual(PomodoroPhase.Break, engine.Phase);
            Assert.AreEqual(breakTime - 60, engine.Remaining);
            Assert.AreEqual(60, engine.DisplayValue);
            Assert.AreEqual(60, engine.Elapsed);
            Assert.AreEqual(1, engine.Index);

            baseDate = baseDate.AddMinutes(4);
            dateTime.DateToReturn = baseDate;
            timerSub.PerformTick();

            Assert.AreEqual(PomodoroPhase.BreakEnded, engine.Phase);
            Assert.AreEqual(0, engine.Remaining);
            Assert.AreEqual(breakTime, engine.DisplayValue);
            Assert.AreEqual(breakTime, engine.Elapsed);
            Assert.AreEqual(1, engine.Index);

            //----Second pomodoro
            Assert.AreEqual(PomodoroPhase.BreakEnded, engine.Phase);
            engine.Start();
            timerSub.PerformTick();
            Assert.AreEqual(PomodoroPhase.Work, engine.Phase);
            Assert.AreEqual(workTime, engine.Remaining);
            Assert.AreEqual(0, engine.DisplayValue);
            Assert.AreEqual(0, engine.Elapsed);
            Assert.AreEqual(2, engine.Index);

            baseDate = baseDate.AddMinutes(1);
            dateTime.DateToReturn = baseDate;
            timerSub.PerformTick();

            Assert.AreEqual(PomodoroPhase.Work, engine.Phase);
            Assert.AreEqual(workTime - 60, engine.Remaining);
            Assert.AreEqual(60, engine.DisplayValue);
            Assert.AreEqual(60, engine.Elapsed);
            Assert.AreEqual(2, engine.Index);

            baseDate = baseDate.AddMinutes(24);
            dateTime.DateToReturn = baseDate;
            timerSub.PerformTick();

            Assert.AreEqual(PomodoroPhase.WorkEnded, engine.Phase);
            Assert.AreEqual(0, engine.Remaining);
            Assert.AreEqual(workTime, engine.DisplayValue);
            Assert.AreEqual(workTime, engine.Elapsed);
            Assert.AreEqual(2, engine.Index);

            timerSub.PerformTick();
            Timeout.WaitPhaseChange(engine, PomodoroPhase.Break).Wait();
            Assert.AreEqual(PomodoroPhase.Break, engine.Phase);
            Assert.AreEqual(breakTime, engine.Remaining);
            Assert.AreEqual(0, engine.DisplayValue);
            Assert.AreEqual(0, engine.Elapsed);
            Assert.AreEqual(2, engine.Index);

            baseDate = baseDate.AddMinutes(1);
            dateTime.DateToReturn = baseDate;
            timerSub.PerformTick();

            Assert.AreEqual(PomodoroPhase.Break, engine.Phase);
            Assert.AreEqual(breakTime - 60, engine.Remaining);
            Assert.AreEqual(60, engine.DisplayValue);
            Assert.AreEqual(60, engine.Elapsed);
            Assert.AreEqual(2, engine.Index);

            baseDate = baseDate.AddMinutes(4);
            dateTime.DateToReturn = baseDate;
            timerSub.PerformTick();

            Assert.AreEqual(PomodoroPhase.BreakEnded, engine.Phase);
            Assert.AreEqual(0, engine.Remaining);
            Assert.AreEqual(breakTime, engine.DisplayValue);
            Assert.AreEqual(breakTime, engine.Elapsed);
            Assert.AreEqual(2, engine.Index);

            //----Third pomodoro
            Assert.AreEqual(PomodoroPhase.BreakEnded, engine.Phase);
            engine.Start();
            timerSub.PerformTick();
            Assert.AreEqual(PomodoroPhase.Work, engine.Phase);
            Assert.AreEqual(workTime, engine.Remaining);
            Assert.AreEqual(0, engine.DisplayValue);
            Assert.AreEqual(0, engine.Elapsed);
            Assert.AreEqual(3, engine.Index);

            baseDate = baseDate.AddMinutes(1);
            dateTime.DateToReturn = baseDate;
            timerSub.PerformTick();

            Assert.AreEqual(PomodoroPhase.Work, engine.Phase);
            Assert.AreEqual(workTime - 60, engine.Remaining);
            Assert.AreEqual(60, engine.DisplayValue);
            Assert.AreEqual(60, engine.Elapsed);
            Assert.AreEqual(3, engine.Index);

            baseDate = baseDate.AddMinutes(24);
            dateTime.DateToReturn = baseDate;
            timerSub.PerformTick();

            Assert.AreEqual(PomodoroPhase.WorkEnded, engine.Phase);
            Assert.AreEqual(0, engine.Remaining);
            Assert.AreEqual(workTime, engine.DisplayValue);
            Assert.AreEqual(workTime, engine.Elapsed);
            Assert.AreEqual(3, engine.Index);

            timerSub.PerformTick();
            Timeout.WaitPhaseChange(engine, PomodoroPhase.Break).Wait();

            Assert.AreEqual(PomodoroPhase.Break, engine.Phase);
            Assert.AreEqual(breakTime, engine.Remaining);
            Assert.AreEqual(0, engine.DisplayValue);
            Assert.AreEqual(0, engine.Elapsed);
            Assert.AreEqual(3, engine.Index);

            baseDate = baseDate.AddMinutes(1);
            dateTime.DateToReturn = baseDate;
            timerSub.PerformTick();

            Assert.AreEqual(PomodoroPhase.Break, engine.Phase);
            Assert.AreEqual(breakTime - 60, engine.Remaining);
            Assert.AreEqual(60, engine.DisplayValue);
            Assert.AreEqual(60, engine.Elapsed);
            Assert.AreEqual(3, engine.Index);

            baseDate = baseDate.AddMinutes(4);
            dateTime.DateToReturn = baseDate;
            timerSub.PerformTick();

            Assert.AreEqual(PomodoroPhase.BreakEnded, engine.Phase);
            Assert.AreEqual(0, engine.Remaining);
            Assert.AreEqual(breakTime, engine.DisplayValue);
            Assert.AreEqual(breakTime, engine.Elapsed);
            Assert.AreEqual(3, engine.Index);

            //----Fourth pomodoro (long break)
            Assert.AreEqual(PomodoroPhase.BreakEnded, engine.Phase);
            engine.Start();
            timerSub.PerformTick();
            Assert.AreEqual(PomodoroPhase.Work, engine.Phase);
            Assert.AreEqual(workTime, engine.Remaining);
            Assert.AreEqual(0, engine.DisplayValue);
            Assert.AreEqual(0, engine.Elapsed);
            Assert.AreEqual(4, engine.Index);

            baseDate = baseDate.AddMinutes(1);
            dateTime.DateToReturn = baseDate;
            timerSub.PerformTick();

            Assert.AreEqual(PomodoroPhase.Work, engine.Phase);
            Assert.AreEqual(workTime - 60, engine.Remaining);
            Assert.AreEqual(60, engine.DisplayValue);
            Assert.AreEqual(60, engine.Elapsed);
            Assert.AreEqual(4, engine.Index);

            baseDate = baseDate.AddMinutes(24);
            dateTime.DateToReturn = baseDate;
            timerSub.PerformTick();

            Assert.AreEqual(PomodoroPhase.WorkEnded, engine.Phase);
            Assert.AreEqual(0, engine.Remaining);
            Assert.AreEqual(workTime, engine.DisplayValue);
            Assert.AreEqual(workTime, engine.Elapsed);
            Assert.AreEqual(4, engine.Index);

            timerSub.PerformTick();
            Timeout.WaitPhaseChange(engine, PomodoroPhase.Break).Wait();

            Assert.AreEqual(PomodoroPhase.Break, engine.Phase);
            Assert.AreEqual(longBreakTime, engine.Remaining);
            Assert.AreEqual(0, engine.DisplayValue);
            Assert.AreEqual(0, engine.Elapsed);
            Assert.AreEqual(4, engine.Index);

            baseDate = baseDate.AddMinutes(1);
            dateTime.DateToReturn = baseDate;
            timerSub.PerformTick();

            Assert.AreEqual(PomodoroPhase.Break, engine.Phase);
            Assert.AreEqual(longBreakTime - 60, engine.Remaining);
            Assert.AreEqual(60, engine.DisplayValue);
            Assert.AreEqual(60, engine.Elapsed);
            Assert.AreEqual(4, engine.Index);

            baseDate = baseDate.AddMinutes(9);
            dateTime.DateToReturn = baseDate;
            timerSub.PerformTick();

            Assert.AreEqual(PomodoroPhase.BreakEnded, engine.Phase);
            Assert.AreEqual(0, engine.Remaining);
            Assert.AreEqual(longBreakTime, engine.DisplayValue);
            Assert.AreEqual(longBreakTime, engine.Elapsed);
            Assert.AreEqual(4, engine.Index);


            //----Fifth pomodoro (return to first
            Assert.AreEqual(PomodoroPhase.BreakEnded, engine.Phase);
            engine.Start();
            timerSub.PerformTick();
            Assert.AreEqual(PomodoroPhase.Work, engine.Phase);
            Assert.AreEqual(workTime, engine.Remaining);
            Assert.AreEqual(0, engine.DisplayValue);
            Assert.AreEqual(0, engine.Elapsed);
            Assert.AreEqual(1, engine.Index);

            baseDate = baseDate.AddMinutes(1);
            dateTime.DateToReturn = baseDate;
            timerSub.PerformTick();

            Assert.AreEqual(PomodoroPhase.Work, engine.Phase);
            Assert.AreEqual(workTime - 60, engine.Remaining);
            Assert.AreEqual(60, engine.DisplayValue);
            Assert.AreEqual(60, engine.Elapsed);
            Assert.AreEqual(1, engine.Index);

            baseDate = baseDate.AddMinutes(24);
            dateTime.DateToReturn = baseDate;
            timerSub.PerformTick();

            Assert.AreEqual(PomodoroPhase.WorkEnded, engine.Phase);
            Assert.AreEqual(0, engine.Remaining);
            Assert.AreEqual(workTime, engine.DisplayValue);
            Assert.AreEqual(workTime, engine.Elapsed);
            Assert.AreEqual(1, engine.Index);

            timerSub.PerformTick();
            Timeout.WaitPhaseChange(engine, PomodoroPhase.Break).Wait();

            Assert.AreEqual(PomodoroPhase.Break, engine.Phase);
            Assert.AreEqual(breakTime, engine.Remaining);
            Assert.AreEqual(0, engine.DisplayValue);
            Assert.AreEqual(0, engine.Elapsed);
            Assert.AreEqual(1, engine.Index);

            baseDate = baseDate.AddMinutes(1);
            dateTime.DateToReturn = baseDate;
            timerSub.PerformTick();

            Assert.AreEqual(PomodoroPhase.Break, engine.Phase);
            Assert.AreEqual(breakTime - 60, engine.Remaining);
            Assert.AreEqual(60, engine.DisplayValue);
            Assert.AreEqual(60, engine.Elapsed);
            Assert.AreEqual(1, engine.Index);

            baseDate = baseDate.AddMinutes(4);
            dateTime.DateToReturn = baseDate;
            timerSub.PerformTick();

            Assert.AreEqual(PomodoroPhase.BreakEnded, engine.Phase);
            Assert.AreEqual(0, engine.Remaining);
            Assert.AreEqual(breakTime, engine.DisplayValue);
            Assert.AreEqual(breakTime, engine.Elapsed);
            Assert.AreEqual(1, engine.Index);
        }

        [TestMethod]
        public void SimpleWorkflowThroughAllPomodoros_AutoStartBreak_ManuallyStarting()
        {
            var timerSub = new TimerMock();
            var engineSettings = new PomodoroEngineSettings(Substitute.For<ISettings>());
            var globalSettings = Substitute.For<ISettings>();
            var dateTime = new DateMock();
            var threading = Substitute.For<IThreading>();
            var repository = Substitute.For<IPomodoroRepository>();

            var baseDate = new DateTime(2017, 6, 1, 12, 0, 0);
            var workTime = 25 * 60;
            var breakTime = 5 * 60;
            var longBreakTime = 10 * 60;

            var profileName = "test";
            var profile = new PomodoroProfile
            {
                AutoStartBreak = true,
                BreakTime = breakTime,
                WorkTime = workTime,
                LongBreakTime = longBreakTime
            };

            var profiles = new Dictionary<string, PomodoroProfile> { [profileName] = profile };

            engineSettings.Profiles.Returns(profiles);
            engineSettings.ActiveProfile.Returns(profileName);

            engineSettings.CountBackwards.Returns(false);

            dateTime.DateToReturn = baseDate;

            var engine = new PomodoroEngine(engineSettings, timerSub, dateTime, threading, globalSettings, repository);

            //----First pomodoro
            Assert.AreEqual(PomodoroPhase.NotStarted, engine.Phase);
            engine.Start();
            timerSub.PerformTick();
            Assert.AreEqual(PomodoroPhase.Work, engine.Phase);
            Assert.AreEqual(workTime, engine.Remaining);
            Assert.AreEqual(0, engine.DisplayValue);
            Assert.AreEqual(0, engine.Elapsed);
            Assert.AreEqual(1, engine.Index);

            baseDate = baseDate.AddMinutes(1);
            dateTime.DateToReturn = baseDate;
            timerSub.PerformTick();

            Assert.AreEqual(PomodoroPhase.Work, engine.Phase);
            Assert.AreEqual(workTime - 60, engine.Remaining);
            Assert.AreEqual(60, engine.DisplayValue);
            Assert.AreEqual(60, engine.Elapsed);
            Assert.AreEqual(1, engine.Index);

            baseDate = baseDate.AddMinutes(24);
            dateTime.DateToReturn = baseDate;
            timerSub.PerformTick();

            Assert.AreEqual(PomodoroPhase.WorkEnded, engine.Phase);
            Assert.AreEqual(0, engine.Remaining);
            Assert.AreEqual(workTime, engine.DisplayValue);
            Assert.AreEqual(workTime, engine.Elapsed);
            Assert.AreEqual(1, engine.Index);

            timerSub.PerformTick();
            engine.Start();
            timerSub.PerformTick();

            Assert.AreEqual(PomodoroPhase.Break, engine.Phase);
            Assert.AreEqual(breakTime, engine.Remaining);
            Assert.AreEqual(0, engine.DisplayValue);
            Assert.AreEqual(0, engine.Elapsed);
            Assert.AreEqual(1, engine.Index);

            baseDate = baseDate.AddMinutes(1);
            dateTime.DateToReturn = baseDate;
            timerSub.PerformTick();

            Assert.AreEqual(PomodoroPhase.Break, engine.Phase);
            Assert.AreEqual(breakTime - 60, engine.Remaining);
            Assert.AreEqual(60, engine.DisplayValue);
            Assert.AreEqual(60, engine.Elapsed);
            Assert.AreEqual(1, engine.Index);

            baseDate = baseDate.AddMinutes(4);
            dateTime.DateToReturn = baseDate;
            timerSub.PerformTick();

            Assert.AreEqual(PomodoroPhase.BreakEnded, engine.Phase);
            Assert.AreEqual(0, engine.Remaining);
            Assert.AreEqual(breakTime, engine.DisplayValue);
            Assert.AreEqual(breakTime, engine.Elapsed);
            Assert.AreEqual(1, engine.Index);

            //----Second pomodoro
            Assert.AreEqual(PomodoroPhase.BreakEnded, engine.Phase);
            engine.Start();
            timerSub.PerformTick();
            Assert.AreEqual(PomodoroPhase.Work, engine.Phase);
            Assert.AreEqual(workTime, engine.Remaining);
            Assert.AreEqual(0, engine.DisplayValue);
            Assert.AreEqual(0, engine.Elapsed);
            Assert.AreEqual(2, engine.Index);

            baseDate = baseDate.AddMinutes(1);
            dateTime.DateToReturn = baseDate;
            timerSub.PerformTick();

            Assert.AreEqual(PomodoroPhase.Work, engine.Phase);
            Assert.AreEqual(workTime - 60, engine.Remaining);
            Assert.AreEqual(60, engine.DisplayValue);
            Assert.AreEqual(60, engine.Elapsed);
            Assert.AreEqual(2, engine.Index);

            baseDate = baseDate.AddMinutes(24);
            dateTime.DateToReturn = baseDate;
            timerSub.PerformTick();

            Assert.AreEqual(PomodoroPhase.WorkEnded, engine.Phase);
            Assert.AreEqual(0, engine.Remaining);
            Assert.AreEqual(workTime, engine.DisplayValue);
            Assert.AreEqual(workTime, engine.Elapsed);
            Assert.AreEqual(2, engine.Index);

            timerSub.PerformTick();
            engine.Start();
            timerSub.PerformTick();

            Assert.AreEqual(PomodoroPhase.Break, engine.Phase);
            Assert.AreEqual(breakTime, engine.Remaining);
            Assert.AreEqual(0, engine.DisplayValue);
            Assert.AreEqual(0, engine.Elapsed);
            Assert.AreEqual(2, engine.Index);

            baseDate = baseDate.AddMinutes(1);
            dateTime.DateToReturn = baseDate;
            timerSub.PerformTick();

            Assert.AreEqual(PomodoroPhase.Break, engine.Phase);
            Assert.AreEqual(breakTime - 60, engine.Remaining);
            Assert.AreEqual(60, engine.DisplayValue);
            Assert.AreEqual(60, engine.Elapsed);
            Assert.AreEqual(2, engine.Index);

            baseDate = baseDate.AddMinutes(4);
            dateTime.DateToReturn = baseDate;
            timerSub.PerformTick();

            Assert.AreEqual(PomodoroPhase.BreakEnded, engine.Phase);
            Assert.AreEqual(0, engine.Remaining);
            Assert.AreEqual(breakTime, engine.DisplayValue);
            Assert.AreEqual(breakTime, engine.Elapsed);
            Assert.AreEqual(2, engine.Index);

        }

        [TestMethod]
        public void SimpleWorkflowThroughAllPomodoros_PauseAndStop()
        {
            var timerSub = new TimerMock();
            var engineSettings = new PomodoroEngineSettings(Substitute.For<ISettings>());
            var globalSettings = Substitute.For<ISettings>();
            var dateTime = new DateMock();
            var threading = Substitute.For<IThreading>();
            var repository = Substitute.For<IPomodoroRepository>();

            var baseDate = new DateTime(2017, 6, 1, 12, 0, 0);
            var workTime = 25 * 60;
            var breakTime = 5 * 60;
            var longBreakTime = 10 * 60;

            var profileName = "test";
            var profile = new PomodoroProfile
            {
                AutoStartBreak = false,
                BreakTime = breakTime,
                WorkTime = workTime,
                LongBreakTime = longBreakTime
            };

            var profiles = new Dictionary<string, PomodoroProfile> { [profileName] = profile };

            engineSettings.Profiles.Returns(profiles);
            engineSettings.ActiveProfile.Returns(profileName);

            engineSettings.CountBackwards.Returns(false);

            dateTime.DateToReturn = baseDate;

            var engine = new PomodoroEngine(engineSettings, timerSub, dateTime, threading, globalSettings, repository);

            //----First pomodoro
            Assert.AreEqual(PomodoroPhase.NotStarted, engine.Phase);
            engine.Start();
            timerSub.PerformTick();
            Assert.AreEqual(PomodoroPhase.Work, engine.Phase);
            Assert.AreEqual(workTime, engine.Remaining);
            Assert.AreEqual(0, engine.DisplayValue);
            Assert.AreEqual(0, engine.Elapsed);
            Assert.AreEqual(1, engine.Index);

            baseDate = baseDate.AddMinutes(1);
            dateTime.DateToReturn = baseDate;
            timerSub.PerformTick();

            Assert.AreEqual(PomodoroPhase.Work, engine.Phase);
            Assert.AreEqual(workTime - 60, engine.Remaining);
            Assert.AreEqual(60, engine.DisplayValue);
            Assert.AreEqual(60, engine.Elapsed);
            Assert.AreEqual(1, engine.Index);

            engine.Pause();

            Assert.AreEqual(PomodoroPhase.Pause, engine.Phase);
            Assert.AreEqual(workTime - 60, engine.Remaining);
            Assert.AreEqual(60, engine.DisplayValue);
            Assert.AreEqual(60, engine.Elapsed);
            Assert.AreEqual(1, engine.Index);

            engine.Start();

            baseDate = baseDate.AddMinutes(2);
            dateTime.DateToReturn = baseDate;
            timerSub.PerformTick();

            Assert.AreEqual(PomodoroPhase.Work, engine.Phase);
            Assert.AreEqual(workTime - (3 * 60), engine.Remaining);
            Assert.AreEqual(3 * 60, engine.DisplayValue);
            Assert.AreEqual(3 * 60, engine.Elapsed);
            Assert.AreEqual(1, engine.Index);

            baseDate = baseDate.AddMinutes(23);
            dateTime.DateToReturn = baseDate;
            timerSub.PerformTick();

            Assert.AreEqual(PomodoroPhase.WorkEnded, engine.Phase);
            Assert.AreEqual(0, engine.Remaining);
            Assert.AreEqual(workTime, engine.DisplayValue);
            Assert.AreEqual(workTime, engine.Elapsed);
            Assert.AreEqual(1, engine.Index);

            engine.Start();
            timerSub.PerformTick();
            Assert.AreEqual(PomodoroPhase.Break, engine.Phase);
            Assert.AreEqual(breakTime, engine.Remaining);
            Assert.AreEqual(0, engine.DisplayValue);
            Assert.AreEqual(0, engine.Elapsed);
            Assert.AreEqual(1, engine.Index);

            baseDate = baseDate.AddMinutes(1);
            dateTime.DateToReturn = baseDate;
            timerSub.PerformTick();

            Assert.AreEqual(PomodoroPhase.Break, engine.Phase);
            Assert.AreEqual(breakTime - 60, engine.Remaining);
            Assert.AreEqual(60, engine.DisplayValue);
            Assert.AreEqual(60, engine.Elapsed);
            Assert.AreEqual(1, engine.Index);

            baseDate = baseDate.AddMinutes(4);
            dateTime.DateToReturn = baseDate;
            timerSub.PerformTick();

            Assert.AreEqual(PomodoroPhase.BreakEnded, engine.Phase);
            Assert.AreEqual(0, engine.Remaining);
            Assert.AreEqual(breakTime, engine.DisplayValue);
            Assert.AreEqual(breakTime, engine.Elapsed);
            Assert.AreEqual(1, engine.Index);

            //----Second pomodoro
            Assert.AreEqual(PomodoroPhase.BreakEnded, engine.Phase);
            engine.Start();
            timerSub.PerformTick();
            Assert.AreEqual(PomodoroPhase.Work, engine.Phase);
            Assert.AreEqual(workTime, engine.Remaining);
            Assert.AreEqual(0, engine.DisplayValue);
            Assert.AreEqual(0, engine.Elapsed);
            Assert.AreEqual(2, engine.Index);

            baseDate = baseDate.AddMinutes(1);
            dateTime.DateToReturn = baseDate;
            timerSub.PerformTick();

            engine.Pause();

            Assert.AreEqual(PomodoroPhase.Pause, engine.Phase);
            Assert.AreEqual(workTime - 60, engine.Remaining);
            Assert.AreEqual(60, engine.DisplayValue);
            Assert.AreEqual(60, engine.Elapsed);
            Assert.AreEqual(2, engine.Index);

            engine.Start();

            Assert.AreEqual(PomodoroPhase.Work, engine.Phase);
            Assert.AreEqual(workTime - 60, engine.Remaining);
            Assert.AreEqual(60, engine.DisplayValue);
            Assert.AreEqual(60, engine.Elapsed);
            Assert.AreEqual(2, engine.Index);

            baseDate = baseDate.AddMinutes(2);
            dateTime.DateToReturn = baseDate;
            timerSub.PerformTick();

            engine.Pause();

            Assert.AreEqual(PomodoroPhase.Pause, engine.Phase);
            Assert.AreEqual(workTime - (3 * 60), engine.Remaining);
            Assert.AreEqual((3 * 60), engine.DisplayValue);
            Assert.AreEqual((3 * 60), engine.Elapsed);
            Assert.AreEqual(2, engine.Index);

            engine.Stop();

            Assert.AreEqual(PomodoroPhase.NotStarted, engine.Phase);
            Assert.AreEqual(workTime, engine.Remaining);
            Assert.AreEqual(0, engine.DisplayValue);
            Assert.AreEqual(0, engine.Elapsed);
            Assert.AreEqual(2, engine.Index);

            engine.Start();

            baseDate = baseDate.AddMinutes(3);
            dateTime.DateToReturn = baseDate;
            timerSub.PerformTick();

            Assert.AreEqual(PomodoroPhase.Work, engine.Phase);
            Assert.AreEqual(workTime - (3 * 60), engine.Remaining);
            Assert.AreEqual((3 * 60), engine.DisplayValue);
            Assert.AreEqual((3 * 60), engine.Elapsed);
            Assert.AreEqual(2, engine.Index);

            baseDate = baseDate.AddMinutes(22);
            dateTime.DateToReturn = baseDate;
            timerSub.PerformTick();

            Assert.AreEqual(PomodoroPhase.WorkEnded, engine.Phase);
            Assert.AreEqual(0, engine.Remaining);
            Assert.AreEqual(workTime, engine.DisplayValue);
            Assert.AreEqual(workTime, engine.Elapsed);
            Assert.AreEqual(2, engine.Index);

            engine.Start();
            timerSub.PerformTick();
            Assert.AreEqual(PomodoroPhase.Break, engine.Phase);
            Assert.AreEqual(breakTime, engine.Remaining);
            Assert.AreEqual(0, engine.DisplayValue);
            Assert.AreEqual(0, engine.Elapsed);
            Assert.AreEqual(2, engine.Index);

            baseDate = baseDate.AddMinutes(1);
            dateTime.DateToReturn = baseDate;
            timerSub.PerformTick();

            Assert.AreEqual(PomodoroPhase.Break, engine.Phase);
            Assert.AreEqual(breakTime - 60, engine.Remaining);
            Assert.AreEqual(60, engine.DisplayValue);
            Assert.AreEqual(60, engine.Elapsed);
            Assert.AreEqual(2, engine.Index);

            baseDate = baseDate.AddMinutes(4);
            dateTime.DateToReturn = baseDate;
            timerSub.PerformTick();

            Assert.AreEqual(PomodoroPhase.BreakEnded, engine.Phase);
            Assert.AreEqual(0, engine.Remaining);
            Assert.AreEqual(breakTime, engine.DisplayValue);
            Assert.AreEqual(breakTime, engine.Elapsed);
            Assert.AreEqual(2, engine.Index);

            //----Third pomodoro
            Assert.AreEqual(PomodoroPhase.BreakEnded, engine.Phase);
            engine.Start();
            timerSub.PerformTick();
            Assert.AreEqual(PomodoroPhase.Work, engine.Phase);
            Assert.AreEqual(workTime, engine.Remaining);
            Assert.AreEqual(0, engine.DisplayValue);
            Assert.AreEqual(0, engine.Elapsed);
            Assert.AreEqual(3, engine.Index);

            baseDate = baseDate.AddMinutes(1);
            dateTime.DateToReturn = baseDate;
            timerSub.PerformTick();

            Assert.AreEqual(PomodoroPhase.Work, engine.Phase);
            Assert.AreEqual(workTime - 60, engine.Remaining);
            Assert.AreEqual(60, engine.DisplayValue);
            Assert.AreEqual(60, engine.Elapsed);
            Assert.AreEqual(3, engine.Index);

            engine.Pause();

            Assert.AreEqual(PomodoroPhase.Pause, engine.Phase);
            Assert.AreEqual(workTime - 60, engine.Remaining);
            Assert.AreEqual(60, engine.DisplayValue);
            Assert.AreEqual(60, engine.Elapsed);
            Assert.AreEqual(3, engine.Index);

            engine.Start();

            baseDate = baseDate.AddMinutes(24);
            dateTime.DateToReturn = baseDate;
            timerSub.PerformTick();

            Assert.AreEqual(PomodoroPhase.WorkEnded, engine.Phase);
            Assert.AreEqual(0, engine.Remaining);
            Assert.AreEqual(workTime, engine.DisplayValue);
            Assert.AreEqual(workTime, engine.Elapsed);
            Assert.AreEqual(3, engine.Index);

            engine.Start();
            timerSub.PerformTick();
            Assert.AreEqual(PomodoroPhase.Break, engine.Phase);
            Assert.AreEqual(breakTime, engine.Remaining);
            Assert.AreEqual(0, engine.DisplayValue);
            Assert.AreEqual(0, engine.Elapsed);
            Assert.AreEqual(3, engine.Index);

            baseDate = baseDate.AddMinutes(1);
            dateTime.DateToReturn = baseDate;
            timerSub.PerformTick();

            Assert.AreEqual(PomodoroPhase.Break, engine.Phase);
            Assert.AreEqual(breakTime - 60, engine.Remaining);
            Assert.AreEqual(60, engine.DisplayValue);
            Assert.AreEqual(60, engine.Elapsed);
            Assert.AreEqual(3, engine.Index);

            engine.Stop();

            Assert.AreEqual(PomodoroPhase.NotStarted, engine.Phase);
            Assert.AreEqual(workTime, engine.Remaining);
            Assert.AreEqual(0, engine.DisplayValue);
            Assert.AreEqual(0, engine.Elapsed);
            Assert.AreEqual(4, engine.Index);

            //----Fourth pomodoro (long break)
            Assert.AreEqual(PomodoroPhase.NotStarted, engine.Phase);
            engine.Start();
            timerSub.PerformTick();
            Assert.AreEqual(PomodoroPhase.Work, engine.Phase);
            Assert.AreEqual(workTime, engine.Remaining);
            Assert.AreEqual(0, engine.DisplayValue);
            Assert.AreEqual(0, engine.Elapsed);
            Assert.AreEqual(4, engine.Index);

            baseDate = baseDate.AddMinutes(1);
            dateTime.DateToReturn = baseDate;
            timerSub.PerformTick();

            Assert.AreEqual(PomodoroPhase.Work, engine.Phase);
            Assert.AreEqual(workTime - 60, engine.Remaining);
            Assert.AreEqual(60, engine.DisplayValue);
            Assert.AreEqual(60, engine.Elapsed);
            Assert.AreEqual(4, engine.Index);

            engine.Stop();

            Assert.AreEqual(PomodoroPhase.NotStarted, engine.Phase);
            Assert.AreEqual(workTime, engine.Remaining);
            Assert.AreEqual(0, engine.DisplayValue);
            Assert.AreEqual(0, engine.Elapsed);
            Assert.AreEqual(4, engine.Index);
           
            engine.Start();

            baseDate = baseDate.AddMinutes(25);
            dateTime.DateToReturn = baseDate;
            timerSub.PerformTick();

            Assert.AreEqual(PomodoroPhase.WorkEnded, engine.Phase);
            Assert.AreEqual(0, engine.Remaining);
            Assert.AreEqual(workTime, engine.DisplayValue);
            Assert.AreEqual(workTime, engine.Elapsed);
            Assert.AreEqual(4, engine.Index);

            engine.Start();
            timerSub.PerformTick();
            Assert.AreEqual(PomodoroPhase.Break, engine.Phase);
            Assert.AreEqual(longBreakTime, engine.Remaining);
            Assert.AreEqual(0, engine.DisplayValue);
            Assert.AreEqual(0, engine.Elapsed);
            Assert.AreEqual(4, engine.Index);

            baseDate = baseDate.AddMinutes(1);
            dateTime.DateToReturn = baseDate;
            timerSub.PerformTick();

            Assert.AreEqual(PomodoroPhase.Break, engine.Phase);
            Assert.AreEqual(longBreakTime - 60, engine.Remaining);
            Assert.AreEqual(60, engine.DisplayValue);
            Assert.AreEqual(60, engine.Elapsed);
            Assert.AreEqual(4, engine.Index);

            baseDate = baseDate.AddMinutes(9);
            dateTime.DateToReturn = baseDate;
            timerSub.PerformTick();

            Assert.AreEqual(PomodoroPhase.BreakEnded, engine.Phase);
            Assert.AreEqual(0, engine.Remaining);
            Assert.AreEqual(longBreakTime, engine.DisplayValue);
            Assert.AreEqual(longBreakTime, engine.Elapsed);
            Assert.AreEqual(4, engine.Index);


            //----Fifth pomodoro (return to first
            Assert.AreEqual(PomodoroPhase.BreakEnded, engine.Phase);
            engine.Start();
            timerSub.PerformTick();
            Assert.AreEqual(PomodoroPhase.Work, engine.Phase);
            Assert.AreEqual(workTime, engine.Remaining);
            Assert.AreEqual(0, engine.DisplayValue);
            Assert.AreEqual(0, engine.Elapsed);
            Assert.AreEqual(1, engine.Index);

            baseDate = baseDate.AddMinutes(1);
            dateTime.DateToReturn = baseDate;
            timerSub.PerformTick();

            Assert.AreEqual(PomodoroPhase.Work, engine.Phase);
            Assert.AreEqual(workTime - 60, engine.Remaining);
            Assert.AreEqual(60, engine.DisplayValue);
            Assert.AreEqual(60, engine.Elapsed);
            Assert.AreEqual(1, engine.Index);

            baseDate = baseDate.AddMinutes(24);
            dateTime.DateToReturn = baseDate;
            timerSub.PerformTick();

            Assert.AreEqual(PomodoroPhase.WorkEnded, engine.Phase);
            Assert.AreEqual(0, engine.Remaining);
            Assert.AreEqual(workTime, engine.DisplayValue);
            Assert.AreEqual(workTime, engine.Elapsed);
            Assert.AreEqual(1, engine.Index);

            engine.Start();
            timerSub.PerformTick();
            Assert.AreEqual(PomodoroPhase.Break, engine.Phase);
            Assert.AreEqual(breakTime, engine.Remaining);
            Assert.AreEqual(0, engine.DisplayValue);
            Assert.AreEqual(0, engine.Elapsed);
            Assert.AreEqual(1, engine.Index);

            baseDate = baseDate.AddMinutes(1);
            dateTime.DateToReturn = baseDate;
            timerSub.PerformTick();

            Assert.AreEqual(PomodoroPhase.Break, engine.Phase);
            Assert.AreEqual(breakTime - 60, engine.Remaining);
            Assert.AreEqual(60, engine.DisplayValue);
            Assert.AreEqual(60, engine.Elapsed);
            Assert.AreEqual(1, engine.Index);

            baseDate = baseDate.AddMinutes(4);
            dateTime.DateToReturn = baseDate;
            timerSub.PerformTick();

            Assert.AreEqual(PomodoroPhase.BreakEnded, engine.Phase);
            Assert.AreEqual(0, engine.Remaining);
            Assert.AreEqual(breakTime, engine.DisplayValue);
            Assert.AreEqual(breakTime, engine.Elapsed);
            Assert.AreEqual(1, engine.Index);
        }

    }

}

```

`\\?\C:\Dev\Projects\YAPA-2-modern\YAPA.Shared.Tests\TestHelpers.cs`:

```cs
﻿using System;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using YAPA.Shared.Common;
using YAPA.Shared.Contracts;

namespace YAPA.Shared.Tests
{
    public class TimerMock : ITimer
    {
        public event Action Tick;

        public void PerformTick()
        {
            Tick?.Invoke();
        }

        public void Start()
        {
        }

        public void Stop()
        {
        }
    }

    public class DateMock : IDate
    {
        public DateTime DateToReturn;

        public DateTime DateTimeUtc()
        {
            return DateToReturn;
        }
    }

    public static class Timeout
    {
        public static async Task WaitPhaseChange(PomodoroEngine engine, PomodoroPhase phase)
        {
            var timeout = TimeSpan.FromSeconds(5);
            var task = Task.Run(() =>
                {
                    while (true)
                    {
                        if (engine.Phase == phase)
                            break;

                        Thread.Sleep(50);
                    }
                });

            if (await Task.WhenAny(task, Task.Delay(timeout)) != task)
            {
                Assert.Fail($"Timout: Phase didn't change to {phase}, actual phase:{engine.Phase}");
            }
        }
    }

}

```

`\\?\C:\Dev\Projects\YAPA-2-modern\YAPA.Shared.Tests\YAPA.Shared.Tests.csproj`:

```csproj
﻿<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>    
    <TargetFramework>netcoreapp3.1</TargetFramework>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="Microsoft.NET.Test.Sdk" Version="15.0.0" />
    <PackageReference Include="MSTest.TestAdapter" Version="1.1.11" />
    <PackageReference Include="MSTest.TestFramework" Version="1.1.11" />
    <PackageReference Include="NSubstitute" Version="2.0.3" />
  </ItemGroup>

  <ItemGroup>
    <ProjectReference Include="..\Yapa.Shared\YAPA.Shared.csproj" />
  </ItemGroup>

  <ItemGroup>
    <Service Include="{82a7f48d-3b50-4b1e-b82e-3ada8210c358}" />
  </ItemGroup>

</Project>

```

`\\?\C:\Dev\Projects\YAPA-2-modern\YAPA.sln`:

```sln
﻿
Microsoft Visual Studio Solution File, Format Version 12.00
# Visual Studio Version 16
VisualStudioVersion = 16.0.28729.10
MinimumVisualStudioVersion = 10.0.40219.1
Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "YAPA", "YAPA\YAPA.csproj", "{D6C90A63-BF09-4BD8-B86C-92CBBC1EB917}"
	ProjectSection(ProjectDependencies) = postProject
		{3CB19C81-CF0D-466B-9CD6-13FA90CE1329} = {3CB19C81-CF0D-466B-9CD6-13FA90CE1329}
	EndProjectSection
EndProject
Project("{2150E333-8FDC-42A3-9474-1A3956D46DE8}") = ".nuget", ".nuget", "{5A521D07-7B08-4AB7-A9EF-FC6C3FD2DF35}"
	ProjectSection(SolutionItems) = preProject
		.nuget\NuGet.Config = .nuget\NuGet.Config
		.nuget\NuGet.exe = .nuget\NuGet.exe
		.nuget\NuGet.targets = .nuget\NuGet.targets
	EndProjectSection
EndProject
Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "YAPA.WPF.Shared", "YAPA.WPF.Shared\YAPA.WPF.Shared.csproj", "{3C26FD01-08D3-4192-BBB3-778D9D7692D4}"
EndProject
Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "YAPA.WPF.StarterTheme", "YAPA.WPF.StarterTheme\YAPA.WPF.StarterTheme.csproj", "{E8A13C9C-F756-4FCE-B6E7-42E9E5D998CF}"
EndProject
Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "YAPA.WPF.Themes", "YAPA.WPF.Themes\YAPA.WPF.Themes.csproj", "{3CB19C81-CF0D-466B-9CD6-13FA90CE1329}"
EndProject
Project("{9A19103F-16F7-4668-BE54-9A1E7A4F7556}") = "YAPA.Shared.Tests", "YAPA.Shared.Tests\YAPA.Shared.Tests.csproj", "{2B573B1F-2850-4535-A264-D30950BB0258}"
EndProject
Project("{9A19103F-16F7-4668-BE54-9A1E7A4F7556}") = "YAPA.Shared", "Yapa.Shared\YAPA.Shared.csproj", "{E7B67CDC-3D67-40DB-8BA8-6B3D0D99EBFC}"
EndProject
Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "YAPA.WPF.Themes.Motivational", "YAPA.WPF.MotivationalTheme\YAPA.WPF.Themes.Motivational.csproj", "{C1FACD37-C92E-4339-9C02-D3A5BE430D02}"
EndProject
Global
	GlobalSection(SolutionConfigurationPlatforms) = preSolution
		CD_ROM|Any CPU = CD_ROM|Any CPU
		Debug|Any CPU = Debug|Any CPU
		DVD-5|Any CPU = DVD-5|Any CPU
		Release|Any CPU = Release|Any CPU
		SingleImage|Any CPU = SingleImage|Any CPU
	EndGlobalSection
	GlobalSection(ProjectConfigurationPlatforms) = postSolution
		{D6C90A63-BF09-4BD8-B86C-92CBBC1EB917}.CD_ROM|Any CPU.ActiveCfg = Release|Any CPU
		{D6C90A63-BF09-4BD8-B86C-92CBBC1EB917}.CD_ROM|Any CPU.Build.0 = Release|Any CPU
		{D6C90A63-BF09-4BD8-B86C-92CBBC1EB917}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{D6C90A63-BF09-4BD8-B86C-92CBBC1EB917}.Debug|Any CPU.Build.0 = Debug|Any CPU
		{D6C90A63-BF09-4BD8-B86C-92CBBC1EB917}.DVD-5|Any CPU.ActiveCfg = Debug|Any CPU
		{D6C90A63-BF09-4BD8-B86C-92CBBC1EB917}.DVD-5|Any CPU.Build.0 = Debug|Any CPU
		{D6C90A63-BF09-4BD8-B86C-92CBBC1EB917}.Release|Any CPU.ActiveCfg = Release|Any CPU
		{D6C90A63-BF09-4BD8-B86C-92CBBC1EB917}.Release|Any CPU.Build.0 = Release|Any CPU
		{D6C90A63-BF09-4BD8-B86C-92CBBC1EB917}.SingleImage|Any CPU.ActiveCfg = Release|Any CPU
		{D6C90A63-BF09-4BD8-B86C-92CBBC1EB917}.SingleImage|Any CPU.Build.0 = Release|Any CPU
		{3C26FD01-08D3-4192-BBB3-778D9D7692D4}.CD_ROM|Any CPU.ActiveCfg = Release|Any CPU
		{3C26FD01-08D3-4192-BBB3-778D9D7692D4}.CD_ROM|Any CPU.Build.0 = Release|Any CPU
		{3C26FD01-08D3-4192-BBB3-778D9D7692D4}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{3C26FD01-08D3-4192-BBB3-778D9D7692D4}.Debug|Any CPU.Build.0 = Debug|Any CPU
		{3C26FD01-08D3-4192-BBB3-778D9D7692D4}.DVD-5|Any CPU.ActiveCfg = Debug|Any CPU
		{3C26FD01-08D3-4192-BBB3-778D9D7692D4}.DVD-5|Any CPU.Build.0 = Debug|Any CPU
		{3C26FD01-08D3-4192-BBB3-778D9D7692D4}.Release|Any CPU.ActiveCfg = Release|Any CPU
		{3C26FD01-08D3-4192-BBB3-778D9D7692D4}.Release|Any CPU.Build.0 = Release|Any CPU
		{3C26FD01-08D3-4192-BBB3-778D9D7692D4}.SingleImage|Any CPU.ActiveCfg = Release|Any CPU
		{3C26FD01-08D3-4192-BBB3-778D9D7692D4}.SingleImage|Any CPU.Build.0 = Release|Any CPU
		{E8A13C9C-F756-4FCE-B6E7-42E9E5D998CF}.CD_ROM|Any CPU.ActiveCfg = Release|Any CPU
		{E8A13C9C-F756-4FCE-B6E7-42E9E5D998CF}.CD_ROM|Any CPU.Build.0 = Release|Any CPU
		{E8A13C9C-F756-4FCE-B6E7-42E9E5D998CF}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{E8A13C9C-F756-4FCE-B6E7-42E9E5D998CF}.Debug|Any CPU.Build.0 = Debug|Any CPU
		{E8A13C9C-F756-4FCE-B6E7-42E9E5D998CF}.DVD-5|Any CPU.ActiveCfg = Debug|Any CPU
		{E8A13C9C-F756-4FCE-B6E7-42E9E5D998CF}.DVD-5|Any CPU.Build.0 = Debug|Any CPU
		{E8A13C9C-F756-4FCE-B6E7-42E9E5D998CF}.Release|Any CPU.ActiveCfg = Release|Any CPU
		{E8A13C9C-F756-4FCE-B6E7-42E9E5D998CF}.Release|Any CPU.Build.0 = Release|Any CPU
		{E8A13C9C-F756-4FCE-B6E7-42E9E5D998CF}.SingleImage|Any CPU.ActiveCfg = Release|Any CPU
		{E8A13C9C-F756-4FCE-B6E7-42E9E5D998CF}.SingleImage|Any CPU.Build.0 = Release|Any CPU
		{3CB19C81-CF0D-466B-9CD6-13FA90CE1329}.CD_ROM|Any CPU.ActiveCfg = Release|Any CPU
		{3CB19C81-CF0D-466B-9CD6-13FA90CE1329}.CD_ROM|Any CPU.Build.0 = Release|Any CPU
		{3CB19C81-CF0D-466B-9CD6-13FA90CE1329}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{3CB19C81-CF0D-466B-9CD6-13FA90CE1329}.Debug|Any CPU.Build.0 = Debug|Any CPU
		{3CB19C81-CF0D-466B-9CD6-13FA90CE1329}.DVD-5|Any CPU.ActiveCfg = Debug|Any CPU
		{3CB19C81-CF0D-466B-9CD6-13FA90CE1329}.DVD-5|Any CPU.Build.0 = Debug|Any CPU
		{3CB19C81-CF0D-466B-9CD6-13FA90CE1329}.Release|Any CPU.ActiveCfg = Release|Any CPU
		{3CB19C81-CF0D-466B-9CD6-13FA90CE1329}.Release|Any CPU.Build.0 = Release|Any CPU
		{3CB19C81-CF0D-466B-9CD6-13FA90CE1329}.SingleImage|Any CPU.ActiveCfg = Release|Any CPU
		{3CB19C81-CF0D-466B-9CD6-13FA90CE1329}.SingleImage|Any CPU.Build.0 = Release|Any CPU
		{2B573B1F-2850-4535-A264-D30950BB0258}.CD_ROM|Any CPU.ActiveCfg = Debug|Any CPU
		{2B573B1F-2850-4535-A264-D30950BB0258}.CD_ROM|Any CPU.Build.0 = Debug|Any CPU
		{2B573B1F-2850-4535-A264-D30950BB0258}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{2B573B1F-2850-4535-A264-D30950BB0258}.Debug|Any CPU.Build.0 = Debug|Any CPU
		{2B573B1F-2850-4535-A264-D30950BB0258}.DVD-5|Any CPU.ActiveCfg = Debug|Any CPU
		{2B573B1F-2850-4535-A264-D30950BB0258}.DVD-5|Any CPU.Build.0 = Debug|Any CPU
		{2B573B1F-2850-4535-A264-D30950BB0258}.Release|Any CPU.ActiveCfg = Release|Any CPU
		{2B573B1F-2850-4535-A264-D30950BB0258}.Release|Any CPU.Build.0 = Release|Any CPU
		{2B573B1F-2850-4535-A264-D30950BB0258}.SingleImage|Any CPU.ActiveCfg = Debug|Any CPU
		{2B573B1F-2850-4535-A264-D30950BB0258}.SingleImage|Any CPU.Build.0 = Debug|Any CPU
		{E7B67CDC-3D67-40DB-8BA8-6B3D0D99EBFC}.CD_ROM|Any CPU.ActiveCfg = Debug|Any CPU
		{E7B67CDC-3D67-40DB-8BA8-6B3D0D99EBFC}.CD_ROM|Any CPU.Build.0 = Debug|Any CPU
		{E7B67CDC-3D67-40DB-8BA8-6B3D0D99EBFC}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{E7B67CDC-3D67-40DB-8BA8-6B3D0D99EBFC}.Debug|Any CPU.Build.0 = Debug|Any CPU
		{E7B67CDC-3D67-40DB-8BA8-6B3D0D99EBFC}.DVD-5|Any CPU.ActiveCfg = Debug|Any CPU
		{E7B67CDC-3D67-40DB-8BA8-6B3D0D99EBFC}.DVD-5|Any CPU.Build.0 = Debug|Any CPU
		{E7B67CDC-3D67-40DB-8BA8-6B3D0D99EBFC}.Release|Any CPU.ActiveCfg = Release|Any CPU
		{E7B67CDC-3D67-40DB-8BA8-6B3D0D99EBFC}.Release|Any CPU.Build.0 = Release|Any CPU
		{E7B67CDC-3D67-40DB-8BA8-6B3D0D99EBFC}.SingleImage|Any CPU.ActiveCfg = Debug|Any CPU
		{E7B67CDC-3D67-40DB-8BA8-6B3D0D99EBFC}.SingleImage|Any CPU.Build.0 = Debug|Any CPU
		{C1FACD37-C92E-4339-9C02-D3A5BE430D02}.CD_ROM|Any CPU.ActiveCfg = Release|Any CPU
		{C1FACD37-C92E-4339-9C02-D3A5BE430D02}.CD_ROM|Any CPU.Build.0 = Release|Any CPU
		{C1FACD37-C92E-4339-9C02-D3A5BE430D02}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{C1FACD37-C92E-4339-9C02-D3A5BE430D02}.Debug|Any CPU.Build.0 = Debug|Any CPU
		{C1FACD37-C92E-4339-9C02-D3A5BE430D02}.DVD-5|Any CPU.ActiveCfg = Debug|Any CPU
		{C1FACD37-C92E-4339-9C02-D3A5BE430D02}.DVD-5|Any CPU.Build.0 = Debug|Any CPU
		{C1FACD37-C92E-4339-9C02-D3A5BE430D02}.Release|Any CPU.ActiveCfg = Release|Any CPU
		{C1FACD37-C92E-4339-9C02-D3A5BE430D02}.Release|Any CPU.Build.0 = Release|Any CPU
		{C1FACD37-C92E-4339-9C02-D3A5BE430D02}.SingleImage|Any CPU.ActiveCfg = Release|Any CPU
		{C1FACD37-C92E-4339-9C02-D3A5BE430D02}.SingleImage|Any CPU.Build.0 = Release|Any CPU
	EndGlobalSection
	GlobalSection(SolutionProperties) = preSolution
		HideSolutionNode = FALSE
	EndGlobalSection
	GlobalSection(ExtensibilityGlobals) = postSolution
		SolutionGuid = {2087D619-6102-4BC7-8F52-3EE513F2E494}
	EndGlobalSection
EndGlobal

```

`\\?\C:\Dev\Projects\YAPA-2-modern\YAPA.WPF.MotivationalTheme\App.config`:

```config
<?xml version="1.0" encoding="utf-8"?>
<configuration>
    <configSections>
    <sectionGroup name="userSettings" type="System.Configuration.UserSettingsGroup, System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
            <section name="YAPA.Properties.Settings" type="System.Configuration.ClientSettingsSection, System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" allowExeDefinition="MachineToLocalUser" requirePermission="false"/>
        </sectionGroup>
    
    <section name="entityFramework" type="System.Data.Entity.Internal.ConfigFile.EntityFrameworkSection, EntityFramework, Version=6.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" requirePermission="false"/>
    
    </configSections>
    <startup> 
        <supportedRuntime version="v4.0" sku=".NETFramework,Version=v4.8"/>
    </startup>
    <userSettings>
        <YAPA.Properties.Settings>
            <setting name="PeriodWork" serializeAs="String">
                <value>25</value>
            </setting>
            <setting name="PeriodShortBreak" serializeAs="String">
                <value>5</value>
            </setting>
            <setting name="PeriodLongBreak" serializeAs="String">
                <value>15</value>
            </setting>
            <setting name="UseLightTheme" serializeAs="String">
                <value>True</value>
            </setting>
            <setting name="CountBackwards" serializeAs="String">
                <value>False</value>
            </setting>
        </YAPA.Properties.Settings>
    </userSettings>
  <entityFramework>
    <defaultConnectionFactory type="System.Data.Entity.Infrastructure.SqlCeConnectionFactory, EntityFramework">
      <parameters>
        <parameter value="System.Data.SqlServerCe.4.0"/>
      </parameters>
    </defaultConnectionFactory>
    <providers>
      <provider invariantName="System.Data.SqlClient" type="System.Data.Entity.SqlServer.SqlProviderServices, EntityFramework.SqlServer"/>
      <provider invariantName="System.Data.SqlServerCe.4.0" type="System.Data.Entity.SqlServerCompact.SqlCeProviderServices, EntityFramework.SqlServerCompact"/>
    </providers>
  </entityFramework>
  
  <connectionStrings>
    <add name="CFSqlCe.Dal.DvdContext" providerName="System.Data.SqlServerCe.4.0" connectionString="Data Source=DvdDatabase.sdf"/>
  </connectionStrings>
  <runtime>
    <assemblyBinding xmlns="urn:schemas-microsoft-com:asm.v1">
      <dependentAssembly>
        <assemblyIdentity name="Xceed.Wpf.Toolkit" publicKeyToken="3e4669d2f30244f4" culture="neutral"/>
        <bindingRedirect oldVersion="0.0.0.0-2.0.0.0" newVersion="2.0.0.0"/>
      </dependentAssembly>
    </assemblyBinding>
  </runtime>
</configuration>

```

`\\?\C:\Dev\Projects\YAPA-2-modern\YAPA.WPF.MotivationalTheme\App.xaml`:

```xaml
﻿<Application
    x:Class="Motivational.App"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:converters="clr-namespace:Motivational.Converters"
    xmlns:local="clr-namespace:Motivational"
    StartupUri="MainWindow.xaml"
    >
    
    <Application.Resources>

    </Application.Resources>
</Application>
```

`\\?\C:\Dev\Projects\YAPA-2-modern\YAPA.WPF.MotivationalTheme\App.xaml.cs`:

```cs
﻿using System;
using System.Collections.Generic;
using System.Windows;

namespace Motivational
{
    /// <summary>
    /// Interaction logic for App.xaml
    /// </summary>
    public partial class App : Application
    {
        [STAThread]
        public static void Main()
        {
            var application = new App();

            application.Init();
            application.Run();

            // Allow single instance code to perform cleanup operations
        }

        public void Init()
        {
            this.InitializeComponent();
        }

        public bool SignalExternalCommandLineArgs(IList<string> args)
        {
            return true;
        }
    }
}

```

`\\?\C:\Dev\Projects\YAPA-2-modern\YAPA.WPF.MotivationalTheme\Const.cs`:

```cs
﻿namespace Motivational
{
    public class Const
    {
        #region Font awesome icons

        public const string ICON_WINDOW_MINIMIZE = "\uf068";
        public const string ICON_WINDOW_CLOSE = "\uf00d";
        public const string ICON_SETTINGS = "\uf013";
        public const string ICON_PLAY = "\uf04b";
        public const string ICON_PAUSE = "\uf04c";
        public const string ICON_STOP = "\uf04d";
        public const string ICON_PERIOD_POMODORO = "\uf0e7";
        public const string ICON_PERIOD_REST = "\uf08a";
        public const string ICON_PERIOD_REST_LONG = "\uf004";
        public const string ICON_PERIOD_STOPPED = "";

        #endregion


        #region Colors

        public const string COLOR_LIGHT_WINDOW_BACKGROUND = "#F2F2F2";
        public const string COLOR_LIGHT_WINDOW_BACKGROUND2 = "#E5E5E5";
        public const string COLOR_LIGHT_WINDOW_FOREGROUND = "#222222";
        public const string COLOR_LIGHT_WINDOW_SHADOW = "#000000";
        public const double COLOR_LIGHT_WINDOW_SHADOW_OPACITY = 0.3;
        public const string COLOR_LIGHT_TIMER_FOREGROUND = "#FFFFFF";
        public const string COLOR_LIGHT_TIMER_SHADOW = "#000000";

        public const string COLOR_DARK_WINDOW_BACKGROUND = "#222222";
        public const string COLOR_DARK_WINDOW_BACKGROUND2 = "#111111";
        public const string COLOR_DARK_WINDOW_FOREGROUND = "#DDDDDD";
        public const string COLOR_DARK_WINDOW_SHADOW = "#30000000";
        public const double COLOR_DARK_WINDOW_SHADOW_OPACITY = 0.3;
        public const string COLOR_DARK_TIMER_FOREGROUND = "#000000";
        public const string COLOR_DARK_TIMER_SHADOW = "#999999";

        #endregion
    }
}

```

`\\?\C:\Dev\Projects\YAPA-2-modern\YAPA.WPF.MotivationalTheme\Converters\VisibilityConverter.cs`:

```cs
﻿using System;
using System.Collections;
using System.Windows;

namespace Motivational.Converters
{
    public class VisibilityConverter : System.Windows.Data.IValueConverter
    {
        public enum Mode
        {
            Default,
            Inverted,
            HideOnly,
        }

        public object Convert(object value, Type targetType, object parameter, System.Globalization.CultureInfo culture)
        {
            Visibility collapsedVisibility = Visibility.Collapsed;
            Visibility returnVisibility = Visibility.Visible;
            Mode mode = Mode.Default;

            // Resolve input parameter
            if (parameter == null || !Enum.TryParse<Mode>((string)parameter, true, out mode))
                mode = Mode.Default;

            if (mode == Mode.HideOnly)
                collapsedVisibility = Visibility.Hidden;

            if (value == null)
            {
                returnVisibility = collapsedVisibility;
            }
            else if (value is bool)
            {
                bool bVal = (bool)value;
                if (!bVal)
                    returnVisibility = collapsedVisibility;
            }
            else if (value is string)
            {
                string itemVal = value as String;

                if (String.IsNullOrWhiteSpace(itemVal))
                    returnVisibility = collapsedVisibility;
            }
            else if (value is IList)
            {
                IList objectList = value as IList;
                if (objectList == null || objectList.Count == 0)
                    returnVisibility = collapsedVisibility;
            }

            if (mode == Mode.Inverted)
                return returnVisibility == Visibility.Visible ? collapsedVisibility : Visibility.Visible;
            else
                return returnVisibility;
        }

        public object ConvertBack(object value, Type targetType, object parameter, System.Globalization.CultureInfo culture)
        {
            throw new NotImplementedException();
        }
    }
}

```

`\\?\C:\Dev\Projects\YAPA-2-modern\YAPA.WPF.MotivationalTheme\Localizations\General.Designer.cs`:

```cs
﻿//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Motivational.Localizations {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public class General {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal General() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Motivational.Localizations.General", typeof(General).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Pause current period.
        /// </summary>
        public static string app_button_pause_title {
            get {
                return ResourceManager.GetString("app_button_pause_title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Show settings.
        /// </summary>
        public static string app_button_settings {
            get {
                return ResourceManager.GetString("app_button_settings", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Start period.
        /// </summary>
        public static string app_button_start_title {
            get {
                return ResourceManager.GetString("app_button_start_title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Reset all sessions and start from the beginning.
        /// </summary>
        public static string app_button_stop_title {
            get {
                return ResourceManager.GetString("app_button_stop_title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Close window.
        /// </summary>
        public static string app_button_window_close {
            get {
                return ResourceManager.GetString("app_button_window_close", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Minimize window.
        /// </summary>
        public static string app_button_window_minimize {
            get {
                return ResourceManager.GetString("app_button_window_minimize", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Pause.
        /// </summary>
        public static string app_jumplist_item_pause {
            get {
                return ResourceManager.GetString("app_jumplist_item_pause", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Pause current Pomodoro session.
        /// </summary>
        public static string app_jumplist_item_pause_title {
            get {
                return ResourceManager.GetString("app_jumplist_item_pause_title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Stop.
        /// </summary>
        public static string app_jumplist_item_reset {
            get {
                return ResourceManager.GetString("app_jumplist_item_reset", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Reset sessions and start from the beginning.
        /// </summary>
        public static string app_jumplist_item_reset_title {
            get {
                return ResourceManager.GetString("app_jumplist_item_reset_title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Restart.
        /// </summary>
        public static string app_jumplist_item_restart {
            get {
                return ResourceManager.GetString("app_jumplist_item_restart", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Restart current Pomodoro session.
        /// </summary>
        public static string app_jumplist_item_restart_title {
            get {
                return ResourceManager.GetString("app_jumplist_item_restart_title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Settings.
        /// </summary>
        public static string app_jumplist_item_settings {
            get {
                return ResourceManager.GetString("app_jumplist_item_settings", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Display application settings.
        /// </summary>
        public static string app_jumplist_item_settings_title {
            get {
                return ResourceManager.GetString("app_jumplist_item_settings_title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Start.
        /// </summary>
        public static string app_jumplist_item_start {
            get {
                return ResourceManager.GetString("app_jumplist_item_start", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Start Pomodoro session.
        /// </summary>
        public static string app_jumplist_item_start_title {
            get {
                return ResourceManager.GetString("app_jumplist_item_start_title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Are you sure to cancel running pomodoro session and exit application?.
        /// </summary>
        public static string app_message_confirm_exit {
            get {
                return ResourceManager.GetString("app_message_confirm_exit", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Are you sure to reset number of Pomodoro sessions and start over?.
        /// </summary>
        public static string app_message_confirm_session_reset {
            get {
                return ResourceManager.GetString("app_message_confirm_session_reset", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Hurray, you&apos;ve got whole {0} minutes to rest! Go for a walk!.
        /// </summary>
        public static string app_period_long_break_caption {
            get {
                return ResourceManager.GetString("app_period_long_break_caption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Press play to start earned {0} minutes long break.
        /// </summary>
        public static string app_period_motivation_start_long_break {
            get {
                return ResourceManager.GetString("app_period_motivation_start_long_break", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Press play to start your new challenge.
        /// </summary>
        public static string app_period_motivation_start_pomodoro {
            get {
                return ResourceManager.GetString("app_period_motivation_start_pomodoro", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Press play to start your {0} minutes break.
        /// </summary>
        public static string app_period_motivation_start_short_break {
            get {
                return ResourceManager.GetString("app_period_motivation_start_short_break", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Shouldn&apos;t you be focused already? Stop staring on this window and let&apos;s get some things done..
        /// </summary>
        public static string app_period_pomodoro_caption_default {
            get {
                return ResourceManager.GetString("app_period_pomodoro_caption_default", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Press play to start new period.
        /// </summary>
        public static string app_period_press_play_to_start {
            get {
                return ResourceManager.GetString("app_period_press_play_to_start", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You&apos;ve got {0} minutes to rest. Let&apos;s do some stretching..
        /// </summary>
        public static string app_period_short_break_caption {
            get {
                return ResourceManager.GetString("app_period_short_break_caption", resourceCulture);
            }
        }
    }
}

```

`\\?\C:\Dev\Projects\YAPA-2-modern\YAPA.WPF.MotivationalTheme\Localizations\General.resx`:

```resx
﻿<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="app_button_pause_title" xml:space="preserve">
    <value>Pause current period</value>
  </data>
  <data name="app_button_settings" xml:space="preserve">
    <value>Show settings</value>
  </data>
  <data name="app_button_start_title" xml:space="preserve">
    <value>Start period</value>
  </data>
  <data name="app_button_stop_title" xml:space="preserve">
    <value>Reset all sessions and start from the beginning</value>
  </data>
  <data name="app_button_window_close" xml:space="preserve">
    <value>Close window</value>
  </data>
  <data name="app_button_window_minimize" xml:space="preserve">
    <value>Minimize window</value>
  </data>
  <data name="app_jumplist_item_pause" xml:space="preserve">
    <value>Pause</value>
  </data>
  <data name="app_jumplist_item_pause_title" xml:space="preserve">
    <value>Pause current Pomodoro session</value>
  </data>
  <data name="app_jumplist_item_reset" xml:space="preserve">
    <value>Stop</value>
  </data>
  <data name="app_jumplist_item_reset_title" xml:space="preserve">
    <value>Reset sessions and start from the beginning</value>
  </data>
  <data name="app_jumplist_item_restart" xml:space="preserve">
    <value>Restart</value>
  </data>
  <data name="app_jumplist_item_restart_title" xml:space="preserve">
    <value>Restart current Pomodoro session</value>
  </data>
  <data name="app_jumplist_item_settings" xml:space="preserve">
    <value>Settings</value>
  </data>
  <data name="app_jumplist_item_settings_title" xml:space="preserve">
    <value>Display application settings</value>
  </data>
  <data name="app_jumplist_item_start" xml:space="preserve">
    <value>Start</value>
  </data>
  <data name="app_jumplist_item_start_title" xml:space="preserve">
    <value>Start Pomodoro session</value>
  </data>
  <data name="app_message_confirm_exit" xml:space="preserve">
    <value>Are you sure to cancel running pomodoro session and exit application?</value>
  </data>
  <data name="app_message_confirm_session_reset" xml:space="preserve">
    <value>Are you sure to reset number of Pomodoro sessions and start over?</value>
  </data>
  <data name="app_period_long_break_caption" xml:space="preserve">
    <value>Hurray, you've got whole {0} minutes to rest! Go for a walk!</value>
  </data>
  <data name="app_period_motivation_start_long_break" xml:space="preserve">
    <value>Press play to start earned {0} minutes long break</value>
  </data>
  <data name="app_period_motivation_start_pomodoro" xml:space="preserve">
    <value>Press play to start your new challenge</value>
  </data>
  <data name="app_period_motivation_start_short_break" xml:space="preserve">
    <value>Press play to start your {0} minutes break</value>
  </data>
  <data name="app_period_pomodoro_caption_default" xml:space="preserve">
    <value>Shouldn't you be focused already? Stop staring on this window and let's get some things done.</value>
  </data>
  <data name="app_period_press_play_to_start" xml:space="preserve">
    <value>Press play to start new period</value>
  </data>
  <data name="app_period_short_break_caption" xml:space="preserve">
    <value>You've got {0} minutes to rest. Let's do some stretching.</value>
  </data>
</root>
```

`\\?\C:\Dev\Projects\YAPA-2-modern\YAPA.WPF.MotivationalTheme\LocalizedStrings.cs`:

```cs
﻿using Motivational.Localizations;

namespace Motivational
{
    /// <summary>
    /// Provides access to string resources.
    /// </summary>
    public class LocalizedStrings
    {
        private static General _generalResources = new General();
        public General GeneralResources { get { return _generalResources; } }
    }
}
```

`\\?\C:\Dev\Projects\YAPA-2-modern\YAPA.WPF.MotivationalTheme\MainWindow.xaml`:

```xaml
﻿<shared:AbstractWindow
    x:Class="Motivational.MainWindow"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:yapa="clr-namespace:Motivational"
    xmlns:converters="clr-namespace:Motivational.Converters"
    xmlns:shared="clr-namespace:YAPA.Shared;assembly=YAPA.WPF.Shared"
    xmlns:converters1="clr-namespace:Motivational.Converters"
    Title="YAPA 2"
    Height="240"
    Width="360"
    ShowInTaskbar="True"
    Background="Transparent"
    ResizeMode="NoResize"
    AllowsTransparency="True"
    WindowStartupLocation="Manual"
    WindowStyle="None"
    Topmost="True"
    BorderThickness="30,2,30,30"
    MouseLeftButtonDown="MainWindow_MouseLeftButtonDown"
    >
    <Window.TaskbarItemInfo>
        <TaskbarItemInfo ProgressState="{Binding ProgressState}" ProgressValue="{Binding ProgressValue}"/>
    </Window.TaskbarItemInfo>

    <Window.Resources>

        <!-- Localization -->
        <yapa:LocalizedStrings x:Key="LocalizedStrings"/>

        <!-- Global value converters -->
        <converters1:VisibilityConverter x:Key="VisibilityConverter" />

        <Style TargetType="TextBlock" x:Key="StyleTextTime">
            <Setter Property="FontFamily" Value="/Motivational;component/Fonts/#Roboto Condensed Light" />
            <Setter Property="FontSize" Value="24" />
            <Setter Property="Background" Value="Transparent" />
            <Setter Property="Foreground" Value="{Binding TimerForegroundColor}" />
            <Setter Property="Opacity" Value="{Binding TimerForegroundOpacity}" />
            <Setter Property="Cursor" Value="Arrow" />
            <Setter Property="FontStretch" Value="UltraCondensed" />
            <Setter Property="LineStackingStrategy" Value="MaxHeight" />
            <Setter Property="LineHeight" Value="24" />
            <Setter Property="Effect">
                <Setter.Value>
                    <DropShadowEffect
                        ShadowDepth="0"
                        Direction="0"
                        Color="{Binding TimerShadowColor}"
                        Opacity="{Binding TimerShadowOpacity}"
                        BlurRadius="10"
                        />
                </Setter.Value>
            </Setter>
        </Style>

        <Style TargetType="TextBlock" x:Key="StyleTextPeriodNumber" BasedOn="{StaticResource StyleTextTime}">
            <Setter Property="FontFamily" Value="/Motivational;component/Fonts/#Roboto Condensed" />
            <Setter Property="FontWeight" Value="Bold" />
            <Setter Property="FontSize" Value="12" />
            <Setter Property="LineHeight" Value="12" />
        </Style>

        <Style TargetType="TextBlock" x:Key="StyleTextIconPeriod" BasedOn="{StaticResource StyleTextTime}">
            <Setter Property="FontFamily" Value="/Motivational;component/Fonts/#FontAwesome" />
            <Setter Property="FontSize" Value="10" />
            <Setter Property="Cursor" Value="Arrow" />
            <Setter Property="LineHeight" Value="10" />
        </Style>

        <Style TargetType="TextBlock" x:Key="StyleTextTimeInside" BasedOn="{StaticResource StyleTextTime}">
            <Setter Property="Foreground" Value="{Binding WindowForegroundColor}" />
            <Setter Property="Effect" Value="{x:Null}" />
        </Style>

        <Style TargetType="TextBlock" x:Key="StyleTextPeriodNumberInside" BasedOn="{StaticResource StyleTextPeriodNumber}">
            <Setter Property="Foreground" Value="{Binding WindowForegroundColor}" />
            <Setter Property="Effect" Value="{x:Null}" />
        </Style>

        <Style TargetType="TextBlock" x:Key="StyleTextIconPeriodInside" BasedOn="{StaticResource StyleTextIconPeriod}">
            <Setter Property="Foreground" Value="{Binding WindowForegroundColor}" />
            <Setter Property="Effect" Value="{x:Null}" />
        </Style>

        <Style TargetType="TextBlock" x:Key="StyleTextPeriodText" BasedOn="{StaticResource StyleTextTime}">
            <Setter Property="Foreground" Value="{Binding WindowForegroundColor}" />
            <Setter Property="FontSize" Value="16" />
            <Setter Property="LineHeight" Value="22" />
            <Setter Property="Effect" Value="{x:Null}" />
        </Style>

        <Style TargetType="TextBlock" x:Key="StyleTextPeriodSource" BasedOn="{StaticResource StyleTextPeriodText}">
            <Setter Property="FontFamily" Value="/Motivational;component/Fonts/#Roboto Condensed" />
            <Setter Property="FontWeight" Value="Bold" />
            <Setter Property="Foreground" Value="{Binding WindowForegroundColor}" />
            <Setter Property="Opacity" Value="0.6" />
            <Setter Property="FontSize" Value="13" />
            <Setter Property="LineHeight" Value="20" />
            <Setter Property="Foreground" Value="{Binding AccentColor}" />
        </Style>

        <Style TargetType="TextBlock" x:Key="StyleTextIcon" BasedOn="{StaticResource StyleTextTime}">
            <Setter Property="FontFamily" Value="/Motivational;component/Fonts/#FontAwesome" />
            <Setter Property="FontSize" Value="24" />
            <Setter Property="Cursor" Value="Hand" />
            <Setter Property="Opacity" Value="1" />
            <Setter Property="Effect" Value="{x:Null}" />
        </Style>

        <Style TargetType="Button" x:Key="StyleButtonIcon">
            <Setter Property="FontFamily" Value="/Motivational;component/Fonts/#FontAwesome" />
            <Setter Property="FontSize" Value="12" />
            <Setter Property="Cursor" Value="Hand" />
            <Setter Property="Width" Value="16" />
            <Setter Property="Height" Value="16" />
            <Setter Property="Margin" Value="5,0,0,0" />
            <Setter Property="Padding" Value="4,2,4,3" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Grid
                            IsHitTestVisible="True"
                            Background="Transparent"
                            >
                            <Grid
                                >

                                <Ellipse
                                    HorizontalAlignment="Stretch"
                                    VerticalAlignment="Stretch"
                                    Fill="{Binding AccentColor}"
                                    x:Name="LayoutContainer"
                                    RenderTransformOrigin="0.5,0.5"
                                    >
                                    <Ellipse.RenderTransform>
                                        <ScaleTransform ScaleX="0.5" ScaleY="0.5" />
                                    </Ellipse.RenderTransform>

                                </Ellipse>
                                <Viewbox
                                    x:Name="CaptionContainer"
                                    StretchDirection="Both"
                                    Margin="{TemplateBinding Padding}"
                                    Opacity="0"
                                    >
                                    <TextBlock
                                        x:Name="CaptionText"
                                        Text="{TemplateBinding Content}"
                                        Foreground="White"
                                        Style="{StaticResource StyleTextIcon}"
                                        VerticalAlignment="Center"
                                        HorizontalAlignment="Stretch"
                                        TextAlignment="Center"
                                        />
                                </Viewbox>
                            </Grid>
                        </Grid>

                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Trigger.EnterActions>
                                    <BeginStoryboard>
                                        <Storyboard>
                                            <DoubleAnimation
                                                Storyboard.TargetName="CaptionContainer"
                                                Storyboard.TargetProperty="Opacity"
                                                To="1"
                                                Duration="0:0:0.15"
                                                >
                                                <DoubleAnimation.EasingFunction>
                                                    <QuinticEase EasingMode="EaseInOut" />
                                                </DoubleAnimation.EasingFunction>
                                            </DoubleAnimation>
                                            <DoubleAnimation
                                                Storyboard.TargetName="LayoutContainer"
                                                Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleX)"
                                                To="1"
                                                Duration="0:0:0.15"
                                                >
                                                <DoubleAnimation.EasingFunction>
                                                    <QuinticEase EasingMode="EaseInOut" />
                                                </DoubleAnimation.EasingFunction>
                                            </DoubleAnimation>
                                            <DoubleAnimation
                                                Storyboard.TargetName="LayoutContainer"
                                                Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleY)"
                                                To="1"
                                                Duration="0:0:0.15"
                                                >
                                                <DoubleAnimation.EasingFunction>
                                                    <QuinticEase EasingMode="EaseInOut" />
                                                </DoubleAnimation.EasingFunction>
                                            </DoubleAnimation>
                                        </Storyboard>
                                    </BeginStoryboard>
                                </Trigger.EnterActions>
                                <Trigger.ExitActions>
                                    <BeginStoryboard>
                                        <Storyboard>
                                            <DoubleAnimation
                                                Storyboard.TargetName="CaptionContainer"
                                                Storyboard.TargetProperty="Opacity"
                                                To="0"
                                                Duration="0:0:0.2"
                                                >
                                                <DoubleAnimation.EasingFunction>
                                                    <QuinticEase EasingMode="EaseInOut" />
                                                </DoubleAnimation.EasingFunction>
                                            </DoubleAnimation>
                                            <DoubleAnimation
                                                Storyboard.TargetName="LayoutContainer"
                                                Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleX)"
                                                To="0.5"
                                                Duration="0:0:0.3"
                                                AutoReverse="False"
                                                >
                                                <DoubleAnimation.EasingFunction>
                                                    <QuinticEase EasingMode="EaseInOut" />
                                                </DoubleAnimation.EasingFunction>
                                            </DoubleAnimation>
                                            <DoubleAnimation
                                                Storyboard.TargetName="LayoutContainer"
                                                Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleY)"
                                                To="0.5"
                                                Duration="0:0:0.3"
                                                AutoReverse="False"
                                                >
                                                <DoubleAnimation.EasingFunction>
                                                    <QuinticEase EasingMode="EaseInOut" />
                                                </DoubleAnimation.EasingFunction>
                                            </DoubleAnimation>
                                        </Storyboard>
                                    </BeginStoryboard>
                                </Trigger.ExitActions>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style TargetType="Button" x:Key="StyleButtonIconControl" BasedOn="{StaticResource StyleButtonIcon}">
            <Setter Property="Width" Value="32" />
            <Setter Property="Height" Value="48" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Grid
                            IsHitTestVisible="True"
                            Background="Transparent"
                            >
                            <Viewbox
                                StretchDirection="Both"
                                x:Name="LayoutContainer"
                                RenderTransformOrigin="0.5,0.5"
                                Margin="8"
                                >
                                <Viewbox.RenderTransform>
                                    <ScaleTransform ScaleX="0.75" ScaleY="0.75" />
                                </Viewbox.RenderTransform>

                                <TextBlock
                                    x:Name="CaptionText"
                                    Text="{TemplateBinding Content}"
                                    Foreground="{Binding WindowForegroundColor}"
                                    Style="{StaticResource StyleTextIcon}"
                                    VerticalAlignment="Center"
                                    HorizontalAlignment="Stretch"
                                    TextAlignment="Center"
                                    />
<!--Opacity="{Binding ClockOpacity}"-->
                            </Viewbox>
                            
                            <Border
                                x:Name="MouseOverIndicator"
                                Background="{Binding AccentColor}"
                                Height="5"
                                VerticalAlignment="Bottom"
                                Opacity="0"
                                />
                        </Grid>

                        <!--<ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter TargetName="CaptionText" Property="Foreground" Value="{Binding AccentColor}" />
                                <Setter TargetName="CaptionText" Property="Opacity" Value="1" />
                                <Setter TargetName="CaptionText" Property="Effect" Value="{x:Null}" />
                            </Trigger>
                        </ControlTemplate.Triggers>-->

                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Trigger.EnterActions>
                                    <BeginStoryboard>
                                        <Storyboard>
                                            <DoubleAnimation
                                                Storyboard.TargetName="MouseOverIndicator"
                                                Storyboard.TargetProperty="Opacity"
                                                To="1"
                                                Duration="0:0:0.15"
                                                >
                                                <DoubleAnimation.EasingFunction>
                                                    <QuinticEase EasingMode="EaseInOut" />
                                                </DoubleAnimation.EasingFunction>
                                            </DoubleAnimation>
                                            <DoubleAnimation
                                                Storyboard.TargetName="LayoutContainer"
                                                Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleX)"
                                                To="1"
                                                Duration="0:0:0.15"
                                                >
                                                <DoubleAnimation.EasingFunction>
                                                    <QuinticEase EasingMode="EaseInOut" />
                                                </DoubleAnimation.EasingFunction>
                                            </DoubleAnimation>
                                            <DoubleAnimation
                                                Storyboard.TargetName="LayoutContainer"
                                                Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleY)"
                                                To="1"
                                                Duration="0:0:0.15"
                                                >
                                                <DoubleAnimation.EasingFunction>
                                                    <QuinticEase EasingMode="EaseInOut" />
                                                </DoubleAnimation.EasingFunction>
                                            </DoubleAnimation>
                                        </Storyboard>
                                    </BeginStoryboard>
                                </Trigger.EnterActions>
                                <Trigger.ExitActions>
                                    <BeginStoryboard>
                                        <Storyboard>
                                            <DoubleAnimation
                                                Storyboard.TargetName="MouseOverIndicator"
                                                Storyboard.TargetProperty="Opacity"
                                                To="0"
                                                Duration="0:0:0.2"
                                                >
                                                <DoubleAnimation.EasingFunction>
                                                    <QuinticEase EasingMode="EaseInOut" />
                                                </DoubleAnimation.EasingFunction>
                                            </DoubleAnimation>
                                            <DoubleAnimation
                                                Storyboard.TargetName="LayoutContainer"
                                                Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleX)"
                                                To="0.75"
                                                Duration="0:0:0.3"
                                                AutoReverse="False"
                                                >
                                                <DoubleAnimation.EasingFunction>
                                                    <QuinticEase EasingMode="EaseInOut" />
                                                </DoubleAnimation.EasingFunction>
                                            </DoubleAnimation>
                                            <DoubleAnimation
                                                Storyboard.TargetName="LayoutContainer"
                                                Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleY)"
                                                To="0.75"
                                                Duration="0:0:0.3"
                                                AutoReverse="False"
                                                >
                                                <DoubleAnimation.EasingFunction>
                                                    <QuinticEase EasingMode="EaseInOut" />
                                                </DoubleAnimation.EasingFunction>
                                            </DoubleAnimation>
                                        </Storyboard>
                                    </BeginStoryboard>
                                </Trigger.ExitActions>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style TargetType="Border" x:Key="StyleBorderBackground">
            <Setter Property="CornerRadius" Value="4" />
            <Setter Property="Background" Value="{Binding WindowBackgroundColor}" />
            <Setter Property="Cursor" Value="Arrow" />
        </Style>

        <Storyboard
            x:Key="PeriodCompletedIndicatorStoryboard"
            Timeline.DesiredFrameRate="10"
            Duration="0:0:0.5"
            RepeatBehavior="Forever"
            AutoReverse="True"
            >
            <ObjectAnimationUsingKeyFrames
                Storyboard.TargetName="PeriodCompletedIndicatorEl"
                Storyboard.TargetProperty="Visibility"
                >
                <DiscreteObjectKeyFrame
                    KeyTime="0:0:0.2"
                    Value="{x:Static Visibility.Visible}"
                    />
            </ObjectAnimationUsingKeyFrames>
            <ObjectAnimationUsingKeyFrames
                Storyboard.TargetName="PeriodCompletedIndicatorInsideWindowEl"
                Storyboard.TargetProperty="Visibility"
                >
                <DiscreteObjectKeyFrame
                    KeyTime="0:0:0.2"
                    Value="{x:Static Visibility.Visible}"
                    />
            </ObjectAnimationUsingKeyFrames>
        </Storyboard>
    </Window.Resources>

    <Window.Triggers>
        <!-- Window mouse over animations -->
        <EventTrigger RoutedEvent="Window.MouseEnter">
            <EventTrigger.Actions>
                <BeginStoryboard>
                    <Storyboard>
                        <DoubleAnimation
                            Storyboard.TargetName="WindowContentPanel"
                            Storyboard.TargetProperty="Opacity"
                            To="1"
                            Duration="0:0:0.15"
                            />
                    </Storyboard>
                </BeginStoryboard>
            </EventTrigger.Actions>
        </EventTrigger>
        <EventTrigger RoutedEvent="Window.MouseLeave">
            <EventTrigger.Actions>
                <BeginStoryboard>
                    <Storyboard>
                        <DoubleAnimation
                            Storyboard.TargetName="WindowContentPanel"
                            Storyboard.TargetProperty="Opacity"
                            To="0"
                            Duration="0:0:0.3"
                            />
                    </Storyboard>
                </BeginStoryboard>
            </EventTrigger.Actions>
        </EventTrigger>
    </Window.Triggers>

    <Grid>
        <StackPanel
            x:Name="ClockOutsideWindow"
            Orientation="Horizontal"
            HorizontalAlignment="Left"
            VerticalAlignment="Top"
            Margin="3,2"
            >

            <!-- Current time -->
            <Grid
                Background="Transparent"
                IsHitTestVisible="True"
                >

                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="30" />
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="30" />
                </Grid.ColumnDefinitions>

                <TextBlock
                    x:Name="CurrentTimeMinutes"
                    Grid.Column="0"
                    Style="{StaticResource StyleTextTime}"
                    HorizontalAlignment="Right"
                    VerticalAlignment="Center"
                    Text="00"
                    />
                <TextBlock
                    x:Name="CurrentTimeSeparator"
                    Grid.Column="1"
                    Style="{StaticResource StyleTextTime}"
                    HorizontalAlignment="Center"
                    VerticalAlignment="Center"
                    Text=":"
                    />
                <TextBlock
                    x:Name="CurrentTimeSeconds"
                    Grid.Column="2"
                    Style="{StaticResource StyleTextTime}"
                    HorizontalAlignment="Left"
                    VerticalAlignment="Center"
                    Text="00"
                    />

                <!--<Border
                    x:Name="PeriodCompletedIndicatorEl"
                    Grid.Column="0"
                    Grid.ColumnSpan="3"
                    Height="4"
                    VerticalAlignment="Bottom"
                    HorizontalAlignment="Stretch"
                    Background="{Binding AccentColor}"
                    Visibility="Collapsed"
                    />-->
            </Grid>

            <StackPanel
                Height="12"
                ToolTip="Current period"
                Orientation="Horizontal"
                HorizontalAlignment="Right"
                VerticalAlignment="Bottom"
                Margin="0,0,0,6"
                >

                <!-- Session icon -->
                <TextBlock
                    x:Name="SessionIcon"
                    Style="{StaticResource StyleTextIconPeriod}"
                    VerticalAlignment="Center"
                    HorizontalAlignment="Right"
                    TextAlignment="Right"
                    Text="{Binding CurrentPeriodIcon}"
                    Margin="0,0,0,0"
                    />

                <!-- Session counter -->
                <TextBlock
                    x:Name="SessionCounter"
                    Style="{StaticResource StyleTextPeriodNumber}"
                    VerticalAlignment="Center"
                    HorizontalAlignment="Right"
                    TextAlignment="Right"
                    Text="{Binding CurrentPomodoroPeriod}"
                    Visibility="{Binding CurrentPomodoroPeriod, Converter={StaticResource VisibilityConverter}}"
                    Margin="4,0,0,0"
                    />
            </StackPanel>

            <Ellipse
                x:Name="PeriodCompletedIndicatorEl"
                Height="10"
                Width="10"
                VerticalAlignment="Bottom"
                Fill="{Binding AccentColor}"
                Visibility="Hidden"
                Margin="5,0,0,6"
                />
        </StackPanel>

        <Grid
            x:Name="WindowContentPanel"
            Opacity="1"
            Margin="0"
            >
            
            <Grid.Effect>
                <DropShadowEffect
                    ShadowDepth="10"
                    Direction="270"
                    Color="{Binding WindowShadowColor}"
                    Opacity="{Binding WindowShadowOpacity}"
                    BlurRadius="30"
                    />
            </Grid.Effect>
            
            <Border
                x:Name="BackgroundBorder"
                Grid.RowSpan="3"
                Background="{Binding WindowBackgroundColor}"
                CornerRadius="4"
                />

            <!-- System buttons -->
            <StackPanel
                x:Name="ButtonsPanel"
                Orientation="Horizontal"
                HorizontalAlignment="Right"
                VerticalAlignment="Top"
                Margin="10"
                >

                <!-- Settings button -->
                <Button
                    x:Name="ButtonSettings"
                    Content=""
                    ToolTip="{Binding Source={StaticResource LocalizedStrings}, Path=GeneralResources.app_button_settings}"
                    Command="{Binding ViewModel.ShowSettingsCommand}"
                    Style="{StaticResource StyleButtonIcon}"
                    />

                <!--
                    Minimize button
                    PADDING here is compensating the FontAwesome's typography - thanks to it the icon
                    is vertically centered to an ellipse
                -->
                <Button
                    x:Name="ButtonMinimize"
                    Content=""
                    ToolTip="{Binding Source={StaticResource LocalizedStrings}, Path=GeneralResources.app_button_window_minimize}"
                    Click="Minimize_OnClick"
                    Style="{StaticResource StyleButtonIcon}"
                    Padding="4,3,4,3"
                    />

                <!-- Close button -->
                <Button
                    x:Name="ButtonExit"
                    Content=""
                    ToolTip="{Binding Source={StaticResource LocalizedStrings}, Path=GeneralResources.app_button_window_close}"
                    Click="ButtonExit_OnClick"
                    Style="{StaticResource StyleButtonIcon}"
                    />

            </StackPanel>

            <!-- Session description -->
            <StackPanel
                Margin="32,40,32,48"
                VerticalAlignment="Center"
                >

                <TextBlock
                    Style="{StaticResource StyleTextPeriodText}"
                    VerticalAlignment="Center"
                    HorizontalAlignment="Center"
                    TextAlignment="Center"
                    Text="{Binding CurrentPeriodText, FallbackValue=Keep focused!}"
                    TextWrapping="Wrap"
                    />

                <TextBlock
                    Style="{StaticResource StyleTextPeriodSource}"
                    VerticalAlignment="Center"
                    HorizontalAlignment="Center"
                    TextAlignment="Center"
                    Text="{Binding CurrentPeriodTextSource}"
                    TextWrapping="Wrap"
                    Visibility="{Binding CurrentPeriodTextSource, Converter={StaticResource VisibilityConverter}}"
                    />
            </StackPanel>

            <Border
                x:Name="ControlsPanel"
                Grid.Row="2"
                Background="{Binding WindowBackground2Color}"
                VerticalAlignment="Bottom"
                CornerRadius="0,0,4,4"
                >

                <!-- Controls buttons -->
                <StackPanel
                    Orientation="Horizontal"
                    HorizontalAlignment="Center"
                    Margin="32,-2,32,0"
                    >

                    <!-- Stop button -->
                    <Button
                        x:Name="ButtonStop"
                        Content=""
                        ToolTip="{Binding Source={StaticResource LocalizedStrings}, Path=GeneralResources.app_button_stop_title}"
                        Command="{Binding ViewModel.StopCommand}"
                        Style="{StaticResource StyleButtonIconControl}"
                        Visibility="{Binding CanStop, Converter={StaticResource VisibilityConverter}}"
                        />


                    <!-- Play button -->
                    <Button
                        x:Name="ButtonPause"
                        Content=""
                        ToolTip="{Binding Source={StaticResource LocalizedStrings}, Path=GeneralResources.app_button_pause_title}"
                        Command="{Binding ViewModel.PauseCommand}"
                        Style="{StaticResource StyleButtonIconControl}"
                        Visibility="{Binding CanPause, Converter={StaticResource VisibilityConverter}}"
                        />

                    <!-- Play button -->
                    <Button
                        x:Name="ButtonStart"
                        Content=""
                        ToolTip="{Binding Source={StaticResource LocalizedStrings}, Path=GeneralResources.app_button_start_title}"
                        Command="{Binding ViewModel.StartCommand}"
                        Style="{StaticResource StyleButtonIconControl}"
                        Visibility="{Binding CanStart, Converter={StaticResource VisibilityConverter}}"
                        />
            
                </StackPanel>
            </Border>

            <StackPanel
                x:Name="ClockInsideWindow"
                Orientation="Horizontal"
                HorizontalAlignment="Left"
                VerticalAlignment="Top"
                Margin="3,2"
                >

                <!-- Current time -->
                <Grid
                    Background="Transparent"
                    IsHitTestVisible="True"
                    >

                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="30" />
                        <ColumnDefinition Width="Auto" />
                        <ColumnDefinition Width="30" />
                    </Grid.ColumnDefinitions>

                    <TextBlock
                        x:Name="CurrentTimeMinutesInsideWindow"
                        Grid.Column="0"
                        Style="{StaticResource StyleTextTimeInside}"
                        HorizontalAlignment="Right"
                        VerticalAlignment="Center"
                        Text="00"
                        />
                    <TextBlock
                        Grid.Column="1"
                        Style="{StaticResource StyleTextTimeInside}"
                        HorizontalAlignment="Center"
                        VerticalAlignment="Center"
                        Text=":"
                        />
                    <TextBlock
                        x:Name="CurrentTimeSecondsInsideWindow"
                        Grid.Column="2"
                        Style="{StaticResource StyleTextTimeInside}"
                        HorizontalAlignment="Left"
                        VerticalAlignment="Center"
                        Text="00"
                        />

                    <!--<Border
                        x:Name="PeriodCompletedIndicatorInsideWindowEl"
                        Grid.Column="0"
                        Grid.ColumnSpan="3"
                        Height="4"
                        VerticalAlignment="Bottom"
                        HorizontalAlignment="Stretch"
                        Background="{Binding AccentColor}"
                        Visibility="Collapsed"
                        />-->
                </Grid>

                <StackPanel
                    Height="12"
                    ToolTip="Current period"
                    Orientation="Horizontal"
                    HorizontalAlignment="Right"
                    VerticalAlignment="Bottom"
                    Margin="0,0,0,6"
                    >

                    <!-- Session icon -->
                    <TextBlock
                        x:Name="SessionIconInside"
                        Style="{StaticResource StyleTextIconPeriodInside}"
                        VerticalAlignment="Center"
                        HorizontalAlignment="Right"
                        TextAlignment="Right"
                        Text="{Binding CurrentPeriodIcon}"
                        Margin="0,0,0,0"
                        />

                    <!-- Session counter -->
                    <TextBlock
                        x:Name="SessionCounterInside"
                        Style="{StaticResource StyleTextPeriodNumberInside}"
                        VerticalAlignment="Center"
                        HorizontalAlignment="Right"
                        TextAlignment="Right"
                        Text="{Binding ViewModel.Engine.Counter}"
                        Visibility="{Binding CurrentPomodoroPeriod, Converter={StaticResource VisibilityConverter}}"
                        Margin="4,0,0,0"
                        />
                </StackPanel>

                <Ellipse
                    x:Name="PeriodCompletedIndicatorInsideWindowEl"
                    Height="10"
                    Width="10"
                    VerticalAlignment="Bottom"
                    Fill="{Binding AccentColor}"
                    Visibility="Hidden"
                    Margin="5,0,0,7"
                    />
            </StackPanel>
        </Grid>
    </Grid>
</shared:AbstractWindow>








```

`\\?\C:\Dev\Projects\YAPA-2-modern\YAPA.WPF.MotivationalTheme\MainWindow.xaml.cs`:

```cs
﻿using System;
using System.ComponentModel;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Animation;
using YAPA.Shared;
using YAPA.Shared.Common;
using YAPA.Shared.Contracts;
using WindowState = System.Windows.WindowState;


namespace Motivational
{
    public partial class MainWindow : AbstractWindow, INotifyPropertyChanged
    {
        private readonly MotivationalThemeSettings _settings;
        private readonly PomodoroEngineSettings _baseSettings;
        private readonly IPomodoroRepository _pomodoroRepository;
        private readonly ISettings _globalSettings;


        public MainWindow(IMainViewModel viewModel, MotivationalThemeSettings settings, PomodoroEngineSettings baseSettings, IPomodoroRepository pomodoroRepository, ISettings globalSettings) :base(viewModel)
        {
            ViewModel = viewModel;
            _settings = settings;
            _baseSettings = baseSettings;
            _pomodoroRepository = pomodoroRepository;
            _globalSettings = globalSettings;
            InitializeComponent();
            globalSettings.PropertyChanged += _globalSettings_PropertyChanged;

            DataContext = this;

            // Initialize Pomodoro session
            ResetPomodoroPeriod();

            ViewModel.Engine.PropertyChanged += Engine_PropertyChanged;
            ViewModel.Engine.OnPomodoroCompleted += Engine_OnPomodoroCompleted;
            ViewModel.Engine.OnStarted += EngineOnOnStarted;

            UpdateCompletedPomodoroCount();

            UpdateTime();
        }

        private void EngineOnOnStarted()
        {
            if (CurrentPomodoroPeriod > 0)
                HidePeriodCompletedIndicator();

            CurrentQuote = null; // Reset quote
        }

        private void _globalSettings_PropertyChanged(object sender, PropertyChangedEventArgs e)
        {
            if (e.PropertyName.StartsWith("Motivational"))
            {
                RaisePropertyChanged(nameof(_settings.UseWhiteText));
                RaisePropertyChanged(nameof(TimerForegroundColor));
                RaisePropertyChanged(nameof(TimerShadowColor));
                RaisePropertyChanged(nameof(WindowBackgroundColor));
                RaisePropertyChanged(nameof(WindowBackground2Color));
                RaisePropertyChanged(nameof(WindowShadowColor));
                RaisePropertyChanged(nameof(WindowShadowOpacity));
                RaisePropertyChanged(nameof(WindowForegroundColor));

            }
        }

        private void UpdateTime()
        {
            var min = CurrentTimeValue / 60;
            var sec = CurrentTimeValue % 60;

            CurrentTimeMinutesText = String.Format("{0:00}", min);
            CurrentTimeSecondsText = String.Format("{0:00}", sec);
        }

        private async void UpdateCompletedPomodoroCount()
        {
            await Task.Run(() =>
            {
                CurrentPomodoroPeriod = _pomodoroRepository.CompletedToday();
                RaisePropertyChanged(nameof(CurrentPomodoroPeriod));
            });
        }

        private void Engine_OnPomodoroCompleted()
        {
            CurrentPomodoroPeriod++;
            RaisePropertyChanged(nameof(CurrentPomodoroPeriod));

            DoCompletePeriod();
        }

        private void Engine_PropertyChanged(object sender, PropertyChangedEventArgs e)
        {
            if (e.PropertyName == nameof(ViewModel.Engine.Elapsed) || e.PropertyName == nameof(ViewModel.Engine.DisplayValue))
            {
                RaisePropertyChanged(nameof(CurrentTimeValue));
                RaisePropertyChanged(nameof(ProgressValue));
                UpdateTime();
            }
            else if (e.PropertyName == nameof(ViewModel.Engine.Phase))
            {
                RaisePropertyChanged(nameof(ProgressState));
                NotifyPeriodChanged();
            }
        }

        public double ProgressValue
        {
            get
            {
                var elapsed = ViewModel.Engine.Elapsed;
                var progress = 0d;
                switch (ViewModel.Engine.Phase)
                {
                    case PomodoroPhase.WorkEnded:
                    case PomodoroPhase.Work:
                        progress = (double)elapsed / (ViewModel.Engine.WorkTime);
                        break;
                    case PomodoroPhase.Break:
                    case PomodoroPhase.BreakEnded:
                        progress = (double)elapsed / (ViewModel.Engine.BreakTime);
                        break;
                }
                return progress;
            }
        }


        public string ProgressState
        {
            get
            {
                var progressState = "";
                switch (ViewModel.Engine.Phase)
                {
                    case PomodoroPhase.NotStarted:
                        break;
                    case PomodoroPhase.Work:
                        progressState = "Normal";
                        break;
                    case PomodoroPhase.Break:
                        progressState = "Paused";
                        break;
                    case PomodoroPhase.WorkEnded:
                    case PomodoroPhase.BreakEnded:
                        progressState = "Error";
                        break;
                }
                return progressState;
            }
        }

        public int CurrentTimeValue => ViewModel.Engine.DisplayValue;

        private void DoCompletePeriod()
        {
            CurrentTimeMinutesText = "00";
            CurrentTimeSecondsText = "00";

            ShowPeriodCompletedIndicator();
        }

        public int CurrentPomodoroPeriod { get; set; }


        /// <summary>
        /// Reset Pomodoro period
        /// </summary>
        private void ResetPomodoroPeriod()
        {
            CurrentTimeMinutesText = "00";
            CurrentTimeSecondsText = "00";
        }

        /// <summary>
        /// Period completed indicator animation instance
        /// </summary>
        private Storyboard _periodCompletedAnimationStoryboard = null;
        private Storyboard PeriodCompletedIndicator
        {
            get
            {
                if (null == _periodCompletedAnimationStoryboard)
                    _periodCompletedAnimationStoryboard = TryFindResource("PeriodCompletedIndicatorStoryboard") as Storyboard;

                return _periodCompletedAnimationStoryboard;
            }
        }

        private void ShowPeriodCompletedIndicator()
        {
            PeriodCompletedIndicator?.Begin();
        }

        /// <summary>
        /// Hide completed indicator
        /// </summary>
        private void HidePeriodCompletedIndicator()
        {
            PeriodCompletedIndicator?.Stop();
        }

        /// <summary>
        /// Notifies UI about changed period
        /// </summary>
        private void NotifyPeriodChanged()
        {
            RaisePropertyChanged("CurrentPomodoroPeriod");
            RaisePropertyChanged("CurrentPeriodText");
            RaisePropertyChanged("CurrentPeriodTextSource");
            RaisePropertyChanged("CurrentPeriodIcon");
            RaisePropertyChanged("ProgressState");
            RaisePropertyChanged("CanStop");
            RaisePropertyChanged("CanStart");
            RaisePropertyChanged("CanPause");
        }

        public bool CanStart => ViewModel.StartCommand.CanExecute(null);
        public bool CanStop => ViewModel.StopCommand.CanExecute(null);
        public bool CanPause => ViewModel.PauseCommand.CanExecute(null);


        /// <summary>
        /// Are we using light theme currently?
        /// </summary>
        public bool UseLightTheme => _settings.UseWhiteText;

        #region UI binded properties

        public SolidColorBrush AccentColor => Utils.HexToBrush("#FF0080");

        public double TimerForegroundOpacity => 0.3;

        public double TimerShadowOpacity => 0.6;

        public SolidColorBrush TimerForegroundColor => UseLightTheme ? Utils.HexToBrush(Const.COLOR_LIGHT_TIMER_FOREGROUND) : Utils.HexToBrush(Const.COLOR_DARK_TIMER_FOREGROUND);

        public Color TimerShadowColor => UseLightTheme ? Utils.HexToColor(Const.COLOR_LIGHT_TIMER_SHADOW) : Utils.HexToColor(Const.COLOR_DARK_TIMER_SHADOW);

        public SolidColorBrush WindowBackgroundColor => UseLightTheme ? Utils.HexToBrush(Const.COLOR_LIGHT_WINDOW_BACKGROUND) : Utils.HexToBrush(Const.COLOR_DARK_WINDOW_BACKGROUND);

        public SolidColorBrush WindowBackground2Color => UseLightTheme ? Utils.HexToBrush(Const.COLOR_LIGHT_WINDOW_BACKGROUND2) : Utils.HexToBrush(Const.COLOR_DARK_WINDOW_BACKGROUND2);

        public SolidColorBrush WindowForegroundColor => UseLightTheme ? Utils.HexToBrush(Const.COLOR_LIGHT_WINDOW_FOREGROUND) : Utils.HexToBrush(Const.COLOR_DARK_WINDOW_FOREGROUND);

        public Color WindowShadowColor => UseLightTheme ? Utils.HexToColor(Const.COLOR_LIGHT_WINDOW_SHADOW) : Utils.HexToColor(Const.COLOR_DARK_WINDOW_SHADOW);

        public double WindowShadowOpacity => UseLightTheme ? Const.COLOR_LIGHT_WINDOW_SHADOW_OPACITY : Const.COLOR_DARK_WINDOW_SHADOW_OPACITY;

        #endregion

        public int WorkTime => _baseSettings.WorkTime;

        public int BreakTime => _baseSettings.BreakTime;

        public int LongBreakTime => _baseSettings.LongBreakTime;

        public bool CountBackwards => _baseSettings.CountBackwards;

        public string CurrentTimeMinutesText
        {
            set
            {
                CurrentTimeMinutes.Text = value;
                CurrentTimeMinutesInsideWindow.Text = value;
            }
        }

        public string CurrentTimeSecondsText
        {
            set
            {
                CurrentTimeSeconds.Text = value;
                CurrentTimeSecondsInsideWindow.Text = value;
            }
        }

        /// <summary>
        /// Current quote text
        /// </summary>
        private Quote _currentQuote = null;
        public Quote CurrentQuote
        {
            get
            {
                if (null == _currentQuote)
                {
                    _currentQuote = Quotes.GetRandomQuote();
                }

                return _currentQuote;
            }
            set
            {
                _currentQuote = value;
            }
        }

        /// <summary>
        /// Current period motivation text
        /// </summary>
        public string CurrentPeriodText
        {
            get
            {
                switch (ViewModel.Engine.Phase)
                {
                    case PomodoroPhase.NotStarted:
                        return Localizations.General.app_period_press_play_to_start;
                    case PomodoroPhase.BreakEnded:
                        return Localizations.General.app_period_motivation_start_pomodoro;
                    case PomodoroPhase.WorkEnded:

                    case PomodoroPhase.Work:
                        return (!string.IsNullOrWhiteSpace(CurrentQuote.Text) ? CurrentQuote.Text : Localizations.General.app_period_pomodoro_caption_default);

                    case PomodoroPhase.Break:
                        if (ViewModel.Engine.Index == 4)
                            return String.Format(Localizations.General.app_period_long_break_caption, LongBreakTime);

                        return String.Format(Localizations.General.app_period_short_break_caption, BreakTime);
                    default:
                        return Localizations.General.app_period_motivation_start_pomodoro;
                }
            }
        }

        /// <summary>
        /// Motivation text source
        /// </summary>
        public string CurrentPeriodTextSource
        {
            get
            {
                if (ViewModel.Engine.Phase == PomodoroPhase.Work)
                    return (!string.IsNullOrWhiteSpace(CurrentQuote.Source) ? CurrentQuote.Source : string.Empty);

                return string.Empty;
            }
        }

        public string CurrentPeriodIcon
        {
            get
            {
                switch (ViewModel.Engine.Phase)
                {
                    case PomodoroPhase.Work:
                    case PomodoroPhase.WorkEnded:
                        return Const.ICON_PERIOD_POMODORO;
                    case PomodoroPhase.BreakEnded:
                    case PomodoroPhase.Break:
                        if (ViewModel.Engine.Index == 4)
                        {
                            return Const.ICON_PERIOD_REST_LONG;
                        }
                        else
                        {
                            return Const.ICON_PERIOD_REST;
                        }


                    default:
                        return Const.ICON_PERIOD_STOPPED;
                }
            }
        }

        private void Minimize_OnClick(object sender, RoutedEventArgs e)
        {
            WindowState = WindowState.Minimized;
        }

        private void MainWindow_MouseLeftButtonDown(object sender, MouseButtonEventArgs e)
        {
            try
            {
                OnMouseLeftButtonDown(e);
                DragMove();
                e.Handled = true;
            }
            catch
            {
            }
        }

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void RaisePropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        private void ButtonExit_OnClick(object sender, RoutedEventArgs e)
        {
            CloseApp();
        }
    }
}

```

`\\?\C:\Dev\Projects\YAPA-2-modern\YAPA.WPF.MotivationalTheme\MotivationalThemeSettingsWindow.xaml`:

```xaml
﻿<UserControl x:Class="Motivational.MotivationalThemeSettingsWindow"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:local="clr-namespace:Motivational"
             mc:Ignorable="d" 
             d:DesignHeight="300" d:DesignWidth="300">
    <Grid>
        <Grid>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto"></ColumnDefinition>
                <ColumnDefinition Width="*"></ColumnDefinition>
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto"></RowDefinition>
            </Grid.RowDefinitions>

            <CheckBox  IsChecked="{Binding UseWhiteText, Mode=TwoWay}" Grid.Column="0" Grid.Row="0">Use white text</CheckBox>

        </Grid>
    </Grid>
</UserControl>


```

`\\?\C:\Dev\Projects\YAPA-2-modern\YAPA.WPF.MotivationalTheme\MotivationalThemeSettingsWindow.xaml.cs`:

```cs
﻿using System.Windows.Controls;

namespace Motivational
{
    public partial class MotivationalThemeSettingsWindow : UserControl
    {
        public MotivationalThemeSettingsWindow(MotivationalThemeSettings settings)
        {
            InitializeComponent();
            DataContext = settings;
        }
    }
}

```

`\\?\C:\Dev\Projects\YAPA-2-modern\YAPA.WPF.MotivationalTheme\MotivationTheme.cs`:

```cs
﻿using System;
using YAPA.Shared.Contracts;

namespace Motivational
{
    public class YapaThemeMeta : IThemeMeta
    {
        public string Title => "Motivational";

        public Type Theme => typeof(MainWindow);

        public Type Settings => typeof(MotivationalThemeSettings);

        public Type SettingEditWindow => typeof(MotivationalThemeSettingsWindow);
    }

    public class MotivationalThemeSettings : IPluginSettings
    {
        private readonly ISettingsForComponent _settings;

        public double ClockOpacity
        {
            get { return _settings.Get(nameof(ClockOpacity), 0.6); }
            set { _settings.Update(nameof(ClockOpacity), value); }
        }

        public double ShadowOpacity
        {
            get { return _settings.Get(nameof(ShadowOpacity), 0.6); }
            set { _settings.Update(nameof(ShadowOpacity), value); }
        }

        public bool UseWhiteText
        {
            get { return _settings.Get(nameof(UseWhiteText), false); }
            set { _settings.Update(nameof(UseWhiteText), value); }
        }

        public string TextBrush
        {
            get { return _settings.Get(nameof(TextBrush), "White"); }
            set { _settings.Update(nameof(TextBrush), value); }
        }

        public bool DisableFlashingAnimation
        {
            get { return _settings.Get(nameof(DisableFlashingAnimation), false); }
            set { _settings.Update(nameof(DisableFlashingAnimation), value); }
        }


        public MotivationalThemeSettings(ISettings settings)
        {
            _settings = settings.GetSettingsForComponent("MotivationalTheme");
        }

        public void DeferChanges()
        {
            _settings.DeferChanges();
        }
    }

}

```

`\\?\C:\Dev\Projects\YAPA-2-modern\YAPA.WPF.MotivationalTheme\Properties\AssemblyInfo.cs`:

```cs
﻿using System.Reflection;
using System.Resources;
using System.Runtime.InteropServices;
using System.Windows;

// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
[assembly: AssemblyTitle("YAPA")]
[assembly: AssemblyDescription("Yet Another Pomodoro Application")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("YAPA 2")]
[assembly: AssemblyProduct("YAPA")]
[assembly: AssemblyCopyright("Copyright ©  2013")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]

// Setting ComVisible to false makes the types in this assembly not visible 
// to COM components.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type.
[assembly: ComVisible(false)]

//In order to begin building localizable applications, set 
//<UICulture>CultureYouAreCodingWith</UICulture> in your .csproj file
//inside a <PropertyGroup>.  For example, if you are using US english
//in your source files, set the <UICulture> to en-US.  Then uncomment
//the NeutralResourceLanguage attribute below.  Update the "en-US" in
//the line below to match the UICulture setting in the project file.

//[assembly: NeutralResourcesLanguage("en-US", UltimateResourceFallbackLocation.Satellite)]


[assembly: ThemeInfo(
    ResourceDictionaryLocation.None, //where theme specific resource dictionaries are located
    //(used if a resource is not found in the page, 
    // or application resource dictionaries)
    ResourceDictionaryLocation.SourceAssembly //where the generic resource dictionary is located
    //(used if a resource is not found in the page, 
    // app, or any theme specific resource dictionaries)
)]


// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Build and Revision Numbers 
// by using the '*' as shown below:
// [assembly: AssemblyVersion("1.0.*")]
[assembly: AssemblyVersion("1.2.0.0")]
[assembly: AssemblyFileVersion("1.2.0.0")]
[assembly: NeutralResourcesLanguageAttribute("en")]

```

`\\?\C:\Dev\Projects\YAPA-2-modern\YAPA.WPF.MotivationalTheme\Properties\Resources.Designer.cs`:

```cs
﻿//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Motivational.Properties {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Motivational.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
    }
}

```

`\\?\C:\Dev\Projects\YAPA-2-modern\YAPA.WPF.MotivationalTheme\Properties\Resources.resx`:

```resx
﻿<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>
```

`\\?\C:\Dev\Projects\YAPA-2-modern\YAPA.WPF.MotivationalTheme\Properties\Settings.Designer.cs`:

```cs
﻿//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Motivational.Properties {
    
    
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.Editors.SettingsDesigner.SettingsSingleFileGenerator", "17.3.0.0")]
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        private static Settings defaultInstance = ((Settings)(global::System.Configuration.ApplicationSettingsBase.Synchronized(new Settings())));
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("25")]
        public int PeriodWork {
            get {
                return ((int)(this["PeriodWork"]));
            }
            set {
                this["PeriodWork"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("5")]
        public int PeriodShortBreak {
            get {
                return ((int)(this["PeriodShortBreak"]));
            }
            set {
                this["PeriodShortBreak"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("15")]
        public int PeriodLongBreak {
            get {
                return ((int)(this["PeriodLongBreak"]));
            }
            set {
                this["PeriodLongBreak"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("True")]
        public bool UseLightTheme {
            get {
                return ((bool)(this["UseLightTheme"]));
            }
            set {
                this["UseLightTheme"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("False")]
        public bool CountBackwards {
            get {
                return ((bool)(this["CountBackwards"]));
            }
            set {
                this["CountBackwards"] = value;
            }
        }
    }
}

```

`\\?\C:\Dev\Projects\YAPA-2-modern\YAPA.WPF.MotivationalTheme\Properties\Settings.settings`:

```settings
﻿<?xml version='1.0' encoding='utf-8'?>
<SettingsFile xmlns="http://schemas.microsoft.com/VisualStudio/2004/01/settings" CurrentProfile="(Default)" GeneratedClassNamespace="YAPA.Properties" GeneratedClassName="Settings">
  <Profiles />
  <Settings>
    <Setting Name="PeriodWork" Type="System.Int32" Scope="User">
      <Value Profile="(Default)">25</Value>
    </Setting>
    <Setting Name="PeriodShortBreak" Type="System.Int32" Scope="User">
      <Value Profile="(Default)">5</Value>
    </Setting>
    <Setting Name="PeriodLongBreak" Type="System.Int32" Scope="User">
      <Value Profile="(Default)">15</Value>
    </Setting>
    <Setting Name="UseLightTheme" Type="System.Boolean" Scope="User">
      <Value Profile="(Default)">True</Value>
    </Setting>
    <Setting Name="CountBackwards" Type="System.Boolean" Scope="User">
      <Value Profile="(Default)">False</Value>
    </Setting>
  </Settings>
</SettingsFile>
```

`\\?\C:\Dev\Projects\YAPA-2-modern\YAPA.WPF.MotivationalTheme\Quotes.cs`:

```cs
﻿using System;

namespace Motivational
{
    public class Quote
    {
        public string Text { get; set; }
        public string Source { get; set; }
    }

    public class Quotes
    {
        #region Quotes

        private readonly string[,] QUOTES =
        {
            {"Yesterday, you said tomorrow.", string.Empty},
            {"Don't compare your beginning to someone else's middle.", string.Empty},
            {"The wisest mind has something yet to learn.", string.Empty},
            {"Be the change you wish to see in the world.", "Gandhi"},
            {"When you're going through hell, keep going.", "Winston Churchill"},
            {"Don't let perfection become procrastination. Do it now.", string.Empty},
            {"Launch and learn. Everything is progress.", string.Empty},
            {"A year from now you will wish you had started today.", "Karen Lamb"},
            {"Failure is success if you learn from it.", string.Empty},
            {"If you don't like where you are, change it.", string.Empty},
            {"If it ain't fun, don't do it.", string.Empty},
            {"A wet man does not fear the rain.", string.Empty},
            {"Stay hungry; stay foolish.", string.Empty},
            {"No one saves us but ourselves. No one can and no one may. We ourselves must walk the path.", "Buddha"},
            {"Never give up. Never let things out of your control dictate who you are.", string.Empty},
            {"Be kind; everyone you meet is fighting a hard battle.", string.Empty},
            {"Impossible is just a big word thrown around by small men who find it easier to live in the world they've been given than to explore the power they have to change it.", string.Empty},
            {"People who are unable to motivate themselves must be content with mediocrity no matter how impressive their other talents.", "Andrew Carnegie"},
            {"Progress is impossible without change, and those who cannot change their minds cannot change anything.", string.Empty},
            {"Do more of what makes you happy.", string.Empty},
            {"Do a little more of what you want to do every day, until your idea becomes what's real.", string.Empty},
            {"You got this. Make it happen.", string.Empty},
            {"Don't blame others as an excuse for your not working hard enough.", string.Empty},
            {"Care about what other people think and you will always be their prisoner.", "Lao Tzu"},
            {"To escape criticism: do nothing, say nothing, be nothing.", string.Empty},
            {"The world is moving so fast that the man who says it can't be done is generally interrupted by someone doing it.", "Elbert Hubbard"},
            {"Be who you are and say what you feel, because those who mind don't matter and those who matter don't mind.", "Elbert Hubbard"},
            {"One day you will wake up and there won't be any more time to do the things you've always wanted. Do it now.", "Paulo Coelho"},
            {"Never waste a minute thinking about people you don't like.", "Dwight Eisenhower"},
            {"Never let your fear decide your fate.", string.Empty},
            {"Keep moving forward. One step at a time.", string.Empty},
            {"Life is simple. Are you happy? Yes? Keep going. No? Change something.", string.Empty},
            {"The journey of a thousand miles begins with a single step.", string.Empty},
            {"First they ignore you, then they laugh at you, then they fight you, then you win.", " Gandhi"},
            {"A man is but the product of his thoughts. What he thinks, he becomes.", "Gandhi"},
            {"Live as if you were to die tomorrow. Learn as if you were to live forever.", "Gandhi"},
            {"The future depends on what we do in the present.", "Gandhi"},
            {"I am strong because I've been weak. I am fearless because I've been afraid. I am wise, because I've been foolish.", string.Empty},
            {"Believe in yourself.", string.Empty},
            {"Lower the cost of failure.", string.Empty},
            {"Keep your goals away from the trolls.", string.Empty},
            {"Respect yourself enough to walk away from anything that no longer serves you, grows you, or makes you happy.", "Robert Tew"},
            {"Everything around you that you call life was made up by people, and you can change it.", string.Empty},
            {"In times of change, learners inherit the earth, while the learned find themselves beautifully equipped to deal with a world that no longer exists.", "Eric Hoffer"},
            {"If you fear failure, you will never go anywhere.", string.Empty},
            {"Go ahead, let them judge you.", string.Empty},
            {"The world breaks everyone and afterward many are strong at the broken places.", string.Empty},
            {"The only disability in life is a bad attitude.", string.Empty},
            {"If most of us are ashamed of shabby clothes and shoddy furniture, let us be more ashamed of shabby ideas and shoddy philosophies.", "Einstein"},
            {"It is no measure of health to be well adjusted to a profoundly sick society.", "Krishnamurti"},
            {"Think lightly of yourself and deeply of the world.", "Miyamoto Musashi"},
            {"Dude, suckin' at something is the first step to being sorta good at something.", string.Empty},
            {"As you think, so shall you become.", string.Empty},
            {"Do not wish for an easy life. Wish for the strength to endure a difficult one.", "Bruce Lee"},
            {"Showing off is the fool's idea of glory.", "Bruce Lee"},
            {"Use only that which works, and take it from any place you can find it.", "Bruce Lee"},
            {"I'm not in this world to live up to your expectations and you're not in this world to live up to mine.", "Bruce Lee"},
            {"If you spend too much time thinking about a thing, you'll never get it done.", "Bruce Lee"},
            {"Knowing is not enough, we must apply. Willing is not enough, we must do.", "Bruce Lee"},
            {"Empty your cup so that it may be filled; become devoid to gain totality.", "Bruce Lee"},
            {"It's not the daily increase but daily decrease. Hack away at the unessential.", "Bruce Lee"},
            {"Be yourself. Everyone else is already taken.", "Oscar Wilde"},
            {"Darkness cannot drive out darkness; only light can do that. Hate cannot drive out hate; only love can do that.", "MLK Jr."},
            {"Yesterday is history; tomorrow is a mystery. Today is a gift, which is why we call it the present.", "Bil Keane"},
            {"Imagination is more important than knowledge. Knowledge is limited. Imagination encircles the world.", "Einstein"},
            {"I have not failed. I've just found 10,000 ways that won't work.", "Thomas Edison"},
            {"When I let go of what I am, I become what I might be.", string.Empty},
            {"It is never too late to be what you might have been.", "George Eliot"},
            {"Always be yourself, express yourself, have faith in yourself. Do not go out and look for a successful personality and duplicate it.", "Bruce Lee"},
            {"When you are content to be simply yourself and don't compare or compete, everyone will respect you.", "Lao Tzu"},
            {"If you want to awaken all of humanity, awaken all of yourself.", "Lao Tzu"},
            {"Don't regret anything you do, because in the end it makes you who you are.", string.Empty},
            {"Tension is who you think you should be. Relaxation is who you are.", string.Empty},
            {"You are confined only by the walls you build yourself.", string.Empty},
            {"Unless you try to do something beyond what you have already mastered you will never grow.", "Ralph Waldo Emerson"},
            {"Don't think about what might go wrong, think about what could be right.", string.Empty},
            {"What the caterpillar calls the end, the rest of the world calls a butterfly.", "Lao Tzu"},
            {"To be beautiful means to be yourself. You don't need to be accepted by others. You need to be yourself.", "Thich Nhat Hanh"},
            {"Let go of those who bring you down and surround yourself with those who bring out the best in you.", string.Empty},
            {"Don't let small minds convince you that your dreams are too big.", string.Empty},
            {"If you don't like something, change it. If you can't change it, change your attitude. Don't complain.", "Mary Angelou"},
            {"You can't climb the ladder of success with your hands in your pockets.", "Arnold Schwarzenegger"},
            {"You can feel sore tomorrow or you can feel sorry tomorrow. You choose.", string.Empty},
            {"It is more important to know where you are going than to get there quickly. Do not mistake activity for achievement.", "Isocrates"},
            {"There are seven days in the week and someday isn't one of them.", string.Empty},
            {"Start where you are. Use what you can. Do what you can.", "Arthur Ashe"},
            {"Dreams don't work unless you do.", string.Empty},
            {"When you wake up in the morning you have two choices: go back to sleep, or wake up and chase those dreams.", string.Empty},
            {"Everybody comes to a point in their life when they want to quit, but it's what you do at that moment that determines who you are.", string.Empty},
            {"This is your life. Do what you love, and do it often.", string.Empty},
            {"Live your dream, and wear your passion.", string.Empty},
            {"Today I will do what others won't, so tomorrow I can do what others can't.", string.Empty},
            {"The biggest room in the world is room for improvement.", string.Empty},
            {"If people aren't laughing at your dreams, your dreams aren't big enough.", string.Empty},
            {"Never look back unless you are planning to go that way.", string.Empty},
            {"Every dream begins with a dreamer. Always remember, you have within you the strength, the patience, and the passion to reach for the stars to change the world.", string.Empty},
            {"You are awesome.", string.Empty},
            {"Simplicity is the ultimate sophistication.", string.Empty},
            {"Anyone who stops learning is old.", "Henry Ford"},
            {"The cure to boredom is curiosity.", string.Empty},
            {"Never give up on a dream just because of the time it will take to accomplish it. The time will pass anyway.", string.Empty},
            {"It's time to start living the life you've only imagined.", string.Empty},
            {"You don't have to live your life the way other people expect you to.", string.Empty},
            {"The trouble with not having a goal is that you can spend your life running up and down the field and never score.", string.Empty},
            {"To be yourself in a world that is constantly trying to make you something else is the greatest accomplishment.", string.Empty},
            {"Incredible change happens in your life when you decide to take control of what you do have power over instead of craving control over what you don't.", string.Empty},
            {"Do more with less.", string.Empty},
            {"Overthinking ruins you. Ruins the situation, twists it around, makes you worry and just makes everything much worse than it actually is.", string.Empty},
            {"Replace fear of the unknown with curiosity.", string.Empty},
            {"The surest way to find your dream job is to create it.", string.Empty},
            {"What you do today is important because you are exchanging a day of your life for it.", string.Empty},
            {"One man or woman with courage is a majority.", string.Empty},
            {"Do one thing every day that scares you.", "Eleanor Roosevelt"},
            {"Failure is simply the opportunity to begin again, this time more intelligently.", "Henry Ford"},
            {"Don't just wait for inspiration. Become it.", string.Empty},
            {"Don't limit your challenges", "challenge your limits."},
            {"When you judge others, you do not define them; you define yourself.", "Wayne Dyer"},
            {"Time you enjoy wasting is not wasted time.", string.Empty},
            {"Do small things with great love.", "Mother Teresa"},
            {"Go forth and make awesomeness.", string.Empty},
            {"Your big opportunity may be right where you are now.", "Napoleon Hill"},
            {"Life begins at the end of your comfort zone.", string.Empty},
            {"Excuses are born out of fear. Eliminate your fear and there will be no excuses.", string.Empty},
            {"Happiness is not the absence of problems, it's the ability to deal with them.", string.Empty},
            {"The problem is not the problem. The problem is your attitude about the problem.", string.Empty},
            {"You don't have to be great to start, but you have to start to be great.", string.Empty},
            {"Cherish your visions and your dreams as they are the children of your soul, the blueprints of your ultimate achievements.", string.Empty},
            {"Decide that you want it more than you are afraid of it.", string.Empty},
            {"Adventure may hurt you, but monotony will kill you.", string.Empty},
            {"Obsessed is a word that the lazy use to describe the dedicated.", string.Empty},
            {"If they can do it, so can you.", string.Empty},
            {"Success isn't about being the best. It's about always getting better.", "Behance 99U"},
            {"Success is the ability to go from failure to failure without losing your enthusiasm.", "Winston Churchill"},
            {"A pessimist sees the difficulty in every opportunity; an optimist sees the opportunity in every difficulty.", "Winston Churchill"},
            {"Failure is just practice for success.", string.Empty},
            {"Shipping beats perfection.", string.Empty},
            {"Failure is simply the opportunity to begin again. This time more intelligently.", "Henry Ford"},
            {"While we are postponing, life speeds by.", "Seneca"},
            {"It always seems impossible until it's done.", "Nelson Mandela"},
            {"Don't let the mistakes and disappointments of the past control and direct your future.", "Zig Ziglar"},
            {"It's not about where your starting point is, but your end goal and the journey that will get you there.", string.Empty},
            {"Waste no more time arguing about what a good person should be. Be one.", "Marcus Aurelius"},
            {"Life shrinks of expands in proportion to one's courage.", "Anais Nin"},
            {"Absorb what is useful. Discard what is not. Add what is uniquely your own.", "Bruce Lee"},
            {"Don't find fault. Find a remedy.", "Henry Ford"},
            {"Doubt kills more dreams than failure ever will.", "Karim Seddiki"},
            {"Don't let someone who gave up on their dreams talk you out of going after yours.", "Zig Ziglar"},
        };

        #endregion

        /// <summary>
        /// Singleton
        /// </summary>
        private static Quotes _instance;
        private Quotes() { }

        public static Quotes Instance
        {
            get
            {
                if (null == _instance)
                {
                    _instance = new Quotes();
                }

                return _instance;
            }
        }

        /// <summary>
        /// Global random generator instance
        /// </summary>
        public static Random RandomGenerator = new Random();

        public static Quote GetRandomQuote()
        {
            // Get random item record
            int quoteNumber = RandomGenerator.Next((int)(Instance.QUOTES.Length / 2)); // It needs to be modded by 2 since it is two-dimensional array

            // Return random quote
            return new Quote()
            {
                Text = Instance.QUOTES[quoteNumber, 0],
                Source = Instance.QUOTES[quoteNumber, 1],
            };
        }
    }
}

```

`\\?\C:\Dev\Projects\YAPA-2-modern\YAPA.WPF.MotivationalTheme\Utils.cs`:

```cs
﻿using System.Windows.Media;

namespace Motivational
{
    public class Utils
    {
        /// <summary>
        /// Convert HEX to SolidColorBrush
        /// </summary>
        /// <param name="hexValue">Color HEX code</param>
        /// <returns></returns>
        public static SolidColorBrush HexToBrush(string hexValue)
        {
            if (string.IsNullOrWhiteSpace(hexValue))
                return null;

            return (new BrushConverter().ConvertFrom(hexValue)) as SolidColorBrush;
        }

        /// <summary>
        /// Converts HEX to Color
        /// </summary>
        /// <param name="hexValue">Color HEX code</param>
        /// <returns></returns>
        public static Color HexToColor(string hexValue)
        {
            if (string.IsNullOrWhiteSpace(hexValue))
                return Colors.White;

            return (Color)(new ColorConverter().ConvertFrom(hexValue));
        }


        /// <summary>
        /// Brush to HEX code
        /// </summary>
        /// <param name="brush"></param>
        /// <returns></returns>
        public static string BrushToHex(SolidColorBrush brush)
        {
            if (null == brush)
                return null;

            return brush.Color.ToString();
        }

        /// <summary>
        /// Color to HEX code
        /// </summary>
        /// <param name="color"></param>
        /// <returns></returns>
        public static string ColorToHex(Color color)
        {
            if (null == color)
                return null;

            return color.ToString();
        }
    }
}

```

`\\?\C:\Dev\Projects\YAPA-2-modern\YAPA.WPF.MotivationalTheme\YAPA.WPF.Themes.Motivational.csproj`:

```csproj
﻿<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="12.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <Import Project="$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props" Condition="Exists('$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props')" />
  <PropertyGroup>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProjectGuid>{C1FACD37-C92E-4339-9C02-D3A5BE430D02}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>Motivational</RootNamespace>
    <AssemblyName>Motivational</AssemblyName>
    <TargetFrameworkVersion>v4.8</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
    <ProjectTypeGuids>{60dc8134-eba5-43b8-bcc9-bb4bc16c2548};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <WarningLevel>4</WarningLevel>
    <SolutionDir Condition="$(SolutionDir) == '' Or $(SolutionDir) == '*Undefined*'">..\</SolutionDir>
    <RestorePackages>true</RestorePackages>
    <TargetFrameworkProfile />
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|AnyCPU' ">
    <PlatformTarget>AnyCPU</PlatformTarget>
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>..\..\YAPA-2\Debug\Themes\</OutputPath>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|AnyCPU' ">
    <PlatformTarget>AnyCPU</PlatformTarget>
    <DebugType>pdbonly</DebugType>
    <Optimize>true</Optimize>
    <OutputPath>..\Release\Themes\</OutputPath>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <PropertyGroup />
  <PropertyGroup>
    <ApplicationIcon>
    </ApplicationIcon>
  </PropertyGroup>
  <PropertyGroup />
  <PropertyGroup>
    <Win32Resource>
    </Win32Resource>
  </PropertyGroup>
  <PropertyGroup>
    <StartupObject />
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="System" />
    <Reference Include="System.Core" />
    <Reference Include="System.Xaml">
      <RequiredTargetFramework>4.0</RequiredTargetFramework>
    </Reference>
    <Reference Include="WindowsBase" />
    <Reference Include="PresentationCore" />
    <Reference Include="PresentationFramework" />
  </ItemGroup>
  <ItemGroup>
    <Compile Include="Const.cs" />
    <Compile Include="Localizations\General.Designer.cs">
      <AutoGen>True</AutoGen>
      <DesignTime>True</DesignTime>
      <DependentUpon>General.resx</DependentUpon>
    </Compile>
    <Compile Include="LocalizedStrings.cs" />
    <Compile Include="MotivationalThemeSettingsWindow.xaml.cs">
      <DependentUpon>MotivationalThemeSettingsWindow.xaml</DependentUpon>
    </Compile>
    <Compile Include="MotivationTheme.cs" />
    <Compile Include="Quotes.cs" />
    <Compile Include="Utils.cs" />
    <Page Include="App.xaml">
      <Generator>MSBuild:Compile</Generator>
      <SubType>Designer</SubType>
    </Page>
    <Compile Include="Converters\VisibilityConverter.cs" />
    <Page Include="MainWindow.xaml">
      <Generator>MSBuild:Compile</Generator>
      <SubType>Designer</SubType>
    </Page>
    <Compile Include="App.xaml.cs">
      <DependentUpon>App.xaml</DependentUpon>
      <SubType>Code</SubType>
    </Compile>
    <Compile Include="MainWindow.xaml.cs">
      <DependentUpon>MainWindow.xaml</DependentUpon>
      <SubType>Code</SubType>
    </Compile>
    <Page Include="MotivationalThemeSettingsWindow.xaml">
      <SubType>Designer</SubType>
      <Generator>MSBuild:Compile</Generator>
    </Page>
  </ItemGroup>
  <ItemGroup>
    <Compile Include="Properties\AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
    <Compile Include="Properties\Resources.Designer.cs">
      <AutoGen>True</AutoGen>
      <DesignTime>True</DesignTime>
      <DependentUpon>Resources.resx</DependentUpon>
    </Compile>
    <Compile Include="Properties\Settings.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Settings.settings</DependentUpon>
      <DesignTimeSharedInput>True</DesignTimeSharedInput>
    </Compile>
    <EmbeddedResource Include="Localizations\General.resx">
      <Generator>PublicResXFileCodeGenerator</Generator>
      <LastGenOutput>General.Designer.cs</LastGenOutput>
    </EmbeddedResource>
    <EmbeddedResource Include="Properties\Resources.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
    <None Include="Properties\Settings.settings">
      <Generator>SettingsSingleFileGenerator</Generator>
      <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
    <AppDesigner Include="Properties\" />
  </ItemGroup>
  <ItemGroup>
    <None Include="App.config">
      <SubType>Designer</SubType>
    </None>
  </ItemGroup>
  <ItemGroup>
    <ProjectReference Include="..\Yapa.Shared\YAPA.Shared.csproj">
      <Project>{e7b67cdc-3d67-40db-8ba8-6b3d0d99ebfc}</Project>
      <Name>YAPA.Shared</Name>
    </ProjectReference>
    <ProjectReference Include="..\YAPA.WPF.Shared\YAPA.WPF.Shared.csproj">
      <Project>{3c26fd01-08d3-4192-bbb3-778d9d7692d4}</Project>
      <Name>YAPA.WPF.Shared</Name>
    </ProjectReference>
  </ItemGroup>
  <Import Project="$(MSBuildToolsPath)\Microsoft.CSharp.targets" />
  <PropertyGroup>
    <PostBuildEvent>
    </PostBuildEvent>
  </PropertyGroup>
  <Import Project="$(SolutionDir)\.nuget\NuGet.targets" Condition="Exists('$(SolutionDir)\.nuget\NuGet.targets')" />
  <Target Name="EnsureNuGetPackageBuildImports" BeforeTargets="PrepareForBuild">
    <PropertyGroup>
      <ErrorText>This project references NuGet package(s) that are missing on this computer. Enable NuGet Package Restore to download them.  For more information, see http://go.microsoft.com/fwlink/?LinkID=322105. The missing file is {0}.</ErrorText>
    </PropertyGroup>
    <Error Condition="!Exists('$(SolutionDir)\.nuget\NuGet.targets')" Text="$([System.String]::Format('$(ErrorText)', '$(SolutionDir)\.nuget\NuGet.targets'))" />
  </Target>
  <!-- To modify your build process, add your task inside one of the targets below and uncomment it. 
       Other similar extension points exist, see Microsoft.Common.targets.
  <Target Name="BeforeBuild">
  </Target>
  <Target Name="AfterBuild">
  </Target>
  -->
</Project>
```

`\\?\C:\Dev\Projects\YAPA-2-modern\YAPA.WPF.Shared\App.config`:

```config
﻿<?xml version="1.0" encoding="utf-8"?>
<configuration />
```

`\\?\C:\Dev\Projects\YAPA-2-modern\YAPA.WPF.Shared\packages.config`:

```config
﻿<?xml version="1.0" encoding="utf-8"?>
<packages>
</packages>
```

`\\?\C:\Dev\Projects\YAPA-2-modern\YAPA.WPF.Shared\Shared\AbstractWindow.cs`:

```cs
﻿using System;
using System.Diagnostics;
using System.Linq;
using System.Reflection;
using System.Windows;
using System.Windows.Interop;
using System.Windows.Shell;
using YAPA.Shared.Contracts;

namespace YAPA.Shared
{
    public static class CommandLineArguments
    {
        public const string Start = "/start";
        public const string Stop = "/stop";
        public const string Reset = "/reset";
        public const string Pause = "/pause";
        public const string Skip = "/skip";
        public const string Settings = "/settings";
        public const string HomePage = "/homepage";
    }

    public abstract class AbstractWindow : Window, IApplication
    {
        public new event Action<ApplicationState> StateChanged;
        public new event Action Closing;
        public new event Action Loaded;

        public IMainViewModel ViewModel { get; set; }

        protected AbstractWindow()
        {
        }

        protected AbstractWindow(IMainViewModel viewModel)
        {
            Title = "YAPA 2";
            ViewModel = viewModel;
            base.StateChanged += AbstractWindow_StateChanged;
            base.Closing += AbstractWindow_Closing;
            base.Loaded += AbstractWindow_Loaded;
        }

        private void AbstractWindow_StateChanged(object sender, EventArgs e)
        {
            StateChanged?.Invoke(GetAppState());
        }

        private void AbstractWindow_Loaded(object sender, RoutedEventArgs e)
        {
            CreateJumpList();

            var args = Environment.GetCommandLineArgs();
            if (args.Length > 1)
            {
                ProcessCommandLineArg(args.Last());
            }

            AbstractWindow_StateChanged(this, EventArgs.Empty);
            Loaded?.Invoke();
        }

        public void CloseApp()
        {
            Close();
        }

        private void AbstractWindow_Closing(object sender, System.ComponentModel.CancelEventArgs e)
        {
            if (ViewModel.Engine.IsRunning)
            {
                var messageBoxResult = MessageBox.Show( $"Do you really want to close application ?{Environment.NewLine}{Environment.NewLine}Next time you start application, you can continue from this checkpoint.", "Timer is running", MessageBoxButton.YesNo);
                if (messageBoxResult == MessageBoxResult.No)
                {
                    e.Cancel = true;
                    return;
                }

            }

            Closing?.Invoke();
        }

        public IntPtr WindowHandle => new WindowInteropHelper(this).Handle;

        public ApplicationState AppState
        {
            get => GetAppState();
            set => SetAppState(value);
        }

        private ApplicationState GetAppState()
        {
            ApplicationState state;

            switch (WindowState)
            {
                case WindowState.Minimized:
                    state = ApplicationState.Minimized;
                    break;
                case WindowState.Maximized:
                    state = ApplicationState.Maximized;
                    break;
                case WindowState.Normal:
                    state = ApplicationState.Normal;
                    break;
                default:
                    throw new ArgumentOutOfRangeException();
            }
            return state;
        }

        private void SetAppState(ApplicationState state)
        {
            switch (state)
            {
                case ApplicationState.Minimized:
                    WindowState = WindowState.Minimized;
                    break;
                case ApplicationState.Maximized:
                    WindowState = WindowState.Maximized;
                    break;
                case ApplicationState.Normal:
                    WindowState = WindowState.Normal;
                    break;
                default:
                    throw new ArgumentOutOfRangeException();
            }
        }

        public bool ProcessCommandLineArg(string args)
        {
            if (string.IsNullOrEmpty(args))
                return false;

            var command = args.ToLowerInvariant();
            switch (command)
            {
                case CommandLineArguments.Start:
                    if (ViewModel.StartCommand.CanExecute(null))
                    {
                        ViewModel.StartCommand.Execute(null);
                    }
                    break;
                case CommandLineArguments.Reset:
                    if (ViewModel.ResetCommand.CanExecute(null))
                    {
                        ViewModel.ResetCommand.Execute(null);
                    }
                    break;
                case CommandLineArguments.Stop:
                    if (ViewModel.StopCommand.CanExecute(null))
                    {
                        ViewModel.StopCommand.Execute(null);
                    }
                    break;
                case CommandLineArguments.Pause:
                    if (ViewModel.PauseCommand.CanExecute(null))
                    {
                        ViewModel.PauseCommand.Execute(null);
                    }
                    break;
                case CommandLineArguments.Settings:
                    if (ViewModel.ShowSettingsCommand.CanExecute(null))
                    {
                        ViewModel.ShowSettingsCommand.Execute(null);
                    }
                    break;
                case CommandLineArguments.Skip:
                    if (ViewModel.SkipCommand.CanExecute(null))
                    {
                        ViewModel.SkipCommand.Execute(null);
                    }
                    break;
                case CommandLineArguments.HomePage:
                    Process.Start("https://github.com/YetAnotherPomodoroApp/YAPA-2/");
                    break;
            }

            return true;
        }

        private void CreateJumpList()
        {
            var jumpList = new JumpList();
            JumpList.SetJumpList(Application.Current, jumpList);

            var startTask = new JumpTask
            {
                Title = "Start",
                Description = "Start Pomodoro session",
                ApplicationPath = Assembly.GetEntryAssembly().Location,
                Arguments = CommandLineArguments.Start,
                IconResourceIndex = 1
            };
            jumpList.JumpItems.Add(startTask);

            var resetTask = new JumpTask
            {
                Title = "Start from the beginning",
                Description = "Start new Pomodoro session",
                ApplicationPath = Assembly.GetEntryAssembly().Location,
                Arguments = CommandLineArguments.Reset,
                IconResourceIndex = 4
            };
            jumpList.JumpItems.Add(resetTask);

            var pauseTask = new JumpTask
            {
                Title = "Pause",
                Description = "Pause Pomodoro session",
                ApplicationPath = Assembly.GetEntryAssembly().Location,
                Arguments = CommandLineArguments.Pause,
                IconResourceIndex = 2
            };
            jumpList.JumpItems.Add(pauseTask);

            var stopTask = new JumpTask
            {
                Title = "Stop",
                Description = "Stop Pomodoro session",
                ApplicationPath = Assembly.GetEntryAssembly().Location,
                Arguments = CommandLineArguments.Stop,
                IconResourceIndex = 2
            };
            jumpList.JumpItems.Add(stopTask);

            var skipTask = new JumpTask
            {
                Title = "Skip",
                Description = "Skip break and start working",
                ApplicationPath = Assembly.GetEntryAssembly().Location,
                Arguments = CommandLineArguments.Skip,
                IconResourceIndex = 2
            };
            jumpList.JumpItems.Add(skipTask);

            var settingsTask = new JumpTask
            {
                Title = "Settings",
                Description = "Show YAPA settings",
                ApplicationPath = Assembly.GetEntryAssembly().Location,
                Arguments = CommandLineArguments.Settings,
                IconResourceIndex = 5
            };
            jumpList.JumpItems.Add(settingsTask);

            var homepageTask = new JumpTask
            {
                Title = "Visit home page",
                Description = "Go to YAPA home page",
                ApplicationPath = Assembly.GetEntryAssembly().Location,
                Arguments = CommandLineArguments.HomePage,
                IconResourceIndex = 6
            };
            jumpList.JumpItems.Add(homepageTask);

            jumpList.Apply();
        }

    }
}
```

`\\?\C:\Dev\Projects\YAPA-2-modern\YAPA.WPF.Shared\Shared\FontService.cs`:

```cs
﻿using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Windows.Media;
using YAPA.Shared.Contracts;

namespace YAPA.WPF.Shared.Common
{
    public class FontService : IFontService
    {
        public Dictionary<string, string> GetAllFonts()
        {
            var userFontLocation = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments), @"YAPA2", "Fonts");
            var systemFontLocation = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "Resources", "Fonts");

            var userFonts = GetFontsFromFolder(userFontLocation);
            var systemFonts = GetFontsFromFolder(systemFontLocation);

            foreach (var userFont in userFonts)
            {
                if (!systemFonts.ContainsKey(userFont.Key))
                {
                    systemFonts.Add(userFont.Key, userFont.Value);
                }
            }

            return systemFonts;
        }

        private Dictionary<string, string> GetFontsFromFolder(string folder)
        {
            var fonts = new Dictionary<string, string>();
            if (!Directory.Exists(folder))
            {
                return new Dictionary<string, string>();
            }

            var allFiles = Directory.GetFiles(folder);
            foreach (var file in allFiles)
            {
                try
                {
                    if (file.Contains('#'))
                    {
                        fonts.Add(Path.GetFileName(file), file);
                    }
                    else
                    {
                        var families = Fonts.GetFontFamilies(file);
                        fonts.Add(Path.GetFileName(file), families.First().Source);
                    }
                }
                catch { }
            }

            return fonts;
        }

        public string GetFontPath(string name)
        {
            var allFonts = GetAllFonts();
            if (allFonts.ContainsKey(name))
            {
                return allFonts[name];
            }
            return "Segoe UI Light";
        }
    }
}

```

`\\?\C:\Dev\Projects\YAPA-2-modern\YAPA.WPF.Shared\Shared\SecToTimeConverter.cs`:

```cs
﻿using System;
using System.Globalization;
using System.Windows.Data;

namespace YAPA.Shared
{
    public class SecToTimeConverter : IValueConverter
    {
        public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
        {
            var seconds = value as int?;
            if (seconds == null)
            {
                return 0;
            }

            var min = seconds / 60;
            var sec = seconds % 60;
            return $"{min:00}:{sec:00}";
        }

        public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
        {
            throw new NotImplementedException();
        }
    }
}

```

`\\?\C:\Dev\Projects\YAPA-2-modern\YAPA.WPF.Shared\Shared\YapaHelpers.cs`:

```cs
﻿using System.Windows.Media;

namespace YAPA.WPF.Shared.Shared
{
    public static class YapaHelpers
    {
        public static Color ColorFromString(string color, Color defaultColor)
        {
            try
            {
                return (Color)(ColorConverter.ConvertFromString(color) ?? defaultColor);
            }
            catch
            {
                return defaultColor;
            }
        }
    }
}

```

`\\?\C:\Dev\Projects\YAPA-2-modern\YAPA.WPF.Shared\YAPA.WPF.Shared.csproj`:

```csproj
﻿<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="14.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <Import Project="$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props" Condition="Exists('$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props')" />
  <PropertyGroup>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProjectGuid>{3C26FD01-08D3-4192-BBB3-778D9D7692D4}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>YAPA.WPF.Shared</RootNamespace>
    <AssemblyName>YAPA.WPF.Shared</AssemblyName>
    <TargetFrameworkVersion>v4.8</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
    <TargetFrameworkProfile />
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|AnyCPU' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>bin\Debug\</OutputPath>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|AnyCPU' ">
    <DebugType>pdbonly</DebugType>
    <Optimize>true</Optimize>
    <OutputPath>bin\Release\</OutputPath>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="PresentationCore" />
    <Reference Include="PresentationFramework" />
    <Reference Include="System" />
    <Reference Include="System.Core" />
    <Reference Include="System.Data.SqlServerCe, Version=4.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91, processorArchitecture=MSIL">
      <HintPath>..\packages\Microsoft.SqlServer.Compact.4.0.8876.1\lib\net40\System.Data.SqlServerCe.dll</HintPath>
      <Private>True</Private>
    </Reference>
    <Reference Include="System.Xaml" />
    <Reference Include="WindowsBase" />
  </ItemGroup>
  <ItemGroup>
    <Compile Include="..\CommonAssemblyInfo.cs">
      <Link>Properties\CommonAssemblyInfo.cs</Link>
    </Compile>
    <Compile Include="Shared\AbstractWindow.cs" />
    <Compile Include="Shared\FontService.cs" />
    <Compile Include="Shared\SecToTimeConverter.cs" />
    <Compile Include="Shared\YapaHelpers.cs" />
  </ItemGroup>
  <ItemGroup>
    <None Include="packages.config" />
  </ItemGroup>
  <ItemGroup>
    <ProjectReference Include="..\Yapa.Shared\YAPA.Shared.csproj">
      <Project>{e7b67cdc-3d67-40db-8ba8-6b3d0d99ebfc}</Project>
      <Name>YAPA.Shared</Name>
    </ProjectReference>
  </ItemGroup>
  <Import Project="$(MSBuildToolsPath)\Microsoft.CSharp.targets" />
  <PropertyGroup>
    <PostBuildEvent>
    </PostBuildEvent>
  </PropertyGroup>
  <!-- To modify your build process, add your task inside one of the targets below and uncomment it. 
       Other similar extension points exist, see Microsoft.Common.targets.
  <Target Name="BeforeBuild">
  </Target>
  <Target Name="AfterBuild">
  </Target>
  -->
</Project>
```

`\\?\C:\Dev\Projects\YAPA-2-modern\YAPA.WPF.StarterTheme\DefaultTheme.cs`:

```cs
﻿using System;
using YAPA.Shared.Contracts;
using YAPA.WPF.Themes.DefaultTheme;

namespace YAPA.WPF
{
    public class DefaultTheme : IThemeMeta
    {
        public string Title => "Default theme";

        public Type Theme => typeof(MainWindow);

        public Type Settings => typeof(DefaultThemeSettings);

        public Type SettingEditWindow => typeof(MainWindowSettinWindow);
    }

    public class DefaultThemeSettings : IPluginSettings
    {
        private readonly ISettingsForComponent _settings;

        public int Width
        {
            get { return _settings.Get(nameof(Width), 250); }
            set { _settings.Update(nameof(Width), value); }
        }

        public DefaultThemeSettings(ISettings settings)
        {
            _settings = settings.GetSettingsForComponent(nameof(DefaultTheme));
        }

        public void DeferChanges()
        {
            _settings.DeferChanges();
        }
    }
}

```

`\\?\C:\Dev\Projects\YAPA-2-modern\YAPA.WPF.StarterTheme\MainWindow.xaml`:

```xaml
﻿<shared:AbstractWindow x:Class="YAPA.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:shared="clr-namespace:YAPA.Shared;assembly=YAPA.WPF.Shared"
        Title="YAPA 2"
        Height="150" 
        Width="250" 
        ShowInTaskbar="True" 
        WindowStartupLocation="Manual"
        Topmost="True">
    <Window.InputBindings>
        <MouseBinding Gesture="RightClick" Command="{Binding ShowSettingsCommand}">

        </MouseBinding>
    </Window.InputBindings>
    <Window.Resources>
        <shared:SecToTimeConverter x:Key="SecToTimeConverter" />
    </Window.Resources>
    <Grid>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="*"></ColumnDefinition>
            <ColumnDefinition Width="Auto"></ColumnDefinition>
        </Grid.ColumnDefinitions>
        <StackPanel Grid.Column="0">
            <TextBlock Text="{Binding Engine.Elapsed, Converter={StaticResource SecToTimeConverter}}">
            </TextBlock>
        </StackPanel>
        <StackPanel Grid.Column="1" Orientation="Vertical">
            <Button Command="{Binding StartCommand}" Content="Start"></Button>
            <TextBlock Text="{Binding Engine.Index}" ></TextBlock>
            <Button Command="{Binding StopCommand}" Content="Stop"></Button>
            <Button Command="{Binding ResetCommand}" Content="Reset"></Button>
        </StackPanel>
    </Grid>
</shared:AbstractWindow>








```

`\\?\C:\Dev\Projects\YAPA-2-modern\YAPA.WPF.StarterTheme\MainWindow.xaml.cs`:

```cs
﻿using System.Windows.Input;
using YAPA.Shared.Contracts;
using YAPA.WPF;

namespace YAPA
{
    public partial class MainWindow
    {
        private readonly ISettings _globalSettings;
        private readonly DefaultThemeSettings _settings;

        public MainWindow(IMainViewModel viewModel, ISettings globalSettings, DefaultThemeSettings settings) : base(viewModel)
        {
            _globalSettings = globalSettings;
            _settings = settings;
            DataContext = ViewModel;

            _globalSettings.PropertyChanged += _settings_PropertyChanged;

            // enable dragging
            MouseLeftButtonDown += MainWindow_MouseLeftButtonDown;

            InitializeComponent();
        }

        private void _settings_PropertyChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e)
        {
            if (e.PropertyName == $"{nameof(DefaultTheme)}.{nameof(_settings.Width)}")
            {
                Width = _settings.Width;
            }
        }

        private void MainWindow_MouseLeftButtonDown(object sender, MouseButtonEventArgs e)
        {
            try
            {
                OnMouseLeftButtonDown(e);
                DragMove();
                e.Handled = true;
            }
            catch
            {
                // ignored
            }
        }
    }
}

```

`\\?\C:\Dev\Projects\YAPA-2-modern\YAPA.WPF.StarterTheme\MainWindowSettinWindow.xaml`:

```xaml
﻿<UserControl x:Class="YAPA.WPF.Themes.DefaultTheme.MainWindowSettinWindow"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:local="clr-namespace:YAPA.WPF.Themes.DefaultTheme"
             mc:Ignorable="d" 
             d:DesignHeight="300" d:DesignWidth="300">
    <Grid>
        <Grid>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto"></ColumnDefinition>
                <ColumnDefinition Width="*"></ColumnDefinition>
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto"></RowDefinition>
                <RowDefinition Height="Auto"></RowDefinition>
            </Grid.RowDefinitions>

            <TextBlock Text="Width" Grid.Column="0" Grid.Row="0"></TextBlock>
            <TextBox Text="{Binding Width, Mode=TwoWay, Delay=300, UpdateSourceTrigger=PropertyChanged}" Grid.Column="1" Grid.Row="0"></TextBox>

        </Grid>
    </Grid>
</UserControl>

```

`\\?\C:\Dev\Projects\YAPA-2-modern\YAPA.WPF.StarterTheme\MainWindowSettinWindow.xaml.cs`:

```cs
﻿using System.Windows.Controls;

namespace YAPA.WPF.Themes.DefaultTheme
{
    public partial class MainWindowSettinWindow : UserControl
    {
        public MainWindowSettinWindow(DefaultThemeSettings settings)
        {
            DataContext = settings;
            InitializeComponent();
        }
    }
}

```

`\\?\C:\Dev\Projects\YAPA-2-modern\YAPA.WPF.StarterTheme\Properties\AssemblyInfo.cs`:

```cs
﻿using System.Reflection;
using System.Runtime.InteropServices;

// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
[assembly: AssemblyTitle("YAPA.WPF.StarterTheme")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("YAPA.WPF.StarterTheme")]
[assembly: AssemblyCopyright("Copyright ©  2016")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]

// Setting ComVisible to false makes the types in this assembly not visible 
// to COM components.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type.
[assembly: ComVisible(false)]

// The following GUID is for the ID of the typelib if this project is exposed to COM
[assembly: Guid("e8a13c9c-f756-4fce-b6e7-42e9e5d998cf")]

// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Build and Revision Numbers 
// by using the '*' as shown below:
// [assembly: AssemblyVersion("1.0.*")]
[assembly: AssemblyVersion("1.0.0.0")]
[assembly: AssemblyFileVersion("1.0.0.0")]

```

`\\?\C:\Dev\Projects\YAPA-2-modern\YAPA.WPF.StarterTheme\YAPA.WPF.StarterTheme.csproj`:

```csproj
﻿<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="14.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <Import Project="$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props" Condition="Exists('$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props')" />
  <PropertyGroup>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProjectGuid>{E8A13C9C-F756-4FCE-B6E7-42E9E5D998CF}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>YAPA.WPF.StarterTheme</RootNamespace>
    <AssemblyName>YAPA.WPF.StarterTheme</AssemblyName>
    <TargetFrameworkVersion>v4.8</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
    <TargetFrameworkProfile />
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|AnyCPU' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>bin\Debug\</OutputPath>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|AnyCPU' ">
    <DebugType>pdbonly</DebugType>
    <Optimize>true</Optimize>
    <OutputPath>bin\Release\</OutputPath>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="PresentationCore" />
    <Reference Include="PresentationFramework" />
    <Reference Include="System" />
    <Reference Include="System.Core" />
    <Reference Include="System.Xaml" />
    <Reference Include="System.Xml" />
    <Reference Include="WindowsBase" />
  </ItemGroup>
  <ItemGroup>
    <Compile Include="DefaultTheme.cs" />
    <Compile Include="MainWindow.xaml.cs">
      <DependentUpon>MainWindow.xaml</DependentUpon>
    </Compile>
    <Compile Include="MainWindowSettinWindow.xaml.cs">
      <DependentUpon>MainWindowSettinWindow.xaml</DependentUpon>
    </Compile>
    <Compile Include="Properties\AssemblyInfo.cs" />
  </ItemGroup>
  <ItemGroup>
    <Page Include="MainWindow.xaml">
      <Generator>MSBuild:Compile</Generator>
      <SubType>Designer</SubType>
    </Page>
    <Page Include="MainWindowSettinWindow.xaml">
      <Generator>MSBuild:Compile</Generator>
      <SubType>Designer</SubType>
    </Page>
  </ItemGroup>
  <ItemGroup>
    <ProjectReference Include="..\Yapa.Shared\YAPA.Shared.csproj">
      <Project>{e7b67cdc-3d67-40db-8ba8-6b3d0d99ebfc}</Project>
      <Name>YAPA.Shared</Name>
    </ProjectReference>
    <ProjectReference Include="..\YAPA.WPF.Shared\YAPA.WPF.Shared.csproj">
      <Project>{3c26fd01-08d3-4192-bbb3-778d9d7692d4}</Project>
      <Name>YAPA.WPF.Shared</Name>
    </ProjectReference>
  </ItemGroup>
  <Import Project="$(MSBuildToolsPath)\Microsoft.CSharp.targets" />
  <!-- To modify your build process, add your task inside one of the targets below and uncomment it. 
       Other similar extension points exist, see Microsoft.Common.targets.
  <Target Name="BeforeBuild">
  </Target>
  <Target Name="AfterBuild">
  </Target>
  -->
</Project>
```

`\\?\C:\Dev\Projects\YAPA-2-modern\YAPA.WPF.Themes\DefaultTheme2\DefaultTheme2.cs`:

```cs
﻿namespace YAPA.WPF
{
    //public class DefaultTheme2 : IThemeMeta
    //{
    //    public string Title => "Default theme (2)";

    //    public Type Theme => typeof(MainWindow2);

    //    public Type Settings => null;

    //    public Type SettingEditWindow => null;
    //}
}

```

`\\?\C:\Dev\Projects\YAPA-2-modern\YAPA.WPF.Themes\DefaultTheme2\MainWindow2.xaml`:

```xaml
﻿<shared:AbstractWindow x:Class="YAPA.MainWindow2"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:shared="clr-namespace:YAPA.Shared;assembly=YAPA.WPF.Shared"
        Title="YAPA 2"
        Height="150" 
        Width="200" 
        ShowInTaskbar="True" 
        WindowStartupLocation="Manual"
        Topmost="True"
        Background="Aquamarine">
    <Window.InputBindings>
        <MouseBinding Gesture="RightClick" Command="{Binding ShowSettingsCommand}">

        </MouseBinding>
    </Window.InputBindings>
    <Window.Resources>
        <shared:SecToTimeConverter x:Key="SecToTimeConverter" />
    </Window.Resources>
    <Grid>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="*"></ColumnDefinition>
            <ColumnDefinition Width="Auto"></ColumnDefinition>
        </Grid.ColumnDefinitions>
        <Canvas x:Name="InkCanvas" Background="Yellow"  Grid.Column="0"></Canvas>

        <StackPanel Grid.Column="1" Orientation="Vertical">
            <Button Command="{Binding StartCommand}" Content="Start"></Button>
            <TextBlock Text="{Binding Engine.Index}" ></TextBlock>
            <Button Command="{Binding StopCommand}" Content="Stop"></Button>
            <Button Command="{Binding ResetCommand}" Content="Reset"></Button>
        </StackPanel>


    </Grid>
</shared:AbstractWindow>
















```

`\\?\C:\Dev\Projects\YAPA-2-modern\YAPA.WPF.Themes\DefaultTheme2\MainWindow2.xaml.cs`:

```cs
﻿using System;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Shapes;
using System.Windows.Threading;
using YAPA.Shared.Contracts;

namespace YAPA
{
    public partial class MainWindow2
    {
        public MainWindow2(IMainViewModel viewModel) : base(viewModel)
        {
            DataContext = ViewModel;

            // enable dragging
            MouseLeftButtonDown += MainWindow_MouseLeftButtonDown;

            InitializeComponent();

            Loaded += MainWindow2_Loaded;
            viewModel.Engine.OnStarted += Engine_OnStarted;

        }

        private void Engine_OnStarted()
        {
            startDate = DateTime.Now;
        }

        private void MainWindow2_Loaded()
        {
            this.dispatchTimer = new DispatcherTimer();
            this.dispatchTimer.Interval = new TimeSpan(0, 0, 1);
            this.dispatchTimer.Tick += dispatchTimer_Tick;
            this.dispatchTimer.Start();
        }

        const float PI = 3.141592654F;
        DateTime startDate;
        DateTime clockTime;
        DispatcherTimer dispatchTimer;

        private void DrawClock()
        {
            clockTime = DateTime.Now;
            var canvas = Math.Min(InkCanvas.ActualHeight, InkCanvas.ActualWidth);

            float clockHeight = (int)canvas;
            float clockRadius = (int)canvas / 2;

            float centerX = (float)canvas / 2;
            float centerY = (float)canvas / 2;

            float secThinkness = 1;
            float minThinkness = 5;
            float hourThinkness = 10;

            float hourLength = clockHeight / 3 / 1.65F;
            float minLength = clockHeight / 2.8F;
            float secLength = clockHeight / 3 / 1.15F;

            float hourThickness = clockHeight / 100;
            float minThickness = clockHeight / 150;
            float secThickness = clockHeight / 200;

            float center = clockHeight / 50;

            InkCanvas.Children.Clear();

            int minute = clockTime.Minute;
            int sec = clockTime.Second;

            float hour = clockTime.Hour % 12 + (float)clockTime.Minute / 60;

            float hourRadian = hour * 360 / 12 * PI / 180;
            float minRadian = minute * 360 / 60 * PI / 180;
            float secRadian = sec * 360 / 60 * PI / 180;

            float hourEndPointX = hourLength * (float)System.Math.Sin(hourRadian);
            float hourEndPointY = hourLength * (float)System.Math.Cos(hourRadian);


            if (ViewModel.Engine.IsRunning)
            {
                var currMin = startDate.Minute;
                var duration = ViewModel.Engine.WorkTime / 60;
                var periodColor = Colors.Green;

                if (ViewModel.Engine.Phase == PomodoroPhase.Break)
                {
                    periodColor = Colors.Red;
                    duration = ViewModel.Engine.BreakTime / 60;
                }

                for (int i = currMin; i < currMin + duration; i++)
                {
                    DrawLine(
                        centerX + (float)(clockRadius / 1.50F * System.Math.Sin(i * 6 * PI / 180)),
                        centerY - (float)(clockRadius / 1.50F * System.Math.Cos(i * 6 * PI / 180)),
                        centerX + (float)(clockRadius / 1.65F * System.Math.Sin(i * 6 * PI / 180)),
                        centerY - (float)(clockRadius / 1.65F * System.Math.Cos(i * 6 * PI / 180)), periodColor, 20);
                }
            }

            //Hour
            DrawLine(centerX, centerY, centerX + hourEndPointX, centerY - hourEndPointY, Colors.Black, hourThinkness);

            //minute
            for (int i = 0; i < 60; i++)
            {
                if (i % 5 == 0)
                {
                    DrawLine(
                    centerX + (float)(clockRadius / 1.50F * System.Math.Sin(i * 6 * PI / 180)),
                    centerY - (float)(clockRadius / 1.50F * System.Math.Cos(i * 6 * PI / 180)),
                    centerX + (float)(clockRadius / 1.65F * System.Math.Sin(i * 6 * PI / 180)),
                    centerY - (float)(clockRadius / 1.65F * System.Math.Cos(i * 6 * PI / 180)), Colors.Black, hourThinkness);

                }
                else
                {
                    DrawLine(
                    centerX + (float)(clockRadius / 1.50F * System.Math.Sin(i * 6 * PI / 180)),
                    centerY - (float)(clockRadius / 1.50F * System.Math.Cos(i * 6 * PI / 180)),
                    centerX + (float)(clockRadius / 1.55F * System.Math.Sin(i * 6 * PI / 180)),
                    centerY - (float)(clockRadius / 1.55F * System.Math.Cos(i * 6 * PI / 180)), Colors.Red, hourThinkness);

                }
            }

            float minEndPointX = minLength * (float)System.Math.Sin(minRadian);
            float minEndPointY = minLength * (float)System.Math.Cos(minRadian);

            DrawLine(centerX, centerY, centerX + minEndPointX, centerY - minEndPointY, Colors.Blue, minThinkness);

            //Second
            float secEndPointX = secLength * (float)System.Math.Sin(secRadian);
            float secEndPointY = secLength * (float)System.Math.Cos(secRadian);

            DrawLine(centerX, centerY, centerX + secEndPointX, centerY - secEndPointY, Colors.Green, secThinkness);

        }

        void dispatchTimer_Tick(object sender, object e)
        {
            try
            {
                DrawClock();

            }
            catch (Exception ex)
            {
                Console.WriteLine(ex);
            }
        }

        private void DrawLine(double x1, double y1, double x2, double y2, Color color, float thinkness)
        {

            Line line = new Line()
            {
                X1 = x1,
                Y1 = y1,
                X2 = x2,
                Y2 = y2,
                StrokeThickness = thinkness,
                Stroke = new SolidColorBrush(color)
            };

            InkCanvas.Children.Add(line);
        }


        private void MainWindow_MouseLeftButtonDown(object sender, MouseButtonEventArgs e)
        {
            try
            {
                OnMouseLeftButtonDown(e);
                DragMove();
                e.Handled = true;
            }
            catch
            {
                // ignored
            }
        }
    }
}

```

`\\?\C:\Dev\Projects\YAPA-2-modern\YAPA.WPF.Themes\OutlinedText.cs`:

```cs
﻿using System;
using System.ComponentModel;
using System.Globalization;
using System.Windows;
using System.Windows.Documents;
using System.Windows.Markup;
using System.Windows.Media;

namespace YAPA.WPF.Themes
{
    [ContentProperty("Text")]
    public class OutlinedTextBlock : FrameworkElement
    {
        public static readonly DependencyProperty FillProperty = DependencyProperty.Register(
            "Fill",
            typeof(Brush),
            typeof(OutlinedTextBlock),
            new FrameworkPropertyMetadata(Brushes.Black, FrameworkPropertyMetadataOptions.AffectsRender));

        public static readonly DependencyProperty StrokeProperty = DependencyProperty.Register(
            "Stroke",
            typeof(Brush),
            typeof(OutlinedTextBlock),
            new FrameworkPropertyMetadata(Brushes.Black, FrameworkPropertyMetadataOptions.AffectsRender));

        public static readonly DependencyProperty StrokeThicknessProperty = DependencyProperty.Register(
            "StrokeThickness",
            typeof(double),
            typeof(OutlinedTextBlock),
            new FrameworkPropertyMetadata(1d, FrameworkPropertyMetadataOptions.AffectsRender));

        public static readonly DependencyProperty FontFamilyProperty = TextElement.FontFamilyProperty.AddOwner(
            typeof(OutlinedTextBlock),
            new FrameworkPropertyMetadata(OnFormattedTextUpdated));

        public static readonly DependencyProperty FontSizeProperty = TextElement.FontSizeProperty.AddOwner(
            typeof(OutlinedTextBlock),
            new FrameworkPropertyMetadata(OnFormattedTextUpdated));

        public static readonly DependencyProperty FontStretchProperty = TextElement.FontStretchProperty.AddOwner(
            typeof(OutlinedTextBlock),
            new FrameworkPropertyMetadata(OnFormattedTextUpdated));

        public static readonly DependencyProperty FontStyleProperty = TextElement.FontStyleProperty.AddOwner(
            typeof(OutlinedTextBlock),
            new FrameworkPropertyMetadata(OnFormattedTextUpdated));

        public static readonly DependencyProperty FontWeightProperty = TextElement.FontWeightProperty.AddOwner(
            typeof(OutlinedTextBlock),
            new FrameworkPropertyMetadata(OnFormattedTextUpdated));

        public static readonly DependencyProperty TextProperty = DependencyProperty.Register(
            "Text",
            typeof(string),
            typeof(OutlinedTextBlock),
            new FrameworkPropertyMetadata(OnFormattedTextInvalidated));

        public static readonly DependencyProperty TextAlignmentProperty = DependencyProperty.Register(
            "TextAlignment",
            typeof(TextAlignment),
            typeof(OutlinedTextBlock),
            new FrameworkPropertyMetadata(OnFormattedTextUpdated));

        public static readonly DependencyProperty BackgroundProperty = DependencyProperty.Register(
    "Background",
    typeof(Brush),
    typeof(OutlinedTextBlock),
    new FrameworkPropertyMetadata(OnFormattedTextUpdated));

        public static readonly DependencyProperty TextDecorationsProperty = DependencyProperty.Register(
            "TextDecorations",
            typeof(TextDecorationCollection),
            typeof(OutlinedTextBlock),
            new FrameworkPropertyMetadata(OnFormattedTextUpdated));

        public static readonly DependencyProperty TextTrimmingProperty = DependencyProperty.Register(
            "TextTrimming",
            typeof(TextTrimming),
            typeof(OutlinedTextBlock),
            new FrameworkPropertyMetadata(OnFormattedTextUpdated));

        public static readonly DependencyProperty TextWrappingProperty = DependencyProperty.Register(
            "TextWrapping",
            typeof(TextWrapping),
            typeof(OutlinedTextBlock),
            new FrameworkPropertyMetadata(TextWrapping.NoWrap, OnFormattedTextUpdated));

        private FormattedText formattedText;
        private Geometry textGeometry;

        public OutlinedTextBlock()
        {
            this.TextDecorations = new TextDecorationCollection();
        }

        public Brush Fill
        {
            get { return (Brush) GetValue(FillProperty); }
            set { SetValue(FillProperty, value); }
        }

        public FontFamily FontFamily
        {
            get { return (FontFamily) GetValue(FontFamilyProperty); }
            set { SetValue(FontFamilyProperty, value); }
        }

        [TypeConverter(typeof(FontSizeConverter))]
        public double FontSize
        {
            get { return (double) GetValue(FontSizeProperty); }
            set { SetValue(FontSizeProperty, value); }
        }

        public FontStretch FontStretch
        {
            get { return (FontStretch) GetValue(FontStretchProperty); }
            set { SetValue(FontStretchProperty, value); }
        }

        public FontStyle FontStyle
        {
            get { return (FontStyle) GetValue(FontStyleProperty); }
            set { SetValue(FontStyleProperty, value); }
        }

        public FontWeight FontWeight
        {
            get { return (FontWeight) GetValue(FontWeightProperty); }
            set { SetValue(FontWeightProperty, value); }
        }

        public Brush Stroke
        {
            get { return (Brush) GetValue(StrokeProperty); }
            set { SetValue(StrokeProperty, value); }
        }

        public double StrokeThickness
        {
            get { return (double) GetValue(StrokeThicknessProperty); }
            set { SetValue(StrokeThicknessProperty, value); }
        }

        public string Text
        {
            get { return (string) GetValue(TextProperty); }
            set { SetValue(TextProperty, value); }
        }

        public TextAlignment TextAlignment
        {
            get { return (TextAlignment) GetValue(TextAlignmentProperty); }
            set { SetValue(TextAlignmentProperty, value); }
        }


        public Brush Background
        {
            get { return (Brush)GetValue(BackgroundProperty); }
            set { SetValue(BackgroundProperty, value); }
        }

        public TextDecorationCollection TextDecorations
        {
            get { return (TextDecorationCollection) this.GetValue(TextDecorationsProperty); }
            set { this.SetValue(TextDecorationsProperty, value); }
        }

        public TextTrimming TextTrimming
        {
            get { return (TextTrimming) GetValue(TextTrimmingProperty); }
            set { SetValue(TextTrimmingProperty, value); }
        }

        public TextWrapping TextWrapping
        {
            get { return (TextWrapping) GetValue(TextWrappingProperty); }
            set { SetValue(TextWrappingProperty, value); }
        }

        protected override void OnRender(DrawingContext drawingContext)
        {
            this.EnsureGeometry();

            drawingContext.DrawGeometry(this.Fill, new Pen(this.Stroke, this.StrokeThickness), this.textGeometry);
        }

        protected override Size MeasureOverride(Size availableSize)
        {
            this.EnsureFormattedText();

            // constrain the formatted text according to the available size
            // the Math.Min call is important - without this constraint (which seems arbitrary, but is the maximum allowable text width), things blow up when availableSize is infinite in both directions
            // the Math.Max call is to ensure we don't hit zero, which will cause MaxTextHeight to throw
            this.formattedText.MaxTextWidth = Math.Min(3579139, availableSize.Width);
            this.formattedText.MaxTextHeight = Math.Max(0.0001d, availableSize.Height);

            // return the desired size
            return new Size(this.formattedText.Width, this.formattedText.Height);
        }

        protected override Size ArrangeOverride(Size finalSize)
        {
            this.EnsureFormattedText();

            // update the formatted text with the final size
            this.formattedText.MaxTextWidth = finalSize.Width;
            this.formattedText.MaxTextHeight = finalSize.Height;

            // need to re-generate the geometry now that the dimensions have changed
            this.textGeometry = null;

            return finalSize;
        }

        private static void OnFormattedTextInvalidated(DependencyObject dependencyObject,
            DependencyPropertyChangedEventArgs e)
        {
            var outlinedTextBlock = (OutlinedTextBlock) dependencyObject;
            outlinedTextBlock.formattedText = null;
            outlinedTextBlock.textGeometry = null;

            outlinedTextBlock.InvalidateMeasure();
            outlinedTextBlock.InvalidateVisual();
        }

        private static void OnFormattedTextUpdated(DependencyObject dependencyObject,
            DependencyPropertyChangedEventArgs e)
        {
            var outlinedTextBlock = (OutlinedTextBlock) dependencyObject;
            outlinedTextBlock.UpdateFormattedText();
            outlinedTextBlock.textGeometry = null;

            outlinedTextBlock.InvalidateMeasure();
            outlinedTextBlock.InvalidateVisual();
        }

        private void EnsureFormattedText()
        {
            if (this.formattedText != null || this.Text == null)
            {
                return;
            }

            this.formattedText = new FormattedText(
                this.Text,
                CultureInfo.CurrentUICulture,
                this.FlowDirection,
                new Typeface(this.FontFamily, this.FontStyle, this.FontWeight, FontStretches.Normal),
                this.FontSize,
                Brushes.Black);

            this.UpdateFormattedText();
        }

        private void UpdateFormattedText()
        {
            if (this.formattedText == null)
            {
                return;
            }

            this.formattedText.MaxLineCount = this.TextWrapping == TextWrapping.NoWrap ? 1 : int.MaxValue;
            this.formattedText.TextAlignment = this.TextAlignment;
            this.formattedText.Trimming = this.TextTrimming;

            this.formattedText.SetFontSize(this.FontSize);
            this.formattedText.SetFontStyle(this.FontStyle);
            this.formattedText.SetFontWeight(this.FontWeight);
            this.formattedText.SetFontFamily(this.FontFamily);
            this.formattedText.SetFontStretch(this.FontStretch);
            this.formattedText.SetTextDecorations(this.TextDecorations);
        }

        private void EnsureGeometry()
        {
            if (this.textGeometry != null)
            {
                return;
            }

            this.EnsureFormattedText();
            this.textGeometry = this.formattedText.BuildGeometry(new Point(0, 0));
        }
    }
}
```

`\\?\C:\Dev\Projects\YAPA-2-modern\YAPA.WPF.Themes\packages.config`:

```config
﻿<?xml version="1.0" encoding="utf-8"?>
<packages>
  <package id="MaterialDesignColors" version="2.0.6" targetFramework="net461" />
  <package id="MaterialDesignThemes" version="4.5.0" targetFramework="net461" />
</packages>
```

`\\?\C:\Dev\Projects\YAPA-2-modern\YAPA.WPF.Themes\YAPA\YapaTheme.xaml`:

```xaml
﻿<?xml version="1.0" encoding="UTF-8"?>
<shared:AbstractWindow xmlns:shared="clr-namespace:YAPA.Shared;assembly=YAPA.WPF.Shared" xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:d="http://schemas.microsoft.com/expression/blend/2008" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" x:Class="YAPA.YapaTheme" mc:Ignorable="d" Height="60" Width="130" ShowInTaskbar="True" ResizeMode="NoResize" AllowsTransparency="True" Background="#01000000" IsHitTestVisible="True" WindowStartupLocation="Manual" WindowStyle="None" Topmost="True" MouseLeftButtonDown="MainWindow_MouseLeftButtonDown" MouseEnter="MainWindow_OnMouseEnter" MouseLeave="MainWindow_OnMouseLeave" MouseDoubleClick="Window_MouseDoubleClick">
    <Window.TaskbarItemInfo>
        <TaskbarItemInfo ProgressState="{Binding ProgressState}" ProgressValue="{Binding ProgressValue}" />
    </Window.TaskbarItemInfo>
    <Window.InputBindings>
        <MouseBinding Gesture="RightClick" Command="{Binding ViewModel.ShowSettingsCommand}" />
    </Window.InputBindings>
    <Window.Resources>
        <shared:SecToTimeConverter x:Key="SecToTimeConverter" />
        <Storyboard x:Key="FlashTimer" Timeline.DesiredFrameRate="15">
            <ColorAnimation Storyboard.TargetName="CurrentTime" Storyboard.TargetProperty="(Background).(SolidColorBrush.Color)" To="Tomato" Duration="0:0:0.2" AutoReverse="True" RepeatBehavior="Forever" />
        </Storyboard>
        <Storyboard x:Key="AfterBreakFlashTimer" Timeline.DesiredFrameRate="15">
            <ColorAnimation Storyboard.TargetName="CurrentTime" Storyboard.TargetProperty="(Background).(SolidColorBrush.Color)" To="MediumSeaGreen" Duration="0:0:0.2" AutoReverse="True" RepeatBehavior="Forever" />
        </Storyboard>
    </Window.Resources>
    <Grid Background="Transparent" IsHitTestVisible="True">
        <Viewbox>
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="Auto" />
                </Grid.ColumnDefinitions>
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto" />
                    <RowDefinition Height="*" />
                </Grid.RowDefinitions>
                <!-- Current time -->
                <StackPanel Name="CurrentTime" Grid.Row="0" Grid.Column="0" Grid.RowSpan="2" Background="Transparent" IsHitTestVisible="True" Orientation="Horizontal">
                    <TextBlock x:Name="CurrentTimeMinutes3" Cursor="Arrow" Width="32" FontFamily="Segoe UI Light" FontSize="60" Foreground="{Binding TextBrush}" Opacity="{Binding ClockOpacity}" Background="Transparent" HorizontalAlignment="Right" VerticalAlignment="Center" FontStretch="UltraCondensed" Text="0">
                        <TextBlock.Effect>
                            <DropShadowEffect ShadowDepth="0" Direction="0" Color="{Binding TextShadowColor}" Opacity="{Binding ShadowOpacity}" BlurRadius="10" />
                        </TextBlock.Effect>
                    </TextBlock>
                    <TextBlock x:Name="CurrentTimeMinutes2" Cursor="Arrow" Width="32" FontFamily="Segoe UI Light" FontSize="60" Foreground="{Binding TextBrush}" Opacity="{Binding ClockOpacity}" Background="Transparent" HorizontalAlignment="Right" VerticalAlignment="Center" FontStretch="UltraCondensed" Text="0">
                        <TextBlock.Effect>
                            <DropShadowEffect ShadowDepth="0" Direction="0" Color="{Binding TextShadowColor}" Opacity="{Binding ShadowOpacity}" BlurRadius="10" />
                        </TextBlock.Effect>
                    </TextBlock>
                    <TextBlock x:Name="CurrentTimeMinutes" Cursor="Arrow" Width="32" FontFamily="Segoe UI Light" FontSize="60" Foreground="{Binding TextBrush}" Opacity="{Binding ClockOpacity}" Background="Transparent" HorizontalAlignment="Right" VerticalAlignment="Center" FontStretch="UltraCondensed" Text="0">
                        <TextBlock.Effect>
                            <DropShadowEffect ShadowDepth="0" Direction="0" Color="{Binding TextShadowColor}" Opacity="{Binding ShadowOpacity}" BlurRadius="10" />
                        </TextBlock.Effect>
                    </TextBlock>
                    <TextBlock x:Name="CurrentTimeSeparator" Cursor="Arrow" FontFamily="Segoe UI Light" FontSize="60" Foreground="{Binding TextBrush}" Opacity="{Binding ClockOpacity}" Background="Transparent" HorizontalAlignment="Right" VerticalAlignment="Center" Visibility="{Binding SecondsVisible}" FontStretch="UltraCondensed" Text=":">
                        <TextBlock.Effect>
                            <DropShadowEffect ShadowDepth="0" Direction="0" Color="{Binding TextShadowColor}" Opacity="{Binding ShadowOpacity}" BlurRadius="10" />
                        </TextBlock.Effect>
                    </TextBlock>
                    <TextBlock x:Name="CurrentTimeSeconds2" Cursor="Arrow" Width="32" FontFamily="Segoe UI Light" FontSize="60" Foreground="{Binding TextBrush}" Opacity="{Binding ClockOpacity}" Background="Transparent" HorizontalAlignment="Right" VerticalAlignment="Center" Visibility="{Binding SecondsVisible}" FontStretch="UltraCondensed" Text="0">
                        <TextBlock.Effect>
                            <DropShadowEffect ShadowDepth="0" Direction="0" Color="{Binding TextShadowColor}" Opacity="{Binding ShadowOpacity}" BlurRadius="10" />
                        </TextBlock.Effect>
                    </TextBlock>
                    <TextBlock x:Name="CurrentTimeSeconds" Cursor="Arrow" Width="32" FontFamily="Segoe UI Light" FontSize="60" Foreground="{Binding TextBrush}" Opacity="{Binding ClockOpacity}" Background="Transparent" HorizontalAlignment="Right" Visibility="{Binding SecondsVisible}" VerticalAlignment="Center" FontStretch="UltraCondensed" Text="0">
                        <TextBlock.Effect>
                            <DropShadowEffect ShadowDepth="0" Direction="0" Color="{Binding TextShadowColor}" Opacity="{Binding ShadowOpacity}" BlurRadius="10" />
                        </TextBlock.Effect>
                    </TextBlock>
                </StackPanel>
                <TextBlock Text="{Binding Status}" Grid.Column="0" Grid.Row="0" VerticalAlignment="Center" x:Name="StageTextBlock" TextAlignment="Left" Foreground="{Binding TextBrush}" FontSize="10" Opacity="{Binding ClockOpacity}" FontFamily="Segoe UI" FontStretch="UltraCondensed" />
                <!--<StackPanel Orientation="Vertical" Grid.Column="1">-->
                <StackPanel VerticalAlignment="Top" Grid.Column="1" Grid.Row="0" Orientation="Horizontal" HorizontalAlignment="Right" x:Name="MinExitPanel">
                    <Button x:Name="Minimize" HorizontalAlignment="Right" VerticalAlignment="Top" Cursor="Hand" Content="_" IsHitTestVisible="True" ToolTip="Minimize" Height="15" Width="15" Click="Minimize_OnClick">
                        <Button.Template>
                            <ControlTemplate TargetType="{x:Type Button}">
                                <TextBlock Text="{TemplateBinding Content}" VerticalAlignment="Center" x:Name="MinimizeTextBlock" TextAlignment="Center" Foreground="{Binding TextBrush}" FontSize="10" Opacity="{Binding ClockOpacity}" FontFamily="Segoe UI" FontStretch="UltraCondensed" />
                                <ControlTemplate.Triggers>
                                    <Trigger Property="IsMouseOver" Value="true">
                                        <Setter TargetName="MinimizeTextBlock" Property="Background" Value="{Binding MouseOverBackgroundColor}" />
                                    </Trigger>
                                </ControlTemplate.Triggers>
                            </ControlTemplate>
                        </Button.Template>
                    </Button>
                    <Button x:Name="Exit" HorizontalAlignment="Right" VerticalAlignment="Top" Cursor="Hand" Content="x" IsHitTestVisible="True" ToolTip="Close" Height="15" Width="15" Click="Exit_OnClick">
                        <Button.Template>
                            <ControlTemplate TargetType="{x:Type Button}">
                                <TextBlock Text="{TemplateBinding Content}" VerticalAlignment="Center" x:Name="ExitTextBlock" Background="{Binding TextShadowColor}" TextAlignment="Center" Foreground="{Binding TextBrush}" FontSize="10" Opacity="{Binding ClockOpacity}" FontFamily="Segoe UI" FontStretch="UltraCondensed" />
                                <ControlTemplate.Triggers>
                                    <Trigger Property="IsMouseOver" Value="true">
                                        <Setter TargetName="ExitTextBlock" Property="Background" Value="{Binding MouseOverBackgroundColor}" />
                                    </Trigger>
                                </ControlTemplate.Triggers>
                            </ControlTemplate>
                        </Button.Template>
                    </Button>
                </StackPanel>
                <StackPanel VerticalAlignment="Center" Grid.Column="1" Grid.Row="1" x:Name="ButtonPanel">
                    <Button x:Name="Skip" Command="{Binding ViewModel.SkipCommand}" HorizontalAlignment="Right" VerticalAlignment="Top" Cursor="Hand" Content="SKIP" ToolTip="Skip break" Height="15" Width="38">
                        <Button.Template>
                            <ControlTemplate TargetType="{x:Type Button}">
                                <TextBlock Text="{TemplateBinding Content}" VerticalAlignment="Center" x:Name="PauseTextBlock" TextAlignment="Center" Foreground="{Binding TextBrush}" FontSize="11" Opacity="{Binding ClockOpacity}" FontFamily="Segoe UI" FontStretch="Normal" />
                                <ControlTemplate.Triggers>
                                    <Trigger Property="IsMouseOver" Value="true">
                                        <Setter TargetName="PauseTextBlock" Property="Background" Value="{Binding MouseOverBackgroundColor}" />
                                    </Trigger>
                                </ControlTemplate.Triggers>
                            </ControlTemplate>
                        </Button.Template>
                    </Button>
                    <Button x:Name="Start" Command="{Binding ViewModel.StartCommand}" HorizontalAlignment="Right" VerticalAlignment="Top" Cursor="Hand" Content="START" ToolTip="Start Pomodoro" Height="15" Width="38">
                        <Button.Template>
                            <ControlTemplate TargetType="{x:Type Button}">
                                <TextBlock Text="{TemplateBinding Content}" VerticalAlignment="Center" x:Name="StarTextBlock" TextAlignment="Center" Foreground="{Binding TextBrush}" FontSize="11" Opacity="{Binding ClockOpacity}" FontFamily="Segoe UI" FontStretch="Normal" />
                                <ControlTemplate.Triggers>
                                    <Trigger Property="IsMouseOver" Value="true">
                                        <Setter TargetName="StarTextBlock" Property="Background" Value="{Binding MouseOverBackgroundColor}" />
                                    </Trigger>
                                </ControlTemplate.Triggers>
                            </ControlTemplate>
                        </Button.Template>
                    </Button>
                    <Button x:Name="Pause" Command="{Binding ViewModel.PauseCommand}" HorizontalAlignment="Right" VerticalAlignment="Top" Cursor="Hand" Content="PAUSE" ToolTip="Pause Pomodoro" Height="15" Width="38">
                        <Button.Template>
                            <ControlTemplate TargetType="{x:Type Button}">
                                <TextBlock Text="{TemplateBinding Content}" VerticalAlignment="Center" x:Name="PauseTextBlock" TextAlignment="Center" Foreground="{Binding TextBrush}" FontSize="11" Opacity="{Binding ClockOpacity}" FontFamily="Segoe UI" FontStretch="Normal" />
                                <ControlTemplate.Triggers>
                                    <Trigger Property="IsMouseOver" Value="true">
                                        <Setter TargetName="PauseTextBlock" Property="Background" Value="{Binding MouseOverBackgroundColor}" />
                                    </Trigger>
                                </ControlTemplate.Triggers>
                            </ControlTemplate>
                        </Button.Template>
                    </Button>
                    <Button x:Name="Stop" Command="{Binding ViewModel.StopCommand}" HorizontalAlignment="Right" VerticalAlignment="Top" Cursor="Hand" Content="STOP" ToolTip="Stop Pomodoro" Height="15" Width="38">
                        <Button.Template>
                            <ControlTemplate TargetType="{x:Type Button}">
                                <TextBlock Text="{TemplateBinding Content}" VerticalAlignment="Center" TextAlignment="Center" x:Name="StopTextBlock" Foreground="{Binding TextBrush}" FontSize="11" Opacity="{Binding ClockOpacity}" FontFamily="Segoe UI" FontStretch="UltraCondensed" />
                                <ControlTemplate.Triggers>
                                    <Trigger Property="IsMouseOver" Value="true">
                                        <Setter TargetName="StopTextBlock" Property="Background" Value="{Binding MouseOverBackgroundColor}" />
                                    </Trigger>
                                </ControlTemplate.Triggers>
                            </ControlTemplate>
                        </Button.Template>
                    </Button>
                    <TextBlock x:Name="CurrentPeriod" Cursor="Arrow" FontFamily="Segoe UI" FontStretch="UltraCondensed" FontSize="8" Foreground="{Binding TextBrush}" Opacity="{Binding ClockOpacity}" HorizontalAlignment="Center" VerticalAlignment="Center" Height="10" Text="{Binding ViewModel.Engine.Counter}" ToolTip="Current period" Width="10" />
                </StackPanel>
                <!--</StackPanel>-->
            </Grid>
        </Viewbox>
    </Grid>
</shared:AbstractWindow>
```

`\\?\C:\Dev\Projects\YAPA-2-modern\YAPA.WPF.Themes\YAPA\YapaTheme.xaml.cs`:

```cs
﻿using System;
using System.ComponentModel;
using System.IO;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Threading;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Animation;
using YAPA.Shared;
using YAPA.Shared.Common;
using YAPA.Shared.Contracts;
using YAPA.WPF.Themes.YAPA;

namespace YAPA
{
    public partial class YapaTheme : AbstractWindow, INotifyPropertyChanged
    {

        private readonly double _sizeRatio = 60 / 130.0;

        private YapaThemeSettings Settings { get; }
        private readonly IPomodoroRepository _pomodoroRepository;
        private readonly PomodoroEngineSettings _engineSettings;
        private readonly IFontService _fontService;

        public int PomodorosCompleted { get; set; }

        private readonly Storyboard TimerFlush;
        private readonly Storyboard AfterBreakTimerFlush;

        public YapaTheme(IMainViewModel viewModel, YapaThemeSettings settings, IPomodoroEngine engine, ISettings globalSettings, IPomodoroRepository pomodoroRepository, PomodoroEngineSettings engineSettings, IFontService fontService) : base(viewModel)
        {
            ViewModel = viewModel;
            Settings = settings;
            _pomodoroRepository = pomodoroRepository;
            _engineSettings = engineSettings;
            _fontService = fontService;
            InitializeComponent();

            TimerFlush = (Storyboard)TryFindResource("FlashTimer");
            AfterBreakTimerFlush = (Storyboard)TryFindResource("AfterBreakFlashTimer");

            PomodorosCompleted = 0;

            ViewModel.Engine.PropertyChanged += Engine_PropertyChanged;
            ViewModel.Engine.OnPomodoroCompleted += Engine_OnPomodoroCompleted;
            ViewModel.Engine.OnStarted += StopAnimation;
            ViewModel.Engine.OnStopped += StopAnimation;
            globalSettings.PropertyChanged += _globalSettings_PropertyChanged;

            DataContext = this;

            UpdateAppSize();
            PhaseChanged();
            UpdateStatusText();

            UpdateCompletedPomodoroCount();

            PropertyChanged += YapaTheme_PropertyChanged;
            UpdateDisplayedTime();
            UpdateSecondVisibility();

            UpdateFontFamily(_engineSettings.FontFamily);
        }

        private void UpdateDisplayedTime()
        {
            var minutes = CurrentTimeValue / 60;
            var seconds = CurrentTimeValue % 60;

            var thirdDigit = Math.Truncate(minutes / 100.0);

            CurrentTimeMinutes3.Text = thirdDigit.ToString();
            CurrentTimeMinutes3.Visibility = thirdDigit > 0 ? Visibility.Visible : Visibility.Collapsed;
            CurrentTimeMinutes2.Text = Math.Truncate(minutes / 10.0 % 10).ToString();
            CurrentTimeMinutes.Text = Math.Truncate(minutes % 10.0).ToString();

            CurrentTimeSeconds2.Text = Math.Truncate(seconds / 10.0).ToString();
            CurrentTimeSeconds.Text = Math.Truncate(seconds % 10.0).ToString();

            if (SecondsVisible == Visibility.Collapsed && minutes == 0 && seconds > 0)
            {
                CurrentTimeMinutes2.Text = "<";
                CurrentTimeMinutes.Text = "1";
            }
        }

        private void YapaTheme_PropertyChanged(object sender, PropertyChangedEventArgs e)
        {
            if (e.PropertyName == nameof(CurrentTimeValue))
            {
                UpdateDisplayedTime();
            }
        }

        private void HideSeconds()
        {
            UpdateSecondsVisibility(Visibility.Collapsed);
        }

        private void ShowSeconds()
        {
            UpdateSecondsVisibility(Visibility.Visible);
        }

        private void UpdateSecondsVisibility(Visibility visibility)
        {
            CurrentTimeSeconds.Visibility = visibility;
            CurrentTimeSeparator.Visibility = visibility;

            SecondsVisible = visibility;
            RaisePropertyChanged(nameof(SecondsVisible));
        }

        private void UpdateFontFamily(string fontName)
        {
            var font = new FontFamily(_fontService.GetFontPath(fontName));

            CurrentTimeSeconds.FontFamily = font;
            CurrentTimeSeconds2.FontFamily = font;
            CurrentTimeSeparator.FontFamily = font;
            CurrentTimeMinutes.FontFamily = font;
            CurrentTimeMinutes2.FontFamily = font;
            CurrentTimeMinutes3.FontFamily = font;
        }

        private Visibility _secondsVisibility = Visibility.Visible;
        public Visibility SecondsVisible
        {
            get => _secondsVisibility;
            set => _secondsVisibility = value;
        }

        public double ClockOpacity => Settings.ClockOpacity;
        public double ShadowOpacity => Settings.ShadowOpacity;

        private async void UpdateCompletedPomodoroCount()
        {
            await Task.Run(() =>
            {
                PomodorosCompleted = _pomodoroRepository.CompletedToday();
                RaisePropertyChanged(nameof(PomodorosCompleted));
            });
        }

        public SolidColorBrush FlashingColor
        {
            get
            {
                if (ViewModel.Engine.Phase == PomodoroPhase.WorkEnded)
                {
                    return Brushes.Tomato;
                }
                else if (ViewModel.Engine.Phase == PomodoroPhase.BreakEnded)
                {
                    return Brushes.MediumSeaGreen;
                }
                return Brushes.Transparent;
            }
        }

        private void StopAnimation()
        {
            if (Settings.DisableFlashingAnimation == false)
            {
                TimerFlush.Stop(this);
                AfterBreakTimerFlush.Stop(this);
            }
            else
            {
                CurrentTime.Background = Brushes.Transparent;
            }
        }

        private void StartAnimation()
        {
            Storyboard animationToStart = null;

            if (ViewModel.Engine.Phase == PomodoroPhase.WorkEnded)
            {
                animationToStart = TimerFlush;
            }
            else if (ViewModel.Engine.Phase == PomodoroPhase.BreakEnded)
            {
                animationToStart = AfterBreakTimerFlush;
            }
            if (animationToStart == null)
            {
                return;
            }

            if (Settings.DisableFlashingAnimation == false)
            {
                animationToStart.Begin(this, true);
            }
            else
            {
                CurrentTime.Background = FlashingColor;
            }
        }

        private void Engine_OnPomodoroCompleted()
        {
            PomodorosCompleted++;
            RaisePropertyChanged(nameof(PomodorosCompleted));
        }

        private void _globalSettings_PropertyChanged(object sender, PropertyChangedEventArgs e)
        {
            if (e.PropertyName.StartsWith($"{nameof(YapaTheme)}"))
            {
                RaisePropertyChanged(nameof(TextBrush));
                RaisePropertyChanged(nameof(TextShadowColor));
                RaisePropertyChanged(nameof(MouseOverBackgroundColor));
                RaisePropertyChanged(nameof(Settings.ClockOpacity));
                RaisePropertyChanged(nameof(Settings.ShadowOpacity));

                if (e.PropertyName.StartsWith($"{nameof(YapaTheme)}.{nameof(YapaThemeSettings.Width)}"))
                {
                    UpdateAppSize();
                }

                if (e.PropertyName.StartsWith($"{nameof(YapaTheme)}.{nameof(YapaThemeSettings.ShowStatusText)}"))
                {
                    UpdateStatusText();
                }

                if (e.PropertyName.StartsWith($"{nameof(YapaTheme)}.{nameof(YapaThemeSettings.HideSeconds)}"))
                {
                    UpdateSecondVisibility();
                }

            }

            if (e.PropertyName == $"{nameof(PomodoroEngine)}.{nameof(PomodoroEngineSettings.FontFamily)}")
            {
                UpdateFontFamily(_engineSettings.FontFamily);
            }
        }


        private void UpdateSecondVisibility()
        {
            if (Settings.HideSeconds)
            {
                HideSeconds();
            }
            else
            {
                ShowSeconds();
            }
        }

        private void UpdateAppSize()
        {
            Width = Settings.Width;
            Height = Settings.Width * _sizeRatio;
        }

        private void Engine_PropertyChanged(object sender, PropertyChangedEventArgs e)
        {
            if (e.PropertyName == nameof(ViewModel.Engine.Elapsed) || e.PropertyName == nameof(ViewModel.Engine.DisplayValue))
            {
                RaisePropertyChanged(nameof(CurrentTimeValue));
                RaisePropertyChanged(nameof(ProgressValue));
            }
            else if (e.PropertyName == nameof(ViewModel.Engine.Phase))
            {
                PhaseChanged();
                RaisePropertyChanged(nameof(ProgressState));
                UpdateStatusText();
                StartAnimation();
            }
        }

        private string _statusText;

        public string Status
        {
            get { return _statusText; }
            set
            {
                if (Settings.ShowStatusText)
                {
                    _statusText = value;
                }
                else
                {
                    _statusText = String.Empty;
                }
                RaisePropertyChanged(nameof(Status));
            }
        }

        private void UpdateStatusText()
        {
            switch (ViewModel.Engine.Phase)
            {
                case PomodoroPhase.NotStarted:
                    Status = "YAPA 2.0";
                    break;
                case PomodoroPhase.WorkEnded:
                    Status = "Work Ended";
                    break;
                case PomodoroPhase.BreakEnded:
                    Status = "Break Ended";
                    break;
                case PomodoroPhase.Work:
                    Status = "Work";
                    break;
                case PomodoroPhase.Break:
                    Status = "Break";
                    break;
                case PomodoroPhase.Pause:
                    Status = "Work Paused";
                    break;
            }
        }

        private void PhaseChanged()
        {
            switch (ViewModel.Engine.Phase)
            {
                case PomodoroPhase.NotStarted:
                    Start.Visibility = Visibility.Visible;
                    Stop.Visibility = Visibility.Collapsed;
                    Pause.Visibility = Visibility.Collapsed;
                    Skip.Visibility = Visibility.Collapsed;
                    break;
                case PomodoroPhase.WorkEnded:
                    Start.Visibility = Visibility.Visible;
                    Stop.Visibility = Visibility.Collapsed;
                    Pause.Visibility = Visibility.Collapsed;
                    Skip.Visibility = Visibility.Visible;
                    break;
                case PomodoroPhase.BreakEnded:
                    Start.Visibility = Visibility.Visible;
                    Stop.Visibility = Visibility.Collapsed;
                    Pause.Visibility = Visibility.Collapsed;
                    Skip.Visibility = Visibility.Collapsed;
                    break;
                case PomodoroPhase.Work:
                    Start.Visibility = Visibility.Collapsed;
                    Stop.Visibility = Visibility.Visible;
                    Pause.Visibility = Visibility.Visible;
                    Skip.Visibility = Visibility.Collapsed;
                    break;
                case PomodoroPhase.Break:
                    Start.Visibility = Visibility.Collapsed;
                    Stop.Visibility = Visibility.Visible;
                    Skip.Visibility = Visibility.Collapsed;
                    break;
                case PomodoroPhase.Pause:
                    Start.Visibility = Visibility.Visible;
                    Stop.Visibility = Visibility.Visible;
                    Pause.Visibility = Visibility.Collapsed;
                    Skip.Visibility = Visibility.Collapsed;
                    break;
            }
        }

        public Brush TextBrush
        {
            get
            {
                return new SolidColorBrush(Settings.TextColor);
            }
        }

        public Color TextShadowColor
        {
            get
            {
                return Settings.ShadowColor;
            }
        }

        public Brush MouseOverBackgroundColor => new SolidColorBrush(TextShadowColor);

        public double ProgressValue
        {
            get
            {
                var elapsed = ViewModel.Engine.Elapsed;
                var progress = 0d;
                switch (ViewModel.Engine.Phase)
                {
                    case PomodoroPhase.WorkEnded:
                    case PomodoroPhase.Work:
                    case PomodoroPhase.Pause:
                        progress = (double)elapsed / (ViewModel.Engine.WorkTime);
                        break;
                    case PomodoroPhase.Break:
                    case PomodoroPhase.BreakEnded:
                        progress = (double)elapsed / (ViewModel.Engine.BreakTime);
                        break;
                }
                return progress;
            }
        }

        public string ProgressState
        {
            get
            {
                var progressState = "";
                switch (ViewModel.Engine.Phase)
                {
                    case PomodoroPhase.NotStarted:
                        break;
                    case PomodoroPhase.Work:
                    case PomodoroPhase.Pause:
                        progressState = "Normal";
                        break;
                    case PomodoroPhase.Break:
                        progressState = "Paused";
                        break;
                    case PomodoroPhase.WorkEnded:
                    case PomodoroPhase.BreakEnded:
                        progressState = "Error";
                        break;
                }
                return progressState;
            }
        }

        public int CurrentTimeValue => ViewModel.Engine.DisplayValue;
        public int CurrentIntervalLength => ViewModel.Engine.CurrentIntervalLength;

        private void MainWindow_MouseLeftButtonDown(object sender, MouseButtonEventArgs e)
        {
            try
            {
                OnMouseLeftButtonDown(e);
                DragMove();
                e.Handled = true;
            }
            catch
            {
            }
        }

        private void Minimize_OnClick(object sender, RoutedEventArgs e)
        {
            WindowState = WindowState.Minimized;
        }


        //When mouse is no longer over app, wait 2s and if mouse don't come back over app hide minmax panel
        //There has to be a better way to do it!!
        CancellationTokenSource cancelMinMaxPanelHide = new CancellationTokenSource();

        private void MainWindow_OnMouseEnter(object sender, MouseEventArgs e)
        {
            MinExitPanel.Visibility = Visibility.Visible;
            ButtonPanel.Visibility = Visibility.Visible;

            cancelMinMaxPanelHide.Cancel();
            cancelMinMaxPanelHide = new CancellationTokenSource();
        }

        private async void MainWindow_OnMouseLeave(object sender, MouseEventArgs e)
        {

            await Task.Delay(TimeSpan.FromSeconds(2), cancelMinMaxPanelHide.Token).ContinueWith(
                 x =>
                {
                    if (x.IsCanceled)
                    {
                        return;
                    }

                    Dispatcher.Invoke(() =>
                   {
                       MinExitPanel.Visibility = Visibility.Hidden;
                       if (Settings.HideButtons)
                       {
                           ButtonPanel.Visibility = Visibility.Hidden;
                       }

                   });
                    cancelMinMaxPanelHide = new CancellationTokenSource();
                });
        }

        private void Window_MouseDoubleClick(object sender, MouseButtonEventArgs e)
        {
            TimerFlush.Stop(this);
            AfterBreakTimerFlush.Stop(this);
        }

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void RaisePropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        private void Exit_OnClick(object sender, RoutedEventArgs e)
        {
            CloseApp();
        }
    }
}

```

`\\?\C:\Dev\Projects\YAPA-2-modern\YAPA.WPF.Themes\YAPA\YapaThemeSettings.cs`:

```cs
﻿using System;
using System.Windows.Media;
using YAPA.Shared.Contracts;
using YAPA.WPF.Shared.Shared;

namespace YAPA.WPF.Themes.YAPA
{

    public class YapaThemeMeta : IThemeMeta
    {
        public string Title => "YAPA 1.0";

        public Type Theme => typeof(YapaTheme);

        public Type Settings => typeof(YapaThemeSettings);

        public Type SettingEditWindow => typeof(YapaThemeSettingWindow);
    }

    public class YapaThemeSettings : IPluginSettings
    {
        private readonly ISettingsForComponent _settings;

        public int Width
        {
            get => _settings.Get(nameof(Width), 200);
            set => _settings.Update(nameof(Width), value);
        }

        public double ClockOpacity
        {
            get => _settings.Get(nameof(ClockOpacity), 0.6);
            set => _settings.Update(nameof(ClockOpacity), value);
        }

        public double ShadowOpacity
        {
            get => _settings.Get(nameof(ShadowOpacity), 0.6);
            set => _settings.Update(nameof(ShadowOpacity), value);
        }

        public Color TextColor
        {
            get
            {
                var color = _settings.Get(nameof(TextColor), "White");
                return YapaHelpers.ColorFromString(color, Colors.White);
            }
            set => _settings.Update(nameof(TextColor), value.ToString());
        }

        public Color ShadowColor
        {
            get
            {
                var color = _settings.Get(nameof(ShadowColor), "Black");
                return YapaHelpers.ColorFromString(color, Colors.Black);
            }
            set => _settings.Update(nameof(ShadowColor), value.ToString());
        }

        public bool DisableFlashingAnimation
        {
            get => _settings.Get(nameof(DisableFlashingAnimation), false);
            set => _settings.Update(nameof(DisableFlashingAnimation), value);
        }

        public bool ShowStatusText
        {
            get => _settings.Get(nameof(ShowStatusText), true);
            set => _settings.Update(nameof(ShowStatusText), value);
        }

        public bool HideSeconds
        {
            get => _settings.Get(nameof(HideSeconds), false);
            set => _settings.Update(nameof(HideSeconds), value);
        }

        public bool HideButtons
        {
            get => _settings.Get(nameof(HideButtons), false);
            set => _settings.Update(nameof(HideButtons), value);
        }

        public YapaThemeSettings(ISettings settings)
        {
            _settings = settings.GetSettingsForComponent(nameof(YapaTheme));
        }

        public void DeferChanges()
        {
            _settings.DeferChanges();
        }
    }
}

```

`\\?\C:\Dev\Projects\YAPA-2-modern\YAPA.WPF.Themes\YAPA\YapaThemeSettingWindow.xaml`:

```xaml
﻿<UserControl x:Class="YAPA.WPF.Themes.YAPA.YapaThemeSettingWindow"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:local="clr-namespace:YAPA.WPF.Themes.YAPA"
             xmlns:xctk="http://schemas.xceed.com/wpf/xaml/toolkit"
             xmlns:shared="clr-namespace:YAPA.Shared;assembly=YAPA.WPF.Shared"
             mc:Ignorable="d" 
             d:DesignHeight="300" d:DesignWidth="300">
    <Grid Margin="0,20,0,0">
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="Auto"></ColumnDefinition>
            <ColumnDefinition Width="*"></ColumnDefinition>
        </Grid.ColumnDefinitions>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"></RowDefinition>
            <RowDefinition Height="Auto"></RowDefinition>
            <RowDefinition Height="Auto"></RowDefinition>
            <RowDefinition Height="Auto"></RowDefinition>
            <RowDefinition Height="Auto"></RowDefinition>
            <RowDefinition Height="Auto"></RowDefinition>
            <RowDefinition Height="Auto"></RowDefinition>
            <RowDefinition Height="Auto"></RowDefinition>
            <RowDefinition Height="Auto"></RowDefinition>
            <RowDefinition Height="Auto"></RowDefinition>
            <RowDefinition Height="Auto"></RowDefinition>
        </Grid.RowDefinitions>

        <TextBlock Text="Clock opacity" Grid.Column="0" Grid.Row="1"></TextBlock>
        <Slider Value="{Binding ClockOpacity, Mode=TwoWay, Delay=300}" Margin="5,0,60,0" Minimum="0.1" Maximum="1" Ticks=".0,.1,.2,.3,.4,.5,.6,.7,.8,.9,1.0" Grid.Column="1" Grid.Row="1"/>

        <TextBlock Text="Shadow opacity" Grid.Column="0" Grid.Row="2"></TextBlock>
        <Slider Value="{Binding ShadowOpacity, Mode=TwoWay, Delay=300}" Margin="5,0,60,0" Grid.Column="1" Grid.Row="2"  Minimum="0.1" Maximum="1" Ticks=".0,.1,.2,.3,.4,.5,.6,.7,.8,.9,1.0" />

        <TextBlock Text="Application size" Grid.Column="0" Grid.Row="3"></TextBlock>
        <Slider Value="{Binding Width, Mode=TwoWay, Delay=300}" Grid.Column="1" Margin="5,0,60,0" Grid.Row="3"  Minimum="50" Maximum="600" Interval="1" />

        <CheckBox  IsChecked="{Binding DisableFlashingAnimation, Mode=TwoWay}" Grid.Column="0" Grid.Row="4">Disable flashing animation</CheckBox>
        <CheckBox  IsChecked="{Binding ShowStatusText, Mode=TwoWay}" Grid.Column="0" Grid.Row="5">Show pomodoro status</CheckBox>
        <CheckBox  IsChecked="{Binding HideSeconds, Mode=TwoWay}" Grid.Column="0" Grid.Row="6">Hide seconds</CheckBox>
        <CheckBox  IsChecked="{Binding HideButtons, Mode=TwoWay}" Grid.Column="0" Grid.Row="7" Grid.ColumnSpan="2">Hide buttons</CheckBox>

        <TextBlock Text="Text color" Grid.Row="8" Grid.Column="0"></TextBlock>
        <xctk:ColorPicker  x:Name="TextColor" Grid.Column="1" Grid.Row="8"  MinWidth="72"
                                               Margin="16 0 0 0"  SelectedColor="{Binding TextColor}">
        </xctk:ColorPicker>
        <TextBlock Text="Shadow color" Grid.Row="9" Grid.Column="0"></TextBlock>
        <xctk:ColorPicker  x:Name="ShadowColor" Grid.Column="1" Grid.Row="9"  MinWidth="72"
                                               Margin="16 0 0 0" SelectedColor="{Binding ShadowColor}">
        </xctk:ColorPicker>

    </Grid>
</UserControl>


```

`\\?\C:\Dev\Projects\YAPA-2-modern\YAPA.WPF.Themes\YAPA\YapaThemeSettingWindow.xaml.cs`:

```cs
﻿using System.Windows.Controls;

namespace YAPA.WPF.Themes.YAPA
{
    public partial class YapaThemeSettingWindow : UserControl
    {
        public YapaThemeSettingWindow(YapaThemeSettings settings)
        {
            InitializeComponent();
            DataContext = settings;
        }
    }
}

```

`\\?\C:\Dev\Projects\YAPA-2-modern\YAPA.WPF.Themes\YAPA.WPF.Themes.csproj`:

```csproj
﻿<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="14.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <Import Project="$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props" Condition="Exists('$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props')" />
  <PropertyGroup>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProjectGuid>{3CB19C81-CF0D-466B-9CD6-13FA90CE1329}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>YAPA.WPF.Themes</RootNamespace>
    <AssemblyName>YAPA.WPF.Themes</AssemblyName>
    <TargetFrameworkVersion>v4.8</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
    <TargetFrameworkProfile />
    <NuGetPackageImportStamp>
    </NuGetPackageImportStamp>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|AnyCPU' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>..\Debug\Themes</OutputPath>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|AnyCPU' ">
    <DebugType>pdbonly</DebugType>
    <Optimize>true</Optimize>
    <OutputPath>..\Release\Themes</OutputPath>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="MaterialDesignColors, Version=2.0.6.0, Culture=neutral, PublicKeyToken=df2a72020bd7962a, processorArchitecture=MSIL">
      <HintPath>..\packages\MaterialDesignColors.2.0.6\lib\net452\MaterialDesignColors.dll</HintPath>
    </Reference>
    <Reference Include="MaterialDesignThemes.Wpf, Version=4.5.0.0, Culture=neutral, PublicKeyToken=df2a72020bd7962a, processorArchitecture=MSIL">
      <HintPath>..\packages\MaterialDesignThemes.4.5.0\lib\net452\MaterialDesignThemes.Wpf.dll</HintPath>
    </Reference>
    <Reference Include="PresentationCore" />
    <Reference Include="PresentationFramework" />
    <Reference Include="System" />
    <Reference Include="System.Core" />
    <Reference Include="System.Xaml" />
    <Reference Include="System.Xml" />
    <Reference Include="WindowsBase" />
    <Reference Include="Xceed.Wpf.Toolkit">
      <HintPath>..\Libraries\Xceed.Wpf.Toolkit.dll</HintPath>
    </Reference>
  </ItemGroup>
  <ItemGroup>
    <Compile Include="..\CommonAssemblyInfo.cs">
      <Link>Properties\CommonAssemblyInfo.cs</Link>
    </Compile>
    <Compile Include="DefaultTheme2\DefaultTheme2.cs" />
    <Compile Include="DefaultTheme2\MainWindow2.xaml.cs">
      <DependentUpon>MainWindow2.xaml</DependentUpon>
    </Compile>
    <Compile Include="OutlinedText.cs" />
    <Compile Include="YAPA\YapaTheme.xaml.cs">
      <DependentUpon>YapaTheme.xaml</DependentUpon>
    </Compile>
    <Compile Include="YAPA\YapaThemeSettings.cs" />
    <Compile Include="YAPA\YapaThemeSettingWindow.xaml.cs">
      <DependentUpon>YapaThemeSettingWindow.xaml</DependentUpon>
    </Compile>
  </ItemGroup>
  <ItemGroup>
    <Page Include="DefaultTheme2\MainWindow2.xaml">
      <Generator>MSBuild:Compile</Generator>
      <SubType>Designer</SubType>
    </Page>
    <Page Include="YAPA\YapaTheme.xaml">
      <Generator>MSBuild:Compile</Generator>
      <SubType>Designer</SubType>
    </Page>
    <Page Include="YAPA\YapaThemeSettingWindow.xaml">
      <Generator>MSBuild:Compile</Generator>
      <SubType>Designer</SubType>
    </Page>
  </ItemGroup>
  <ItemGroup>
    <ProjectReference Include="..\Yapa.Shared\YAPA.Shared.csproj">
      <Project>{e7b67cdc-3d67-40db-8ba8-6b3d0d99ebfc}</Project>
      <Name>YAPA.Shared</Name>
    </ProjectReference>
    <ProjectReference Include="..\YAPA.WPF.Shared\YAPA.WPF.Shared.csproj">
      <Project>{3c26fd01-08d3-4192-bbb3-778d9d7692d4}</Project>
      <Name>YAPA.WPF.Shared</Name>
    </ProjectReference>
  </ItemGroup>
  <ItemGroup>
    <None Include="packages.config" />
  </ItemGroup>
  <Import Project="$(MSBuildToolsPath)\Microsoft.CSharp.targets" />
  <Import Project="..\packages\MaterialDesignThemes.4.5.0\build\MaterialDesignThemes.targets" Condition="Exists('..\packages\MaterialDesignThemes.4.5.0\build\MaterialDesignThemes.targets')" />
  <Target Name="EnsureNuGetPackageBuildImports" BeforeTargets="PrepareForBuild">
    <PropertyGroup>
      <ErrorText>This project references NuGet package(s) that are missing on this computer. Use NuGet Package Restore to download them.  For more information, see http://go.microsoft.com/fwlink/?LinkID=322105. The missing file is {0}.</ErrorText>
    </PropertyGroup>
    <Error Condition="!Exists('..\packages\MaterialDesignThemes.4.5.0\build\MaterialDesignThemes.targets')" Text="$([System.String]::Format('$(ErrorText)', '..\packages\MaterialDesignThemes.4.5.0\build\MaterialDesignThemes.targets'))" />
  </Target>
  <!-- To modify your build process, add your task inside one of the targets below and uncomment it. 
       Other similar extension points exist, see Microsoft.Common.targets.
  <Target Name="BeforeBuild">
  </Target>
  <Target Name="AfterBuild">
  </Target>
  -->
</Project>
```